<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Datura stramonium L.</title>
  
  <subtitle>Life is the noisy caress,But the quiet loneliness</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zero-mk.github.io/"/>
  <updated>2019-01-24T07:50:57.023Z</updated>
  <id>http://zero-mk.github.io/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux骚姿势(“.“和”!“在bash中的用法)</title>
    <link href="http://zero-mk.github.io/2019/01/23/linux-bash/"/>
    <id>http://zero-mk.github.io/2019/01/23/linux-bash/</id>
    <published>2019-01-23T15:56:30.000Z</published>
    <updated>2019-01-24T07:50:57.023Z</updated>
    
    <content type="html"><![CDATA[<p>记录一下学到的Linux新姿势</p><h3 id="“-”"><a href="#“-”" class="headerlink" title="“.”"></a>“.”</h3><p>参考：<a href="https://linux.cn/article-10465-1.html" target="_blank" rel="noopener">https://linux.cn/article-10465-1.html</a></p><h4 id="0x1，表示当前目录"><a href="#0x1，表示当前目录" class="headerlink" title="0x1，表示当前目录(.)"></a>0x1，表示当前目录(.)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@fc844e891ecf:/<span class="comment"># ls ./</span></span><br><span class="line">bin   dev  home   lib lib64 mediaopt   root  sbin  sys  usr</span><br><span class="line">boot  etc  k-vim  lib32  libx32  mntproc  run   srv   tmp  var</span><br><span class="line">root@fc844e891ecf:/<span class="comment"># ls .</span></span><br><span class="line">bin   dev  home   lib lib64 mediaopt   root  sbin  sys  usr</span><br><span class="line">boot  etc  k-vim  lib32  libx32  mntproc  run   srv   tmp  var</span><br><span class="line">root@fc844e891ecf:/<span class="comment"># pwd .</span></span><br><span class="line">/</span><br></pre></td></tr></table></figure><h4 id="0x2-隐藏文件-xxx"><a href="#0x2-隐藏文件-xxx" class="headerlink" title="0x2,隐藏文件(.xxx)"></a>0x2,隐藏文件(.xxx)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@fc844e891ecf:~<span class="comment"># ls</span></span><br><span class="line">bin  ctf-toolspeda  vim</span><br><span class="line">root@fc844e891ecf:~<span class="comment"># mkdir .test</span></span><br><span class="line">root@fc844e891ecf:~<span class="comment"># ls</span></span><br><span class="line">bin  ctf-toolspeda  vim</span><br><span class="line">root@fc844e891ecf:~<span class="comment"># ls -a</span></span><br><span class="line">. .. .<span class="built_in">test</span> bin  ctf-toolspeda  vim</span><br></pre></td></tr></table></figure><h4 id="0x3-指向当前目录的父级"><a href="#0x3-指向当前目录的父级" class="headerlink" title="0x3,指向当前目录的父级(..)"></a>0x3,指向当前目录的父级(..)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@fc844e891ecf:~# pwd</span><br><span class="line">/root</span><br><span class="line">root@fc844e891ecf:~# cd ..</span><br><span class="line">root@fc844e891ecf:/# pwd</span><br><span class="line">/</span><br></pre></td></tr></table></figure><h4 id="0x4-等价source命令"><a href="#0x4-等价source命令" class="headerlink" title="0x4,等价source命令(.)"></a>0x4,等价source命令(.)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@fc844e891ecf:/# .</span><br><span class="line">bash: .: filename argument required</span><br><span class="line">.: usage: . filename [arguments]</span><br><span class="line">root@fc844e891ecf:/# source</span><br><span class="line">bash: source: filename argument required</span><br><span class="line">source: usage: source filename [arguments]</span><br></pre></td></tr></table></figure><h4 id="0x5-用于构建序列"><a href="#0x5-用于构建序列" class="headerlink" title="0x5,用于构建序列({..})"></a>0x5,用于构建序列({..})</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@fc844e891ecf:/# echo &#123;1..3&#125; #从左边的值开始，计数到右边的值</span><br><span class="line">1 2 3</span><br><span class="line">root@fc844e891ecf:/# echo &#123;1..10..2&#125; #从左边的值开始，计数到右边的值,步数为2</span><br><span class="line">1 3 5 7 9</span><br><span class="line">root@fc844e891ecf:/# echo test_&#123;1..10&#125; #生成以test_开头的序列</span><br><span class="line">test_1 test_2 test_3 test_4 test_5 test_6 test_7 test_8 test_9 test_10</span><br><span class="line">root@fc844e891ecf:/# echo &#123;a..z&#125; #生成a到z的序列</span><br><span class="line">a b c d e f g h i j k l m n o p q r s t u v w x y z</span><br></pre></td></tr></table></figure><h3 id="“-”-1"><a href="#“-”-1" class="headerlink" title="“!”"></a>“!”</h3><p>参考：<a href="https://mp.weixin.qq.com/s/Au4doF454gte2K5sVt4qYQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Au4doF454gte2K5sVt4qYQ</a></p><h4 id="0x1-执行上一条命令-代表执行的上一条命令"><a href="#0x1-执行上一条命令-代表执行的上一条命令" class="headerlink" title="0x1,执行上一条命令(!!代表执行的上一条命令)"></a>0x1,执行上一条命令(!!代表执行的上一条命令)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@fc844e891ecf:/# ls</span><br><span class="line">bin   dev  home   lib lib64 mediaopt   root  sbin  sys  usr</span><br><span class="line">boot  etc  k-vim  lib32  libx32  mntproc  run   srv   tmp  var</span><br><span class="line">root@fc844e891ecf:/# !!</span><br><span class="line">ls</span><br><span class="line">bin   dev  home   lib lib64 mediaopt   root  sbin  sys  usr</span><br><span class="line">boot  etc  k-vim  lib32  libx32  mntproc  run   srv   tmp  var</span><br></pre></td></tr></table></figure><h4 id="0x2-使用上个命令第一个或最后一个的参数执行命令"><a href="#0x2-使用上个命令第一个或最后一个的参数执行命令" class="headerlink" title="0x2,使用上个命令第一个或最后一个的参数执行命令"></a>0x2,使用上个命令第一个或最后一个的参数执行命令</h4><h5 id="第一个参数"><a href="#第一个参数" class="headerlink" title="第一个参数(!^)"></a>第一个参数(!^)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@9d070a1a1e07:~<span class="comment"># ls -al /usr</span></span><br><span class="line">total 48</span><br><span class="line">drwxr-xr-x 1 root root  4096 Jan 19 11:50 .</span><br><span class="line">drwxr-xr-x 1 root root  4096 Jan 24 06:04 ..</span><br><span class="line">drwxr-xr-x 1 root root  4096 Jan 22 14:51 bin</span><br><span class="line">drwxr-xr-x 2 root root  4096 Oct 30  2017 games</span><br><span class="line">drwxr-xr-x 1 root root  4096 Jan 22 14:51 include</span><br><span class="line">drwxr-xr-x 1 root root  4096 Jan 19 16:04 lib</span><br><span class="line">还有，省略。。。</span><br><span class="line">root@9d070a1a1e07:~<span class="comment"># ls !^ ./</span></span><br><span class="line">ls -al ./</span><br><span class="line">total 72</span><br><span class="line">drwx------  1 root root 4096 Jan 24 06:13 .</span><br><span class="line">drwxr-xr-x  1 root root 4096 Jan 24 06:04 ..</span><br><span class="line">-rw-r--r--  1 root root  570 Oct 30  2017 .bashrc</span><br><span class="line">drwx------  1 root root 4096 Jan 21 12:02 .cache</span><br><span class="line">drwx------  3 root root 4096 Jan 19 15:35 .config</span><br><span class="line">drwxr-xr-x  2 root root 4096 Jan 22 14:19 .dotfiles</span><br><span class="line">-rw-------  1 root root    8 Jan 19 15:41 .gdb_history</span><br><span class="line">-rw-r--r--  1 root root   36 Jan 19 13:18 .gdbinit</span><br></pre></td></tr></table></figure><h5 id="最后一个参数"><a href="#最后一个参数" class="headerlink" title="最后一个参数(!$)"></a>最后一个参数(!$)</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@9d070a1a1e07:~<span class="comment"># ls -al /usr</span></span><br><span class="line">total 48</span><br><span class="line">drwxr-xr-x 1 root root  4096 Jan 19 11:50 .</span><br><span class="line">drwxr-xr-x 1 root root  4096 Jan 24 06:04 ..</span><br><span class="line">drwxr-xr-x 1 root root  4096 Jan 22 14:51 bin</span><br><span class="line">drwxr-xr-x 2 root root  4096 Oct 30  2017 games</span><br><span class="line">drwxr-xr-x 1 root root  4096 Jan 22 14:51 include</span><br><span class="line">略。。。</span><br><span class="line">root@9d070a1a1e07:~<span class="comment"># cd !$</span></span><br><span class="line"><span class="built_in">cd</span> /usr</span><br><span class="line">root@9d070a1a1e07:/usr<span class="comment">#</span></span><br></pre></td></tr></table></figure><h4 id="0x3-执行上条命令不带上最后一个参数"><a href="#0x3-执行上条命令不带上最后一个参数" class="headerlink" title="0x3,执行上条命令不带上最后一个参数(!:-)"></a>0x3,执行上条命令不带上最后一个参数(!:-)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@9d070a1a1e07:/<span class="comment"># ls -l /lib/</span></span><br><span class="line">total 36</span><br><span class="line">lrwxrwxrwx 1 root root   21 Jan 19 11:51 cpp -&gt; /etc/alternatives/cpp</span><br><span class="line">drwxr-xr-x 2 root root 4096 Jan 19 11:49 i386-linux-gnu</span><br><span class="line">drwxr-xr-x 1 root root 4096 Jun  1  2018 ifupdown</span><br><span class="line">drwxr-xr-x 1 root root 4096 Oct 21 19:00 init</span><br><span class="line">lrwxrwxrwx 1 root root   25 Dec  5 18:50 ld-linux.so.2 -&gt; i386-linux-gnu/ld-2.28.so</span><br><span class="line">略。。。</span><br><span class="line">root@9d070a1a1e07:/<span class="comment"># !:-</span></span><br><span class="line">ls -l</span><br><span class="line">total 72</span><br><span class="line">drwxr-xr-x   1 root root 4096 Jan 22 16:40 bin</span><br><span class="line">drwxr-xr-x   2 root root 4096 Oct 30  2017 boot</span><br><span class="line">drwxr-xr-x   5 root root  360 Jan 24 06:04 dev</span><br><span class="line">drwxr-xr-x   1 root root 4096 Jan 24 06:04 etc</span><br><span class="line">略。。。</span><br></pre></td></tr></table></figure><h3 id="0x4-使用上条命令的所有参数"><a href="#0x4-使用上条命令的所有参数" class="headerlink" title="0x4,使用上条命令的所有参数"></a>0x4,使用上条命令的所有参数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@9d070a1a1e07:~<span class="comment"># fin ./vim -name "*.py"</span></span><br><span class="line">bash: fin: <span class="built_in">command</span> not found</span><br><span class="line">root@9d070a1a1e07:~<span class="comment"># find !*</span></span><br><span class="line">find ./vim -name <span class="string">"*.py"</span></span><br><span class="line">./vim/runtime/tools/demoserver.py</span><br><span class="line">./vim/src/dehqx.py</span><br><span class="line">./vim/src/testdir/pythonx/failing.py</span><br></pre></td></tr></table></figure><h4 id="0x5-指定使用上条命令的第几个参数-命令名-参数号"><a href="#0x5-指定使用上条命令的第几个参数-命令名-参数号" class="headerlink" title="0x5,指定使用上条命令的第几个参数(![命令名]:[参数号])"></a>0x5,指定使用上条命令的第几个参数(![命令名]:[参数号])</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@9d070a1a1e07:~<span class="comment"># find ./vim -name "*.py"</span></span><br><span class="line">./vim/runtime/tools/demoserver.py</span><br><span class="line">./vim/src/dehqx.py</span><br><span class="line">./vim/src/testdir/pythonx/failing.py</span><br><span class="line">root@9d070a1a1e07:~<span class="comment"># cd !find:1 &amp;&amp; ls</span></span><br><span class="line"><span class="built_in">cd</span> ./vim &amp;&amp; ls</span><br><span class="line">CONTRIBUTING.md  Makefile   README.txtappveyor.yml  farsi  nsis     runtime  tools     vimtutor.bat</span><br><span class="line">Filelist README.md  READMEdirconfigure     mvim   pixmaps  src      uninstal.txt  vimtutor.com</span><br><span class="line">root@9d070a1a1e07:~/vim<span class="comment">#</span></span><br></pre></td></tr></table></figure><h4 id="0x6-执行history中的命令-命令前的序号"><a href="#0x6-执行history中的命令-命令前的序号" class="headerlink" title="0x6,执行history中的命令(![命令前的序号])"></a>0x6,执行history中的命令(![命令前的序号])</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@9d070a1a1e07:/<span class="comment"># history</span></span><br><span class="line">    1  <span class="built_in">cd</span> ..</span><br><span class="line">    2  <span class="built_in">cd</span> /</span><br><span class="line">    3  ls</span><br><span class="line">    4  <span class="built_in">history</span></span><br><span class="line">root@9d070a1a1e07:/<span class="comment"># !3</span></span><br><span class="line">ls</span><br><span class="line">bin  boot  devetc  home  k-vim  lib  lib32  lib64  libx32  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br></pre></td></tr></table></figure><h4 id="0x7-按照关键字执行历史命令执行上一条以关键字开头的命令"><a href="#0x7-按照关键字执行历史命令执行上一条以关键字开头的命令" class="headerlink" title="0x7,按照关键字执行历史命令执行上一条以关键字开头的命令(!)"></a>0x7,按照关键字执行历史命令执行上一条以关键字开头的命令(!)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@9d070a1a1e07:~<span class="comment"># echo "test"</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">root@9d070a1a1e07:~<span class="comment"># !echo</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"test"</span></span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">root@9d070a1a1e07:~<span class="comment"># !?test?</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"test"</span></span><br><span class="line"><span class="built_in">test</span></span><br></pre></td></tr></table></figure><h4 id="0x8-替换上一条命令的参数"><a href="#0x8-替换上一条命令的参数" class="headerlink" title="0x8,替换上一条命令的参数"></a>0x8,替换上一条命令的参数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@9d070a1a1e07:~<span class="comment"># find ./* -name "make"</span></span><br><span class="line">root@9d070a1a1e07:~<span class="comment"># !!:gs/make/Makefile</span></span><br><span class="line">find ./* -name <span class="string">"Makefile"</span></span><br><span class="line">./vim/runtime/doc/Makefile</span><br><span class="line">./vim/runtime/indent/Makefile</span><br><span class="line">./vim/runtime/macros/maze/Makefile</span><br><span class="line">./vim/runtime/tutor/Makefile</span><br><span class="line">./vim/Makefile</span><br><span class="line">略。。。</span><br></pre></td></tr></table></figure><h4 id="0x9-逻辑非"><a href="#0x9-逻辑非" class="headerlink" title="0x9,逻辑非"></a>0x9,逻辑非</h4><p>略</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一下学到的Linux新姿势&lt;/p&gt;
&lt;h3 id=&quot;“-”&quot;&gt;&lt;a href=&quot;#“-”&quot; class=&quot;headerlink&quot; title=&quot;“.”&quot;&gt;&lt;/a&gt;“.”&lt;/h3&gt;&lt;p&gt;参考：&lt;a href=&quot;https://linux.cn/article-10465-
      
    
    </summary>
    
    
      <category term="linux bash" scheme="http://zero-mk.github.io/tags/linux-bash/"/>
    
  </entry>
  
  <entry>
    <title>编译最新vim并支持python</title>
    <link href="http://zero-mk.github.io/2019/01/22/compile-vim/"/>
    <id>http://zero-mk.github.io/2019/01/22/compile-vim/</id>
    <published>2019-01-22T14:37:30.000Z</published>
    <updated>2019-01-23T15:58:50.299Z</updated>
    
    <content type="html"><![CDATA[<p>每次看到vim不支持Python的时候，心情是崩溃的，要自己compile，Linux下的编译都烦，上次编译edb，emmmm，心理阴影，废话不多说，言归正传</p><p><code>vim --version</code>查看vim支持，前面有+的都是支持的，有-的都是不支持的，可以看到-python3 ，-python3 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">root@cca41a231247 ~<span class="comment"># vim --version</span></span><br><span class="line">VIM - Vi IMproved 8.1 (2018 May 18, compiled Jan 05 2019 20:53:12)</span><br><span class="line">Included patches: 1-693</span><br><span class="line">Modified by team+vim@tracker.debian.org</span><br><span class="line">Compiled by team+vim@tracker.debian.org</span><br><span class="line">Huge version without GUI.  Features included (+) or not (-):</span><br><span class="line">+acl               +extra_search      +mouse_netterm     +tag_old_static</span><br><span class="line">+arabic            +farsi             +mouse_sgr         -tag_any_white</span><br><span class="line">+autocmd           +file_in_path      -mouse_sysmouse    -tcl</span><br><span class="line">+autochdir         +find_in_path      +mouse_urxvt       +termguicolors</span><br><span class="line">-autoservername    +<span class="built_in">float</span>             +mouse_xterm       +terminal</span><br><span class="line">-balloon_eval      +folding           +multi_byte        +terminfo</span><br><span class="line">+balloon_eval_term -footer            +multi_lang        +termresponse</span><br><span class="line">-browse            +fork()            -mzscheme          +textobjects</span><br><span class="line">++builtin_terms    +gettext           +netbeans_intg     +textprop</span><br><span class="line">+byte_offset       -hangul_input      +num64             +timers</span><br><span class="line">+channel           +iconv             +packages          +title</span><br><span class="line">+cindent           +insert_expand     +path_extra        -toolbar</span><br><span class="line">-clientserver      +job               -perl              +user_commands</span><br><span class="line">-clipboard         +jumplist          +persistent_undo   +vartabs</span><br><span class="line">+cmdline_compl     +keymap            +postscript        +vertsplit</span><br><span class="line">+cmdline_hist      +lambda            +printer           +virtualedit</span><br><span class="line">+cmdline_info      +langmap           +profile           +visual</span><br><span class="line">+comments          +libcall           -python            +visualextra</span><br><span class="line">+conceal           +linebreak         -python3           +viminfo</span><br><span class="line">+cryptv            +lispindent        +quickfix          +vreplace</span><br><span class="line">+cscope            +listcmds          +reltime           +wildignore</span><br><span class="line">+cursorbind        +localmap          +rightleft         +wildmenu</span><br><span class="line">+cursorshape       -lua               -ruby              +windows</span><br><span class="line">+dialog_con        +menu              +scrollbind        +writebackup</span><br><span class="line">+diff              +mksession         +signs             -X11</span><br><span class="line">+digraphs          +modify_fname      +smartindent       -xfontset</span><br><span class="line">-dnd               +mouse             +startuptime       -xim</span><br><span class="line">-ebcdic            -mouseshape        +statusline        -xpm</span><br><span class="line">+emacs_tags        +mouse_dec         -sun_workshop      -xsmp</span><br><span class="line">+<span class="built_in">eval</span>              +mouse_gpm         +syntax            -xterm_clipboard</span><br><span class="line">+ex_extra          -mouse_jsbterm     +tag_binary        -xterm_save</span><br><span class="line">   system vimrc file: <span class="string">"<span class="variable">$VIM</span>/vimrc"</span></span><br><span class="line">     user vimrc file: <span class="string">"<span class="variable">$HOME</span>/.vimrc"</span></span><br><span class="line"> 2nd user vimrc file: <span class="string">"~/.vim/vimrc"</span></span><br><span class="line">      user exrc file: <span class="string">"<span class="variable">$HOME</span>/.exrc"</span></span><br><span class="line">       defaults file: <span class="string">"<span class="variable">$VIMRUNTIME</span>/defaults.vim"</span></span><br><span class="line">  fall-back <span class="keyword">for</span> <span class="variable">$VIM</span>: <span class="string">"/usr/share/vim"</span></span><br><span class="line">Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H   -Wdate-time  -g -O2 -fdebug-prefix-map=/build/vim-SsPCMM/vim-8.1.0693=. -fstack-protector-strong -Wformat -Werror=format-security -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1</span><br><span class="line">Linking: gcc   -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -o vim        -lm -ltinfo -lnsl  -lselinux -lacl -lattr -lgpm -ldl</span><br></pre></td></tr></table></figure><h3 id="0x1-现在，把最新源码从vim的Github仓库下来"><a href="#0x1-现在，把最新源码从vim的Github仓库下来" class="headerlink" title="0x1.现在，把最新源码从vim的Github仓库下来"></a>0x1.现在，把最新源码从<a href="https://link.jianshu.com/?t=https://github.com/vim/vim" target="_blank" rel="noopener">vim的Github仓库</a>下来</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/vim/vim.git</span><br></pre></td></tr></table></figure><h3 id="0x2-安装依赖"><a href="#0x2-安装依赖" class="headerlink" title="0x2.安装依赖"></a>0x2.安装依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install python-dev python3-dev libncurses5-dev</span><br></pre></td></tr></table></figure><h3 id="0x3-编译"><a href="#0x3-编译" class="headerlink" title="0x3.编译"></a>0x3.编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd vim #进入你刚刚clone下来的vim</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make clean #清除上一次的编译</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --with-features=huge --<span class="built_in">enable</span>-python3interp --<span class="built_in">enable</span>-pythoninterp --with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu/ --<span class="built_in">enable</span>-rubyinterp --<span class="built_in">enable</span>-luainterp --<span class="built_in">enable</span>-perlinterp --with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu/ --<span class="built_in">enable</span>-multibyte --<span class="built_in">enable</span>-cscope --prefix=/usr/<span class="built_in">local</span>/vim/</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install #编译并安装到上面--prefix参数指定的位置</span><br></pre></td></tr></table></figure><p>现在编译和安装OK了，接下来就是怎么启动的问题</p><h3 id="0x4-设置启动命令"><a href="#0x4-设置启动命令" class="headerlink" title="0x4.设置启动命令"></a>0x4.设置启动命令</h3><p>我们现在执行vim –version看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">root@cca41a231247 /u/l/v/bin<span class="comment"># vim --version</span></span><br><span class="line">VIM - Vi IMproved 8.1 (2018 May 18, compiled Jan 05 2019 20:53:12)</span><br><span class="line">Included patches: 1-693</span><br><span class="line">Modified by team+vim@tracker.debian.org</span><br><span class="line">Compiled by team+vim@tracker.debian.org</span><br><span class="line">Huge version without GUI.  Features included (+) or not (-):</span><br><span class="line">+acl               +extra_search      +mouse_netterm     +tag_old_static</span><br><span class="line">+arabic            +farsi             +mouse_sgr         -tag_any_white</span><br><span class="line">+autocmd           +file_in_path      -mouse_sysmouse    -tcl</span><br><span class="line">+autochdir         +find_in_path      +mouse_urxvt       +termguicolors</span><br><span class="line">-autoservername    +<span class="built_in">float</span>             +mouse_xterm       +terminal</span><br><span class="line">-balloon_eval      +folding           +multi_byte        +terminfo</span><br><span class="line">+balloon_eval_term -footer            +multi_lang        +termresponse</span><br><span class="line">-browse            +fork()            -mzscheme          +textobjects</span><br><span class="line">++builtin_terms    +gettext           +netbeans_intg     +textprop</span><br><span class="line">+byte_offset       -hangul_input      +num64             +timers</span><br><span class="line">+channel           +iconv             +packages          +title</span><br><span class="line">+cindent           +insert_expand     +path_extra        -toolbar</span><br><span class="line">-clientserver      +job               -perl              +user_commands</span><br><span class="line">-clipboard         +jumplist          +persistent_undo   +vartabs</span><br><span class="line">+cmdline_compl     +keymap            +postscript        +vertsplit</span><br><span class="line">+cmdline_hist      +lambda            +printer           +virtualedit</span><br><span class="line">+cmdline_info      +langmap           +profile           +visual</span><br><span class="line">+comments          +libcall           -python            +visualextra</span><br><span class="line">+conceal           +linebreak         -python3           +viminfo</span><br><span class="line">+cryptv            +lispindent        +quickfix          +vreplace</span><br><span class="line">+cscope            +listcmds          +reltime           +wildignore</span><br><span class="line">+cursorbind        +localmap          +rightleft         +wildmenu</span><br><span class="line">+cursorshape       -lua               -ruby              +windows</span><br><span class="line">+dialog_con        +menu              +scrollbind        +writebackup</span><br><span class="line">+diff              +mksession         +signs             -X11</span><br><span class="line">+digraphs          +modify_fname      +smartindent       -xfontset</span><br><span class="line">-dnd               +mouse             +startuptime       -xim</span><br><span class="line">-ebcdic            -mouseshape        +statusline        -xpm</span><br><span class="line">+emacs_tags        +mouse_dec         -sun_workshop      -xsmp</span><br><span class="line">+<span class="built_in">eval</span>              +mouse_gpm         +syntax            -xterm_clipboard</span><br><span class="line">+ex_extra          -mouse_jsbterm     +tag_binary        -xterm_save</span><br><span class="line">   system vimrc file: <span class="string">"<span class="variable">$VIM</span>/vimrc"</span></span><br><span class="line">     user vimrc file: <span class="string">"<span class="variable">$HOME</span>/.vimrc"</span></span><br><span class="line"> 2nd user vimrc file: <span class="string">"~/.vim/vimrc"</span></span><br><span class="line">      user exrc file: <span class="string">"<span class="variable">$HOME</span>/.exrc"</span></span><br><span class="line">       defaults file: <span class="string">"<span class="variable">$VIMRUNTIME</span>/defaults.vim"</span></span><br><span class="line">  fall-back <span class="keyword">for</span> <span class="variable">$VIM</span>: <span class="string">"/usr/share/vim"</span></span><br><span class="line">Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H   -Wdate-time  -g -O2 -fdebug-prefix-map=/build/vim-SsPCMM/vim-8.1.0693=. -fstack-protector-strong -Wformat -Werror=format-security -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1</span><br><span class="line">Linking: gcc   -Wl,-z,relro -Wl,-z,now -Wl,--as-needed -o vim        -lm -ltinfo -lnsl  -lselinux -lacl -lattr -lgpm -ldl</span><br></pre></td></tr></table></figure><p>你会惊奇的发现，-python，-python3，心生疑问，我刚刚不是重新编译了一个支持python的vim了吗，现在怎么还是不支持。其实是我们刚刚指定安装到—prefix指定的路径去了（我是指定了/usr/local/vim），我们去看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">root@cca41a231247 /u/l/vim<span class="comment"># cd /usr/local/vim/bin</span></span><br><span class="line">root@cca41a231247 /u/l/v/bin<span class="comment"># ls</span></span><br><span class="line">ex@  rview@  rvim@  view@  vim*  vimdiff@  vimtutor*  xxd*</span><br><span class="line">root@cca41a231247 /u/l/v/bin<span class="comment"># ./vim --version</span></span><br><span class="line">VIM - Vi IMproved 8.1 (2018 May 18, compiled Jan 22 2019 15:28:12)</span><br><span class="line">Included patches: 1-739</span><br><span class="line">Compiled by root@cca41a231247</span><br><span class="line">Huge version without GUI.  Features included (+) or not (-):</span><br><span class="line">+acl               +extra_search      +mouse_netterm     +tag_old_static</span><br><span class="line">+arabic            +farsi             +mouse_sgr         -tag_any_white</span><br><span class="line">+autocmd           +file_in_path      -mouse_sysmouse    -tcl</span><br><span class="line">+autochdir         +find_in_path      +mouse_urxvt       +termguicolors</span><br><span class="line">-autoservername    +<span class="built_in">float</span>             +mouse_xterm       +terminal</span><br><span class="line">-balloon_eval      +folding           +multi_byte        +terminfo</span><br><span class="line">+balloon_eval_term -footer            +multi_lang        +termresponse</span><br><span class="line">-browse            +fork()            -mzscheme          +textobjects</span><br><span class="line">++builtin_terms    -gettext           +netbeans_intg     +textprop</span><br><span class="line">+byte_offset       -hangul_input      +num64             +timers</span><br><span class="line">+channel           +iconv             +packages          +title</span><br><span class="line">+cindent           +insert_expand     +path_extra        -toolbar</span><br><span class="line">-clientserver      +job               -perl              +user_commands</span><br><span class="line">-clipboard         +jumplist          +persistent_undo   +vartabs</span><br><span class="line">+cmdline_compl     +keymap            +postscript        +vertsplit</span><br><span class="line">+cmdline_hist      +lambda            +printer           +virtualedit</span><br><span class="line">+cmdline_info      +langmap           +profile           +visual</span><br><span class="line">+comments          +libcall           +python/dyn        +visualextra</span><br><span class="line">+conceal           +linebreak         +python3/dyn       +viminfo</span><br><span class="line">+cryptv            +lispindent        +quickfix          +vreplace</span><br><span class="line">+cscope            +listcmds          +reltime           +wildignore</span><br><span class="line">+cursorbind        +localmap          +rightleft         +wildmenu</span><br><span class="line">+cursorshape       -lua               +ruby              +windows</span><br><span class="line">+dialog_con        +menu              +scrollbind        +writebackup</span><br><span class="line">+diff              +mksession         +signs             -X11</span><br><span class="line">+digraphs          +modify_fname      +smartindent       -xfontset</span><br><span class="line">-dnd               +mouse             +startuptime       -xim</span><br><span class="line">-ebcdic            -mouseshape        +statusline        -xpm</span><br><span class="line">+emacs_tags        +mouse_dec         -sun_workshop      -xsmp</span><br><span class="line">+<span class="built_in">eval</span>              -mouse_gpm         +syntax            -xterm_clipboard</span><br><span class="line">+ex_extra          -mouse_jsbterm     +tag_binary        -xterm_save</span><br><span class="line">   system vimrc file: <span class="string">"<span class="variable">$VIM</span>/vimrc"</span></span><br><span class="line">     user vimrc file: <span class="string">"<span class="variable">$HOME</span>/.vimrc"</span></span><br><span class="line"> 2nd user vimrc file: <span class="string">"~/.vim/vimrc"</span></span><br><span class="line">      user exrc file: <span class="string">"<span class="variable">$HOME</span>/.exrc"</span></span><br><span class="line">       defaults file: <span class="string">"<span class="variable">$VIMRUNTIME</span>/defaults.vim"</span></span><br><span class="line">  fall-back <span class="keyword">for</span> <span class="variable">$VIM</span>: <span class="string">"/usr/local/vim/share/vim"</span></span><br><span class="line">Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H     -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1</span><br><span class="line">Linking: gcc   -L. -Wl,-z,relro -Wl,-z,now -fstack-protector -rdynamic -Wl,-<span class="built_in">export</span>-dynamic  -L/usr/<span class="built_in">local</span>/lib -Wl,--as-needed -o vim        -lm -ltinfo -lnsl    -ldl       -lruby-2.5 -lpthread -lgmp -ldl -lcrypt -lm</span><br></pre></td></tr></table></figure><p>这不就是了嘛，每次都用绝对路径打开，不方便，现在有两种方法解决这种尴尬</p><h4 id="1-设置环境变量"><a href="#1-设置环境变量" class="headerlink" title="1.设置环境变量"></a>1.设置环境变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@cca41a231247 /u/l/v/bin<span class="comment"># env |grep PATH #查看PATH变量</span></span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br></pre></td></tr></table></figure><p>现在我们临时修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@cca41a231247:~<span class="comment"># export PATH=/usr/local/vim/bin:$PATH</span></span><br><span class="line">root@cca41a231247:~<span class="comment"># env | grep PATH</span></span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/vim/bin:/usr/<span class="built_in">local</span>/sbin:/usr/<span class="built_in">local</span>/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">_=/usr/bin/env</span><br></pre></td></tr></table></figure><p>可以看到/usr/local/vim/bin已经加到PATH变量中，现在<code>vim --version</code>看看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">root@cca41a231247:~<span class="comment"># vim --version</span></span><br><span class="line">VIM - Vi IMproved 8.1 (2018 May 18, compiled Jan 22 2019 15:28:12)</span><br><span class="line">Included patches: 1-739</span><br><span class="line">Compiled by root@cca41a231247</span><br><span class="line">Huge version without GUI.  Features included (+) or not (-):</span><br><span class="line">+acl               +extra_search      +mouse_netterm     +tag_old_static</span><br><span class="line">+arabic            +farsi             +mouse_sgr         -tag_any_white</span><br><span class="line">+autocmd           +file_in_path      -mouse_sysmouse    -tcl</span><br><span class="line">+autochdir         +find_in_path      +mouse_urxvt       +termguicolors</span><br><span class="line">-autoservername    +<span class="built_in">float</span>             +mouse_xterm       +terminal</span><br><span class="line">-balloon_eval      +folding           +multi_byte        +terminfo</span><br><span class="line">+balloon_eval_term -footer            +multi_lang        +termresponse</span><br><span class="line">-browse            +fork()            -mzscheme          +textobjects</span><br><span class="line">++builtin_terms    -gettext           +netbeans_intg     +textprop</span><br><span class="line">+byte_offset       -hangul_input      +num64             +timers</span><br><span class="line">+channel           +iconv             +packages          +title</span><br><span class="line">+cindent           +insert_expand     +path_extra        -toolbar</span><br><span class="line">-clientserver      +job               -perl              +user_commands</span><br><span class="line">-clipboard         +jumplist          +persistent_undo   +vartabs</span><br><span class="line">+cmdline_compl     +keymap            +postscript        +vertsplit</span><br><span class="line">+cmdline_hist      +lambda            +printer           +virtualedit</span><br><span class="line">+cmdline_info      +langmap           +profile           +visual</span><br><span class="line">+comments          +libcall           +python/dyn        +visualextra</span><br><span class="line">+conceal           +linebreak         +python3/dyn       +viminfo</span><br><span class="line">+cryptv            +lispindent        +quickfix          +vreplace</span><br><span class="line">+cscope            +listcmds          +reltime           +wildignore</span><br><span class="line">+cursorbind        +localmap          +rightleft         +wildmenu</span><br><span class="line">+cursorshape       -lua               +ruby              +windows</span><br><span class="line">+dialog_con        +menu              +scrollbind        +writebackup</span><br><span class="line">+diff              +mksession         +signs             -X11</span><br><span class="line">+digraphs          +modify_fname      +smartindent       -xfontset</span><br><span class="line">-dnd               +mouse             +startuptime       -xim</span><br><span class="line">-ebcdic            -mouseshape        +statusline        -xpm</span><br><span class="line">+emacs_tags        +mouse_dec         -sun_workshop      -xsmp</span><br><span class="line">+<span class="built_in">eval</span>              -mouse_gpm         +syntax            -xterm_clipboard</span><br><span class="line">+ex_extra          -mouse_jsbterm     +tag_binary        -xterm_save</span><br><span class="line">   system vimrc file: <span class="string">"<span class="variable">$VIM</span>/vimrc"</span></span><br><span class="line">     user vimrc file: <span class="string">"<span class="variable">$HOME</span>/.vimrc"</span></span><br><span class="line"> 2nd user vimrc file: <span class="string">"~/.vim/vimrc"</span></span><br><span class="line">      user exrc file: <span class="string">"<span class="variable">$HOME</span>/.exrc"</span></span><br><span class="line">       defaults file: <span class="string">"<span class="variable">$VIMRUNTIME</span>/defaults.vim"</span></span><br><span class="line">  fall-back <span class="keyword">for</span> <span class="variable">$VIM</span>: <span class="string">"/usr/local/vim/share/vim"</span></span><br><span class="line">Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H     -g -O2 -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1</span><br><span class="line">Linking: gcc   -L. -Wl,-z,relro -Wl,-z,now -fstack-protector -rdynamic -Wl,-<span class="built_in">export</span>-dynamic  -L/usr/<span class="built_in">local</span>/lib -Wl,--as-needed -o vim        -lm -ltinfo -lnsl    -ldl       -lruby-2.5 -lpthread -lgmp -ldl -lcrypt -lm</span><br></pre></td></tr></table></figure><p>现在PATH只在当前shell生效，退出再登录就失效。要永久生效，方法有好几种，我列举两种，其他的，自行baidu</p><h5 id="方法一：【对所有用户生效-永久的-】在-etc-profile文件末尾另起一行，添加一句"><a href="#方法一：【对所有用户生效-永久的-】在-etc-profile文件末尾另起一行，添加一句" class="headerlink" title="方法一：【对所有用户生效(永久的)】在/etc/profile文件末尾另起一行，添加一句"></a>方法一：【对所有用户生效(永久的)】在/etc/profile文件末尾另起一行，添加一句</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/usr/local/vim/bin:$PATH</span><br></pre></td></tr></table></figure><h5 id="方法二：【对所有用户生效-永久的-】在用户目录下的-bashrc文件（-bashrc）末尾另起一行，添加一句"><a href="#方法二：【对所有用户生效-永久的-】在用户目录下的-bashrc文件（-bashrc）末尾另起一行，添加一句" class="headerlink" title="方法二：【对所有用户生效(永久的)】在用户目录下的.bashrc文件（~/.bashrc）末尾另起一行，添加一句"></a>方法二：【对所有用户生效(永久的)】在用户目录下的.bashrc文件（~/.bashrc）末尾另起一行，添加一句</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/usr/local/vim/bin:$PATH</span><br></pre></td></tr></table></figure><h4 id="2-ln链接"><a href="#2-ln链接" class="headerlink" title="2.ln链接"></a>2.ln链接</h4><p>这个就很简单了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@cca41a231247:/# ln -s /usr/local/vim/bin/vim /bin/vimn #链接/usr/local/vim/bin/vim到/bin/vimn</span><br></pre></td></tr></table></figure><p>现在执行vimn就是等于在执行/usr/local/vim/bin/vim</p><h3 id="0x5-完工-amp-amp-补充"><a href="#0x5-完工-amp-amp-补充" class="headerlink" title="0x5.完工&amp;&amp;补充"></a>0x5.完工&amp;&amp;补充</h3><p>关于上面./configure那一句的说明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">--with-features=huge  支持最大特性</span><br><span class="line">--enable-rubyinterp  打开对ruby编写的插件的支持</span><br><span class="line">--enable-pythoninterp  打开对python编写的插件的支持</span><br><span class="line">--enable-python3interp  打开对python3编写的插件的支持</span><br><span class="line">--enable-luainterp  打开对lua编写的插件的支持</span><br><span class="line">--enable-perlinterp  打开对perl编写的插件的支持</span><br><span class="line">--enable-multibyte  打开多字节支持，可以在Vim中输入中文</span><br><span class="line">--enable-cscope  打开对cscope的支持</span><br><span class="line">--with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu/ 指定python路径</span><br><span class="line">--with-python-config-dir=/usr/lib/python3.7/config-3.7m-x86_64-linux-gnu/ 指定python3路径</span><br><span class="line">--prefix=/usr/local/vim：指定将要安装到的路径</span><br></pre></td></tr></table></figure><p>上面提到的python的路径的获取方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@cca41a231247 ~<span class="comment"># cd /usr/lib/ &amp;&amp; ls |grep python</span></span><br><span class="line">python2.7</span><br><span class="line">python3</span><br><span class="line">python3.6</span><br><span class="line">python3.7</span><br></pre></td></tr></table></figure><p>看到有python2.7，python3，python3.6，python3.7选一个，python3的路径一般是python3.x，python一样是python2.x，你cd进去找到config-xxxxx-linux-gnu/，cd进去，然后pwd就可以得到路径，看我操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@cca41a231247 ~<span class="comment"># cd /usr/lib/ &amp;&amp; ls |grep python</span></span><br><span class="line">python2.7</span><br><span class="line">python3</span><br><span class="line">python3.6</span><br><span class="line">python3.7</span><br><span class="line">root@cca41a231247 /u/lib<span class="comment"># cd python3.7</span></span><br><span class="line">root@cca41a231247 /u/l/python3.7<span class="comment"># cd config-3.7m-x86_64-linux-gnu/</span></span><br><span class="line">root@cca41a231247 /u/l/p/config-3.7m-x86_64-linux-gnu<span class="comment"># pwd</span></span><br><span class="line">/usr/lib/python3.7/config-3.7m-x86_64-linux-gnu</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每次看到vim不支持Python的时候，心情是崩溃的，要自己compile，Linux下的编译都烦，上次编译edb，emmmm，心理阴影，废话不多说，言归正传&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vim --version&lt;/code&gt;查看vim支持，前面有+的都是支持的，有-的都是
      
    
    </summary>
    
    
      <category term="compile vim" scheme="http://zero-mk.github.io/tags/compile-vim/"/>
    
  </entry>
  
  <entry>
    <title>git</title>
    <link href="http://zero-mk.github.io/2019/01/22/git/"/>
    <id>http://zero-mk.github.io/2019/01/22/git/</id>
    <published>2019-01-22T13:58:13.000Z</published>
    <updated>2019-01-25T08:20:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文：<a href="https://www.cnblogs.com/Small-music/p/9075681.html#git" target="_blank" rel="noopener">https://www.cnblogs.com/Small-music/p/9075681.html#git</a></p><h3 id="git-命令"><a href="#git-命令" class="headerlink" title="git 命令"></a>git 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">　　git [--version] [--help] [-C &lt;path&gt;] [-c &lt;name&gt;=&lt;value&gt;]</span><br><span class="line">    　　[--exec-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class="line">    　　[-p|--paginate|--no-pager] [--no-replace-objects] [--bare]</span><br><span class="line">    　　[--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</span><br><span class="line">    　　[--super-prefix=&lt;path&gt;]</span><br><span class="line">    　　&lt;command&gt; [&lt;args&gt;]</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    --version               # 打印git程序的版本号</span><br><span class="line">    --help                  # 打印概要和最常用命令的列表</span><br><span class="line">    -C &lt;path&gt;               # 在&lt;path&gt;而不是当前的工作目录中运行git</span><br><span class="line">    -c &lt;name&gt;=&lt;value&gt;       # 将配置参数传递给命令, 给定的值将覆盖配置文件中的值</span><br><span class="line">    --exec-path[=&lt;path&gt;]    # 安装核心Git程序的路径, 可以通过设置GIT_EXEC_PATH环境变量来控制, 如无路径, git将打印当前设置并退出</span><br><span class="line">    --html-path             # 打印Git的HTML文档安装并退出的路径, 不带斜杠</span><br><span class="line">    --man-path              # 打印man(1)此版本Git的手册页的manpath, 并退出</span><br><span class="line">    --info-path             # 打印记录此版本Git的Info文件的安装路径并退出</span><br><span class="line">    -p, --paginate          # 如果标准输出是终端, 则将所有输出管道更少（或如果设置为$ PAGER）, 这将覆盖pager.&lt;cmd&gt; 配置选项</span><br><span class="line">    --no-pager              # 不要将Git输出管道传输到寻呼机</span><br><span class="line">    --no-replace-objects    # 不要使用替换参考来替换Git对象</span><br><span class="line">    --bare                  # 将存储库视为裸存储库, 如果未设置GIT_DIR环境, 则将其设置为当前工作目录</span><br><span class="line">    --git-dir=&lt;path&gt;        # 设置存储库的路径, 可以通过设置GIT_DIR环境变量来控制, 可以是当前工作目录的绝对或相对路径</span><br><span class="line">    --work-tree=&lt;path&gt;      # 设置工作树的路径, 可以通过设置GIT_WORK_TREE环境变量和core.worktree配置变量来控制, 相对于当前工作目录的绝对或相对路径</span><br><span class="line">    --namespace=&lt;path&gt;      # 设置Git命名空间, 相当于设置GIT_NAMESPACE环境变量</span><br><span class="line">    --super-prefix=&lt;path&gt;   # 目前仅供内部使用, 设置一个前缀, 该前缀从存储库到根的路径, 一个用途是给调用它的超级项目的子模块上下文</span><br><span class="line">    --literal-pathspecs     # 字面上处理pathspecs, 相当于设置GIT_LITERAL_PATHSPECS为1</span><br><span class="line">    --glob-pathspecs        # 添加&quot;glob&quot;到所有pathspec, 相当于设置GIT_GLOB_PATHSPECS为1</span><br><span class="line">    --noglob-pathspecs      # 添加&quot;文字&quot;到所有pathspec, 相当于设置GIT_NOGLOB_PATHSPECS为1</span><br><span class="line">    --icase-pathspecs       # 添加&quot;icase&quot;到所有pathspec, 相当于设置GIT_ICASE_PATHSPECS为1</span><br><span class="line">    --no-optional-locks     # 不要执行需要锁定的可选操作, 相当于设置GIT_OPTIONAL_LOCKS为0</span><br></pre></td></tr></table></figure><h3 id="config-命令"><a href="#config-命令" class="headerlink" title="config 命令"></a>config 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">　　git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] name [value [value_regex]]</span><br><span class="line">　　git config [&lt;file-option&gt;] [type] --add name value</span><br><span class="line">　　git config [&lt;file-option&gt;] [type] --replace-all name value [value_regex]</span><br><span class="line">　　git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] --get name [value_regex]</span><br><span class="line">　　git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] --get-all name [value_regex]</span><br><span class="line">　　git config [&lt;file-option&gt;] [type] [--show-origin] [-z|--null] [--name-only] --get-regexp name_regex [value_regex]</span><br><span class="line">　　git config [&lt;file-option&gt;] [type] [-z|--null] --get-urlmatch name URL</span><br><span class="line">　　git config [&lt;file-option&gt;] --unset name [value_regex]</span><br><span class="line">　　git config [&lt;file-option&gt;] --unset-all name [value_regex]</span><br><span class="line">　　git config [&lt;file-option&gt;] --rename-section old_name new_name</span><br><span class="line">　　git config [&lt;file-option&gt;] --remove-section name</span><br><span class="line">　　git config [&lt;file-option&gt;] [--show-origin] [-z|--null] [--name-only] -l | --list</span><br><span class="line">　　git config [&lt;file-option&gt;] --get-color name [default]</span><br><span class="line">　　git config [&lt;file-option&gt;] --get-colorbool name [stdout-is-tty]</span><br><span class="line">　　git config [&lt;file-option&gt;] -e | --edit</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    --system                            # 使用系统配置文件</span><br><span class="line">    --global                            # 使用全局配置文件</span><br><span class="line">    --local                             # 使用本地配置文件, 默认</span><br><span class="line">    -f &lt;filename&gt;, --file &lt;filename&gt;    # 使用指定配置文件</span><br><span class="line">    --blob &lt;blob-id&gt;                    # 使用指定blob</span><br><span class="line">    --int                               # 确保输出为简单十进制数</span><br><span class="line">    --bool                              # 确保输出为&quot;true&quot; 或 &quot;false&quot; 的布尔字符串表示</span><br><span class="line">    --bool-or-int                       # 确保输出为--bool或--int的格式</span><br><span class="line">    --path                              # 将扩展~到指定用户的主目录的值 $HOME和~user主目录。</span><br><span class="line">    --replace-all                       # 替换与该键匹配的所有行</span><br><span class="line">    --add                               # 添加配置项</span><br><span class="line">    --get                               # 获取给定键的值（可选用与值匹配的正则表达式进行过滤）</span><br><span class="line">    --get-all                           # 像get一样，但返回多值键的所有值</span><br><span class="line">    --get-regexp                        # 像get-all一样，但将该名称解释为正则表达式并写出键名称</span><br><span class="line">    --get-urlmatch name URL             # 当给定一个由两部分组成的名称section.key时，会返回部分&lt;url&gt;.key的值</span><br><span class="line">    --remove-section                    # 从配置文件中删除给定的部分</span><br><span class="line">    --rename-section                    # 将给定部分重命名为新名称</span><br><span class="line">    --unset                             # 从配置文件中删除与密钥匹配的行</span><br><span class="line">    --unset-all                         # 从配置文件中删除所有与密钥匹配的行</span><br><span class="line">    -l, --list                          # 列出在配置文件中设置的所有变量及其值</span><br><span class="line">    --expiry-date                       # 将确保输出从固定或相对日期字符串转换为时间戳, 设置该值时此选项无效</span><br><span class="line">    -z, --null                          # 对于输出值和/或键的所有选项，始终使用空字符结束值, 使用换行符作为键和值之间的分隔符</span><br><span class="line">    --name-only                         # 输出--listor 的配置变量的名称--get-regexp</span><br><span class="line">    --show-origin                       # 使用原点类型（文件, 标准输入, blob, 命令行）和实际原点（配置文件路径, ref或blob id）扩大所有查询配置选项的输出</span><br><span class="line">    --get-colorbool name [stdout-is-tty]# 找到name（例如color.diff）的颜色设置并输出&quot;true&quot;或&quot;false&quot;</span><br><span class="line">    --get-color name [default]          # 查找name（例如color.diff.new）配置的颜色并将其作为ANSI颜色转义序列输出到标准输出</span><br><span class="line">    -e, --edit                          # 打开一个编辑器来修改指定的配置文件; 或者 --system，--global或者存储库（默认）</span><br><span class="line">    --[no-]includes                     # 查找值, 默认off, on搜索所有配置文件, 当值定文件时（使用：--file，--global等）</span><br></pre></td></tr></table></figure><h3 id="help-命令"><a href="#help-命令" class="headerlink" title="help 命令"></a>help 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">　　git help [-a|--all] [-g|--guide]</span><br><span class="line">       　　[-i|--info|-m|--man|-w|--web] [COMMAND|GUIDE]</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    -a, --all           # 在标准输出上打印所有可用的命令</span><br><span class="line">    -g, --guide         # 在标准输出上打印有用的指南列表</span><br><span class="line">    -i, --info          # 以信息格式显示命令的手册页</span><br><span class="line">    -m, --man           # 以man格式显示命令的手册页</span><br><span class="line">    -w, --web           # 以Web（HTML）格式显示命令的手册页</span><br></pre></td></tr></table></figure><h3 id="init-命令"><a href="#init-命令" class="headerlink" title="init 命令"></a>init 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">语法：    </span><br><span class="line">    git init [-q | --quiet] [--bare] [--template=&lt;template_directory&gt;]</span><br><span class="line">        [--separate-git-dir &lt;git dir&gt;]</span><br><span class="line">        [--shared[=&lt;permissions&gt;]] [directory]</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    -q, --quiet                         　　　　　　# 仅打印错误和警告消息, 所有其他输出将被抑制</span><br><span class="line">    --bare                              　　　　　　# 创建一个裸仓库, 如果GIT_DIR未设置环境, 则将其设置为当前工作目录</span><br><span class="line">    --template=&lt;template_directory&gt;     　　　　　　# 指定将使用模板的目录</span><br><span class="line">    --separate-git-dir=&lt;git dir&gt;        　　　　　　# 相反, 初始化存储库作为目录之一$GIT_DIR或者./.git/, 创建一个包含路径的实际存储库的文本文件存在, 该文件充当文件系统不可知的Git与存储库的符号链接</span><br><span class="line">    --shared[=(false|true|umask|group|all|world|everybody|0xxx)] # 指定Git存储库在多用户间共享, 允许同一组的用户推入该存储库</span><br><span class="line">        umask (or false)                　　　　　　# 使用由umask(2)报告的权限, --shared未指定时的默认值</span><br><span class="line">        group (or true)                　　　　　　 # 使存储库组可写</span><br><span class="line">        all (or world or everybody)     　　　　　　# 与组相同，但使存储库可供所有用户读取</span><br><span class="line">        0xxx                            　　　　　　# 0xxx是八进制数, 每个文件都有模式0xxx。</span><br><span class="line">　　　　　　　　　　　　　　　　　　　　　　　　 　　　　　　 0640将创建一个组可读的存储库, 但不能对其他组进行写入或访问。0660将创建一个对当前用户和组可读可写的回购, 但其他人无法访问。</span><br></pre></td></tr></table></figure><h3 id="clone-命令"><a href="#clone-命令" class="headerlink" title="clone 命令"></a>clone 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git clone [--template=&lt;template_directory&gt;]</span><br><span class="line">        [-l] [-s] [--no-hardlinks] [-q] [-n] [--bare] [--mirror]</span><br><span class="line">        [-o &lt;name&gt;] [-b &lt;name&gt;] [-u &lt;upload-pack&gt;] [--reference &lt;repository&gt;]</span><br><span class="line">        [--dissociate] [--separate-git-dir &lt;git dir&gt;]</span><br><span class="line">        [--depth &lt;depth&gt;] [--[no-]single-branch] [--no-tags]</span><br><span class="line">        [--recurse-submodules[=&lt;pathspec&gt;]] [--[no-]shallow-submodules]</span><br><span class="line">        [--jobs &lt;n&gt;] [--] &lt;repository&gt; [&lt;directory&gt;]</span><br><span class="line"></span><br><span class="line">选项：        </span><br><span class="line">    -l, --local                        # 当克隆的存储库位于本地计算机上时, 此标志绕过正常的“Git aware”传输机制, 并通过复制HEAD以及对象和引用目录下的所有内容来克隆存储库</span><br><span class="line">    --no-hardlinks                     # 强制从本地文件系统的存储库复制进程, 以复制目录下的.git/objects 文件而不是使用硬链接</span><br><span class="line">    -s, --shared                       # 当克隆的存储库位于本地计算机上时, 将自动设置.git/objects/info/alternates为与源存储库共享对象, 而不是使用硬链接, 生成的存储库首先没有任何对象</span><br><span class="line">    --reference[-if-able] &lt;repository&gt; # 如存储库位于本地计算机上, 则自动设置.git/objects/info/alternates为从存储库获取对象将已存在存储库用作备用存储库将需从正在克隆的存储库中复制更少对象, 而降低网络和本地存储成本</span><br><span class="line">    --dissociate                       # 借助--reference仅使用选项指定的引用存储库借用对象, 以减少网络传输, 并通过制作所需的借用对象的本地副本, 在克隆完成后停止借用它们</span><br><span class="line">    -q, --quiet                        # 安静地操作, 进度未报告给标准错误流</span><br><span class="line">    -v, --verbose                      # 运行详细, 不影响向标准错误流报告进度状态</span><br><span class="line">    --progress                         # 当连接到终端时，默认情况下, 标准错误流中会报告进度状态，除非指定-q，即使标准错误流未定向到终端, 此标志也会强制进度状态</span><br><span class="line">    -n, --no-checkout                  # 克隆完成后, 不执行HEAD签出</span><br><span class="line">    --bare                             # 制作一个纯粹的 Git存储库</span><br><span class="line">    --mirror                           # 设置源存储库的镜像</span><br><span class="line">    -o &lt;name&gt;, --origin &lt;name&gt;         # 不要使用远程名称origin来跟踪上游存储库，请使用&lt;name&gt;</span><br><span class="line">    -b &lt;name&gt;, --branch &lt;name&gt;         # 而不是将新创建的HEAD指向克隆存储库HEAD指向的&lt;name&gt;分支，而是指向分支在非裸仓库中, 这是将被检出的分支。 --branch也可以在生成的存储库中提交标签并分离HEAD</span><br><span class="line">    -u &lt;upload-pack&gt;, --upload-pack &lt;upload-pack&gt;  # 当给定时, 通过ssh访问要克隆的存储库, 这将为另一端运行的命令指定非默认路径</span><br><span class="line">    --template=&lt;template_directory&gt;                # 指定将使用模板的目录</span><br><span class="line">    -c &lt;key&gt;=&lt;value&gt;, --config &lt;key&gt;=&lt;value&gt;       # 在新创建的存储库中设置配置变量</span><br><span class="line">    --depth &lt;depth&gt;                                # 创建一个历史截断为指定数目的提交的浅表副本</span><br><span class="line">    --shallow-since=&lt;date&gt;                         # 在指定时间后创建一个具有历史记录的浅表克隆</span><br><span class="line">    --shallow-exclude=&lt;revision&gt;                   # 创建有历史记录的浅层克隆, 但不包括从指定远程分支或标记可访问的提交</span><br><span class="line">    --[no-]single-branch　　　　　　　　　　　　　　　  # 只克隆导致单个分支尖端的历史记录, 无论--branch选项指定还是主分支远程的HEAD指向</span><br><span class="line">    --no-tags 　　　　　　　　　　　　　　　　　　　　　  # 不要克隆任何标签, 并remote.&lt;remote&gt;.tagOpt=--no-tags在配置中设置, 确保将来git pull和git fetch操作不会跟随任何标签</span><br><span class="line">    --recurse-submodules[=&lt;pathspec]               # 创建克隆后, 根据pathspec初始化和克隆子模块。如未提供pathspec, 则初始化并克隆所有子模块</span><br><span class="line">    --[no-]shallow-submodules                      # 所克隆的所有子模块将会变浅, 深度为1</span><br><span class="line">    --separate-git-dir=&lt;git dir&gt;                   # 不要将克隆的存储库放置在它应该存在的位置, 而应将克隆的存储库放置在指定的目录中,然后创建一个与文件系统无关的Git符号链接。结果是Git仓库可以从工作树中分离出来</span><br><span class="line">    -j &lt;n&gt;, --jobs &lt;n&gt;                             # 同时获取的子模块的数量。默认为submodule.fetchJobs选项</span><br><span class="line">    &lt;repository&gt;                                   # 从中克隆的存储库</span><br><span class="line">    &lt;directory&gt;                                    # 要克隆到的新目录的名称</span><br></pre></td></tr></table></figure><h3 id="add-命令"><a href="#add-命令" class="headerlink" title="add 命令"></a>add 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git add [--verbose | -v] [--dry-run | -n] [--force | -f] [--interactive | -i] [--patch | -p]</span><br><span class="line">        [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]</span><br><span class="line">        [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing] [--renormalize]</span><br><span class="line">        [--chmod=(+|-)x] [--] [&lt;pathspec&gt;…]</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    -v, --verbose                   # 详细</span><br><span class="line">    -n, --dry-run                   # 不要实际添加文件, 只显示它们是否存在和/或将被忽略</span><br><span class="line">    -f, --force                     # 允许添加被忽略的文件</span><br><span class="line">    -i, --interactive               # 在工作树中交互添加修改的内容到索引</span><br><span class="line">    -p, --patch                     # 在索引和工作树之间交互地选择补丁块, 并将它们添加到索引中</span><br><span class="line">    -e, --edit                      # 在编辑器中打开差异与索引并让用户编辑它。编辑器关闭后, 调整大块头并将补丁应用到索引</span><br><span class="line">    -u, --update                    # 更新已存在匹配&lt;pathspec&gt;条目的索引。这会删除和修改索引条目以匹配工作树, 但不会添加新文件</span><br><span class="line">    -A, --all, --no-ignore-removal  # 更新索引不仅在工作树具有匹配&lt;pathspec&gt;的文件的位置, 而且索引已经有条目的位置这会添加，修改和删除索引条目以匹配工作树</span><br><span class="line">    --no-all, --ignore-removal      # 通过添加索引未知的新文件和工作树中修改的文件来更新索引, 但忽略已从工作树中删除的文件当没有使用&lt;pathspec&gt;时，该选项是无操作的</span><br><span class="line">    -N, --intent-to-add             # 只记录路径将在稍后添加的事实。路径条目放置在没有内容的索引中</span><br><span class="line">    --refresh                       # 不要添加文件，而只需刷新索引中的stat()信息</span><br><span class="line">    --ignore-errors                 # 如果某些文件因索引错误而无法添加, 请不要中止操作，而是继续添加其他文件</span><br><span class="line">    --ignore-missing                # 该选项只能与--dry-run一起使用。用户可检查是否有给定的文件被忽略, 不管是否已存在于工作树中</span><br><span class="line">    --no-warn-embedded-repo         # 默认情况下, git add向嵌入式存储库添加索引时会发出警告, 而不用git submodule add其中创建条目.gitmodules。该选项将会禁止警告</span><br><span class="line">    --renormalize                   # 将新鲜的&quot;干净&quot;过程应用于所有跟踪的文件, 以强制将其再次添加到索引</span><br><span class="line">    --chmod=(+|-)x                  # 覆盖添加文件的可执行位。可执行位仅在索引中更改, 磁盘上的文件保持不变。</span><br><span class="line">    --                              # 此选项可用于将命令行选项与文件列表分开</span><br><span class="line">    &lt;pathspec&gt;…                     # 要从中添加内容的文件。*.c可以给Fileglobs（例如）添加所有匹配的文件</span><br></pre></td></tr></table></figure><h3 id="status-命令"><a href="#status-命令" class="headerlink" title="status 命令"></a>status 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git status [&lt;options&gt;…] [--] [&lt;pathspec&gt;…]</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    -s, --short                               # 以短格式输出输出</span><br><span class="line">    -b, --branch                              # 甚至以短格式显示分支和跟踪信息</span><br><span class="line">    --show-stash                              # 显示当前隐藏的条目数量</span><br><span class="line">    --porcelain[=&lt;version&gt;]                   # 为脚本提供易于解析的格式输出</span><br><span class="line">    --long                                    # 以长格式输出输出, 默认</span><br><span class="line">    -v, --verbose                             # 除了已更改的文件名称之外, 还会显示正在执行的文本更改</span><br><span class="line">    -u[&lt;mode&gt;], --untracked-files[=&lt;mode&gt;]    # 显示未跟踪的文件</span><br><span class="line">    --ignore-submodules[=&lt;when&gt;]              # 查找更改时忽略对子模块的更改。&lt;when&gt;可以是&quot;none&quot;, &quot;untracked&quot;, &quot;dirty&quot;或&quot;all&quot;, 这是默认设置</span><br><span class="line">    --ignored[=&lt;mode&gt;]                        # 也显示忽略的文件。mode参数用于指定忽略文件的处理, 可选的, 默认为传统</span><br><span class="line">        traditional                           # 传统, 显示被忽略的文件和目录, 除非指定--untracked-files = all，这种情况下将显示忽略目录中的单个文件</span><br><span class="line">        no                                    # 否, 不显示任何被忽略的文件</span><br><span class="line">        matching                              # 匹配, 显示与忽略模式匹配的忽略文件和目录</span><br><span class="line">    -z                                        # 用NUL而不是LF终止输入</span><br><span class="line">    --no-column, --column[=&lt;options&gt;]         # 在列中显示未跟踪的文件</span><br><span class="line">    --ahead-behind, --no-ahead-behind         # 显示或不显示分支相对于其上游分支的详细前/后计数。默认为true</span><br><span class="line">    &lt;pathspec&gt;…                               #</span><br></pre></td></tr></table></figure><h3 id="diff-命令"><a href="#diff-命令" class="headerlink" title="diff 命令"></a>diff 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git diff [options] [&lt;commit&gt;] [--] [&lt;path&gt;…]</span><br><span class="line">    git diff [options] --cached [&lt;commit&gt;] [--] [&lt;path&gt;…]</span><br><span class="line">    git diff [options] &lt;commit&gt; &lt;commit&gt; [--] [&lt;path&gt;…]</span><br><span class="line">    git diff [options] &lt;blob&gt; &lt;blob&gt;</span><br><span class="line">    git diff [options] [--no-index] [--] &lt;path&gt; &lt;path&gt;</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    -p, -u, --patch                                     # 生成补丁, 这是默认设置</span><br><span class="line">    -s, --no-patch                                      # 抑制差异输出。对于像git show这样的命令很有用，默认显示补丁，或取消效果--patch</span><br><span class="line">    -U&lt;n&gt;, --unified=&lt;n&gt;                                # 使用&lt;n&gt;行上下文生成差异，而不是通常的三行。意味着-p</span><br><span class="line">    --raw                                               # 以原始格式生成差异</span><br><span class="line">    --patch-with-raw                                    # 原始的同义词-p --raw</span><br><span class="line">    --indent-heuristic, --no-indent-heuristic           # 为了帮助调试和调整实验启发式, 改变差异边界以使修补程序更易于阅读, 默认关闭</span><br><span class="line">    --minimal                                           # 花费额外的时间来确保生成最小可能的差异</span><br><span class="line">    --patience                                          # 使用&quot;耐心差异&quot;算法生成差异</span><br><span class="line">    --histogram                                         # 使用&quot;直方图差异&quot;算法生成差异</span><br><span class="line">    --diff-algorithm=&#123;patience|minimal|histogram|myers&#125; # 选择一种差异算法</span><br><span class="line">        default, myers                                  # 基本的贪婪diff算法, 默认设置</span><br><span class="line">        minimal                                         # 花费额外的时间来确保生成最小可能的差异</span><br><span class="line">        patience                                        # 生成补丁时使用&quot;耐心差异&quot;算法</span><br><span class="line">        histogram                                       # 该算法将耐心算法扩展为&quot;支持低出现率的通用元素&quot;</span><br><span class="line">    --stat[=&lt;width&gt;[,&lt;name-width&gt;[,&lt;count&gt;]]]           # 生成一个diffstat</span><br><span class="line">    --numstat                                           # 类似--stat，但显示十进制表示法中添加和删除的行数以及不带缩写的路径名。 对于二进制文件，输出两个-而不是说 0 0</span><br><span class="line">    --shortstat                                         # 只输出--stat包含修改文件总数的格式的最后一行, 以及添加和删除行的数量</span><br><span class="line">    --dirstat[=&lt;param1,param2,…&gt;]                       # 输出每个子目录的相对变化量分布。--dirstat可以通过传递逗号分隔的参数列表来定制行为</span><br><span class="line">        changes                                         # 通过计算已从源中删除或添加到目标的行来计算dirstat数字</span><br><span class="line">        lines                                           # 通过执行常规基于行的差异分析来计算dirstat数字，并将删除/添加的行数相加</span><br><span class="line">        files                                           # 通过计算更改的文件数量来计算dirstat数字</span><br><span class="line">        cumulative                                      # 计数父目录的子目录中的更改</span><br><span class="line">        &lt;limit&gt;                                         # 整数参数指定截断百分比（默认为3％）。输出中不显示贡献小于此百分比的目录</span><br><span class="line">    --summary                                           # 输出扩展头信息的精简摘要，如创建，重命名和模式更改</span><br><span class="line">    --patch-with-stat                                   # 同义词- p - stat</span><br><span class="line">    -z                                                  # 当--raw，--numstat，--name-only或--name-status已给出，不Munge时间路径名，并使用完全无效的输出字段终止符</span><br><span class="line">    --name-only                                         # 仅显示已更改文件的名称</span><br><span class="line">    --name-status                                       # 仅显示已更改文件的名称和状态</span><br><span class="line">    --submodule[=&lt;format&gt;]                              # 指定如何显示子模块中的差异</span><br><span class="line">    --color[=&lt;when&gt;]                                    # 显示有色差异</span><br><span class="line">    --no-color                                          # 关闭有色差异</span><br><span class="line">    --word-diff[=&lt;mode&gt;]                                # 显示一个单词diff，使用&lt;mode&gt;分隔已更改的单词。默认: 空格分隔</span><br><span class="line">    color                                               # 仅使用颜色突出显示更改的词</span><br><span class="line">    plain                                               # 将单词显示为[-removed-]和&#123;+added+&#125;。如果输入中出现分隔符，则不会尝试跳过分隔符，因此输出可能不明确</span><br><span class="line">    porcelain                                           # 使用专门用于脚本消费的基于行的格式</span><br><span class="line">    none                                                # 再次禁用字差异</span><br><span class="line">    --word-diff-regex=&lt;regex&gt;                           # 使用&lt;regex&gt;来决定一个单词是什么，而不是将非空白的运行视为一个单词</span><br><span class="line">    --color-words[=&lt;regex&gt;]                             # 相当于--word-diff=color加号</span><br><span class="line">    --no-renames                                        # 关闭重命名检测，即使配置文件提供了默认设置</span><br><span class="line">    --check                                             # 警告如果更改引入冲突标记或空白错误。认为空白错误由core.whitespace 配置控制。</span><br><span class="line">    --ws-error-highlight=&lt;kind&gt;                         # 按&lt;颜色&gt;指定的颜色突出显示由&lt;颜色&gt;指定的行上的空白错误color.diff.whitespace</span><br><span class="line">    --full-index                                        # 在生成补丁格式输出时，在“索引”行上显示完整的映像前和映像后blob对象名称，而不是第一批字符</span><br><span class="line">    --binary                                            # 除了--full-index输出可以应用的二进制差异git-apply</span><br><span class="line">    --abbrev[=&lt;n&gt;]                                      # 不是在diff-raw格式输出和diff-tree标题行中显示完整的40字节十六进制对象名称，只显示部分前缀</span><br><span class="line">    -B[&lt;n&gt;][/&lt;m&gt;], --break-rewrites[=[&lt;n&gt;][/&lt;m&gt;]]       # 将完全重写更改分解为删除和创建对</span><br><span class="line">    -M[&lt;n&gt;], --find-renames[=&lt;n&gt;]                       # 检测重命名</span><br><span class="line">    -C[&lt;n&gt;], --find-copies[=&lt;n&gt;]                        # 检测副本以及重命名</span><br><span class="line">    --find-copies-harder                                # 出于性能原因，默认情况下，-C只有当副本的原始文件在相同的变更集中被修改时，选项才会查找副本</span><br><span class="line">    -D, --irreversible-delete                           # 省略原图像进行删除，即仅打印标题，但不打印原像和之间的差异/dev/null</span><br><span class="line">    -l&lt;num&gt;                                             # 在-M和-C选项需要为O（n ^ 2）的处理时间，其中n是/复制目标潜在的重命名的数目如果重命名/复制目标的数量超过指定的数量，则此选项可防止重命名/复制检测运行</span><br><span class="line">    --diff-filter=[(A|C|D|M|R|T|U|X|B)…[*]]             # 选择仅添加(A), 复制(C), 删除(D), 修改(M), 重命名(R), 其类型(即常规文件, 符号链接, 子模块, ...)更改(T), Unmerged(U), 未知(X)或已配对Broken(B)</span><br><span class="line">                                                          可以使用任何过滤字符的组合(包括无)当*（全部或无）添加到组合中时，如果有任何文件与比较中的其他条件匹配，则选择所有路径; 如果没有与其他标准匹配的文件，则不会选择任何内容</span><br><span class="line">    -S&lt;string&gt;                                          # 查找改变文件中指定字符串出现次数（即添加/删除）的差异</span><br><span class="line">    -G&lt;regex&gt;                                           # 寻找补丁文本包含与&lt;regex&gt;匹配的添加/删除行的差异</span><br><span class="line">    --pickaxe-all                                       # 当-S或-G发现更改时，显示该更改集中的所有更改，而不仅仅是包含&lt;string&gt;中的更改的文件</span><br><span class="line">    --pickaxe-regex                                     # 将给定的&lt;string&gt; -S视为扩展的POSIX正则表达式进行匹配</span><br><span class="line">    -O&lt;orderfile&gt;                                       # 控制文件在输出中出现的顺序</span><br><span class="line">    -R                                                  # 交换两个输入; 即显示索引或磁盘文件与树内容的差异</span><br><span class="line">    --relative[=&lt;path&gt;]                                 # 从项目的子目录运行时，可以通过此选项告知排除目录外的更改并显示与其相关的路径名</span><br><span class="line">    -a, --text                                          # 将所有文件视为文本</span><br><span class="line">    --ignore-space-at-eol                               # 忽略EOL中的空白变化</span><br><span class="line">    -b, --ignore-space-change                           # 忽略空白量的变化。这会忽略行结束处的空白，并认为一个或多个空白字符的所有其他序列是等价的</span><br><span class="line">    -w, --ignore-all-space                              # 比较行时忽略空格。即使一行有空白，而另一行没有空白，这也会忽略差异</span><br><span class="line">    --ignore-blank-lines                                # 忽略其行全部空白的更改</span><br><span class="line">    --inter-hunk-context=&lt;lines&gt;                        # 显示差异hunk之间的上下文，直到指定的行数，从而融合彼此接近的hunk</span><br><span class="line">    -W, --function-context                              # 显示整个周围的变化功能</span><br><span class="line">    --exit-code                                         # 用类似于diff（1）的代码退出程序。也就是说，如果存在差异，则1退出，0表示没有差异</span><br><span class="line">    --quiet                                             # 禁用程序的所有输出。意味着--exit-code</span><br><span class="line">    --ext-diff                                          # 允许执行一个外部比较助手</span><br><span class="line">    --no-ext-diff                                       # 禁止外部差异驱动程序</span><br><span class="line">    --textconv, --no-textconv                           # 在比较二进制文件时，允许（或不允许）运行外部文本转换过滤器</span><br><span class="line">    --ignore-submodules[=&lt;when&gt;]                        # 忽略差异代中子模块的更改。&lt;when&gt;可以是“none”，“untracked”，“dirty”或“all”，这是默认设置</span><br><span class="line">    --src-prefix=&lt;prefix&gt;                               # 显示给定的源前缀而不是“a /”</span><br><span class="line">    --dst-prefix=&lt;prefix&gt;                               # 显示给定的目的地前缀而不是“b /”</span><br><span class="line">    --no-prefix                                         # 不要显示任何来源或目的地前缀</span><br><span class="line">    --line-prefix=&lt;prefix&gt;                              # 为每行输出预留一个额外的前缀</span><br><span class="line">    --ita-invisible-in-index                            # 默认情况下，由“git add -N”添加的条目显示为“git diff”中的现有空文件和“git diff --cached”中的新文件</span><br><span class="line">    -1 --base, -2 --ours, -3 --theirs                   # 比较工作树与“基本”版本（阶段＃1），“我们的分支”（阶段＃2）或“他们的分支”（阶段＃3）</span><br><span class="line">    -0                                                  # 忽略差异输出未合并的条目并只显示“未合并”。仅在将工作树与索引进行比较时才能使用</span><br><span class="line">    &lt;path&gt;…                                             # 给出的&lt;paths&gt;参数用于将diff限制为指定的路径</span><br></pre></td></tr></table></figure><h3 id="commit-命令"><a href="#commit-命令" class="headerlink" title="commit 命令"></a>commit 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git commit [-a | --interactive | --patch] [-s] [-v] [-u&lt;mode&gt;] [--amend]</span><br><span class="line">       [--dry-run] [(-c | -C | --fixup | --squash) &lt;commit&gt;]</span><br><span class="line">       [-F &lt;file&gt; | -m &lt;msg&gt;] [--reset-author] [--allow-empty]</span><br><span class="line">       [--allow-empty-message] [--no-verify] [-e] [--author=&lt;author&gt;]</span><br><span class="line">       [--date=&lt;date&gt;] [--cleanup=&lt;mode&gt;] [--[no-]status]</span><br><span class="line">       [-i | -o] [-S[&lt;keyid&gt;]] [--] [&lt;file&gt;…]</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    -a, --all                               # 告诉命令自动对已被修改和删除的文件进行分段处理，但没有告知Git的新文件不受影响</span><br><span class="line">    -p, --patch                             # 使用交互式补丁选择界面来选择要提交的更改</span><br><span class="line">    -C &lt;commit&gt;, --reuse-message=&lt;commit&gt;   # 取一个现有的提交对象，并在创建提交时重用日志消息和作者信息（包括时间戳）</span><br><span class="line">    -c &lt;commit&gt;, --reedit-message=&lt;commit&gt;  # 像-C一样，但-c调用了编辑器，以便用户可以进一步编辑提交消息</span><br><span class="line">    --fixup=&lt;commit&gt;                        # 构建一个提交消息以供使用rebase --autosquash。提交消息将成为指定提交的主题行，其前缀为“fixup！”</span><br><span class="line">    --squash=&lt;commit&gt;                       # 构建一个提交消息以供使用rebase --autosquash。提交消息主题行取自指定的提交，前缀为“squash！”</span><br><span class="line">    --reset-author                          # 当与-C / -c / - 修改选项一起使用时，或者在冲突樱桃挑选后提交时，声明结果提交的作者现在属于提交者</span><br><span class="line">    --short                                 # 进行干运行时，请以短格式输出</span><br><span class="line">    --branch                                # 甚至以短格式显示分支和跟踪信息</span><br><span class="line">    --porcelain                             # 进行干式运行时，请将输出信号以瓷器准备好的格式输出</span><br><span class="line">    --long                                  # 进行干式运行时，请以长格式输出</span><br><span class="line">    -z, --null                              # 显示short或porcelain状态输出时，逐字打印文件名并用NUL而不是LF结束输入。如果没有给出格式，则表示--porcelain输出格式</span><br><span class="line">    -F &lt;file&gt;, --file=&lt;file&gt;                # 从给定的文件中获取提交消息。使用-从标准输入中读取消息</span><br><span class="line">    --author=&lt;author&gt;                       # 覆盖提交作者。使用标准A U Thor &lt;author@example.com&gt;格式指定明确的作者</span><br><span class="line">    --date=&lt;date&gt;                           # 覆盖提交中使用的作者日期</span><br><span class="line">    -m &lt;msg&gt;, --message=&lt;msg&gt;               # 使用给定的&lt;msg&gt;作为提交消息</span><br><span class="line">    -t &lt;file&gt;, --template=&lt;file&gt;            # 编辑提交消息时，使用给定文件中的内容启动编辑器</span><br><span class="line">    -s, --signoff                           # 提交日志消息结尾处的提交者添加Signed-off-by行</span><br><span class="line">    -n, --no-verify                         # 该选项绕过预先提交和提交msg钩子</span><br><span class="line">    --allow-empty                           # 通常记录具有与其唯一父提交完全相同的树的提交是个错误，并且该命令阻止您提交此类提交</span><br><span class="line">    --allow-empty-message                   # 像--allow-empty这个命令主要供外国SCM接口脚本使用。它允许你使用空的提交消息创建一个提交，而不使用像git-commit-tree [1]命令 </span><br><span class="line">    --cleanup=&lt;mode&gt;                        # 这个选项决定了在提交之前应该如何清理提供的提交消息。所述&lt;模式&gt;可以是strip， whitespace，verbatim，scissors或default</span><br><span class="line">    strip                                   # 删除前导和尾随空行，尾随空白，评论和折叠连续的空行</span><br><span class="line">    whitespace                              # 同strip除#commentary不会被删除</span><br><span class="line">    verbatim                                # 根本不要改变信息</span><br><span class="line">    scissors                                # 相同whitespace，除了一切从（并包括）下面找到的行被截短，如果消息是要被编辑</span><br><span class="line">    default                                 # 就strip好像要编辑的消息一样。否则whitespace</span><br><span class="line">    -e, --edit                              # 从文件提取的消息-F，命令行 -m和从提交对象中取出的消息-C通常用作未修改的提交日志消息</span><br><span class="line">    --no-edit                               # 使用选定的提交消息而不启动编辑器。例如，git commit --amend --no-edit修改提交而不更改其提交消息</span><br><span class="line">    --amend                                 # 通过创建一个新的提交来替换当前分支的提示</span><br><span class="line">    --no-post-rewrite                       # 绕过重写挂钩</span><br><span class="line">    -i, --include                           # 在到目前为止的阶段性内容提交之前，请在命令行上指定路径的内容。这通常不是你想要的，除非你正在完成一个冲突的合并。</span><br><span class="line">    -o, --only                              # 通过获取命令行中指定路径的更新工作树内容来进行提交，而忽略已为其他路径执行的任何内容</span><br><span class="line">    -u[&lt;mode&gt;], --untracked-files[=&lt;mode&gt;]  # 显示未跟踪的文件。模式可选的(默认为全部), 并用于指定未跟踪文件的处理; </span><br><span class="line">　　　　　　　　　　　　　　　　　　　　　　　　　　　 当-u未被使用时，默认是正常的，即显示未跟踪的文件和目录。所述&lt;模式&gt;可以是no， normal，all</span><br><span class="line">    -v, --verbose                           # 显示HEAD提交与提交消息模板底部提交的内容之间的统一差异，以帮助用户通过提醒提交具有哪些更改来描述提交</span><br><span class="line">    -q, --quiet                             # 禁止提交摘要消息</span><br><span class="line">    --dry-run                               # 不要创建提交,而是显示要提交的路径列表,包含将保留未提交的本地更改的路径以及未跟踪的路径</span><br><span class="line">    --status                                # 使用编辑器准备提交消息时，在提交消息模板中包含git-status [1]的输出。默认为打开，但可用于覆盖配置变量commit.status。</span><br><span class="line">    --no-status                             # 使用编辑器准备默认提交消息时，不要在提交消息模板中包含git-status [1]的输出。</span><br><span class="line">    -S[&lt;keyid&gt;], --gpg-sign[=&lt;keyid&gt;]       # GPG标志提交。该keyid参数是可选的，并且默认为提交者身份</span><br><span class="line">    --no-gpg-sign                           # commit.gpgSign设置为强制每个提交进行签名的计数器配置变量</span><br><span class="line">    --                                      # 不要将更多的参数解释为选项</span><br><span class="line">    &lt;file&gt;…                                 # 当在命令行上给出文件时，该命令将提交指定文件的内容，而不记录已经执行的更改</span><br></pre></td></tr></table></figure><h3 id="reset-命令"><a href="#reset-命令" class="headerlink" title="reset 命令"></a>reset 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git reset [-q] [&lt;tree-ish&gt;] [--] &lt;paths&gt;…</span><br><span class="line">    git reset (--patch | -p) [&lt;tree-ish&gt;] [--] [&lt;paths&gt;…]</span><br><span class="line">    git reset [--soft | --mixed [-N] | --hard | --merge | --keep] [-q] [&lt;commit&gt;]</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    -q, --quiet      # 保持安静，只报告错误</span><br><span class="line">    --soft           # 根本不触摸索引文件或工作树（但将头重置为&lt;commit&gt;，就像所有模式一样）</span><br><span class="line">    --mixed          # 重置索引而不是工作树（即，保存更改的文件但未标记为提交）并报告尚未更新的内容。这是默认操作</span><br><span class="line">    --hard           # 重置索引和工作树。放弃自&lt;commit&gt;以来对工作树中跟踪文件所做的任何更改</span><br><span class="line">    --merge          # 重置索引并更新工作树中&lt;commit&gt;和HEAD之间不同的文件，但保留索引和工作树之间不同的文件（即没有添加更改的文件）如果&lt;commit&gt;和索引之间的文件有不同的变化，则重置会中止</span><br><span class="line">    --keep           # 重置索引条目并更新工作树中&lt;commit&gt;和HEAD之间不同的文件。如果&lt;commit&gt;和HEAD之间的文件有本地更改，则重置会中止</span><br></pre></td></tr></table></figure><h3 id="rm-命令"><a href="#rm-命令" class="headerlink" title="rm 命令"></a>rm 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git rm [-f | --force] [-n] [-r] [--cached] [--ignore-unmatch] [--quiet] [--] &lt;file&gt;…</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    &lt;file&gt;…                 # 要删除的文件</span><br><span class="line">    -f, --force             # 覆盖最新的检查</span><br><span class="line">    -n, --dry-run           # 切勿删除任何文件。相反，只需显示它们是否存在于索引中，否则将被命令删除</span><br><span class="line">    -r                      # 当给出主目录名时允许递归删除</span><br><span class="line">    --                      # 此选项可用于将命令行选项与文件列表分开，（当文件名可能被误认为是命令行选项时很有用）</span><br><span class="line">    --cached                # 使用此选项可以取消仅从索引中删除路径的情况。工作树文件，无论是否修改，都将被单独保留</span><br><span class="line">    --ignore-unmatch        # 即使没有匹配的文件，也可以用零状态退出</span><br><span class="line">    -q, --quiet             # 该选项禁止输出</span><br></pre></td></tr></table></figure><h3 id="mv-命令"><a href="#mv-命令" class="headerlink" title="mv 命令"></a>mv 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git mv &lt;options&gt;… &lt;args&gt;…</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    -f, --force             # 即使目标存在，也要强制重命名或移动文件</span><br><span class="line">    -k                      # 跳过移动或重命名会导致错误情况的操作</span><br><span class="line">    -n, --dry-run           # 没做什么; 只显示会发生什么</span><br><span class="line">    -v, --verbose           # 报告移动文件的名称</span><br></pre></td></tr></table></figure><h3 id="branch-命令"><a href="#branch-命令" class="headerlink" title="branch 命令"></a>branch 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git branch [--color[=&lt;when&gt;] | --no-color] [-r | -a]</span><br><span class="line">        [--list] [-v [--abbrev=&lt;length&gt; | --no-abbrev]]</span><br><span class="line">        [--column[=&lt;options&gt;] | --no-column] [--sort=&lt;key&gt;]</span><br><span class="line">        [(--merged | --no-merged) [&lt;commit&gt;]]</span><br><span class="line">        [--contains [&lt;commit]] [--no-contains [&lt;commit&gt;]]</span><br><span class="line">        [--points-at &lt;object&gt;] [--format=&lt;format&gt;] [&lt;pattern&gt;…]</span><br><span class="line">    git branch [--track | --no-track] [-l] [-f] &lt;branchname&gt; [&lt;start-point&gt;]</span><br><span class="line">    git branch (--set-upstream-to=&lt;upstream&gt; | -u &lt;upstream&gt;) [&lt;branchname&gt;]</span><br><span class="line">    git branch --unset-upstream [&lt;branchname&gt;]</span><br><span class="line">    git branch (-m | -M) [&lt;oldbranch&gt;] &lt;newbranch&gt;</span><br><span class="line">    git branch (-c | -C) [&lt;oldbranch&gt;] &lt;newbranch&gt;</span><br><span class="line">    git branch (-d | -D) [-r] &lt;branchname&gt;…</span><br><span class="line">    git branch --edit-description [&lt;branchname&gt;]</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    -d, --delete                                 # 删除分支</span><br><span class="line">    -D                                           # 快捷键--delete --force</span><br><span class="line">    -l, --create-reflog                          # 创建分支的reflog</span><br><span class="line">    -f, --force                                  # 将&lt;branchname&gt;重置为&lt;startpoint&gt;，即使&lt;branchname&gt;已存在</span><br><span class="line">    -m, --move                                   # 移动/重命名分支和相应的reflog</span><br><span class="line">    -M                                           # 快捷键--move --force</span><br><span class="line">    -c, --copy                                   # 复制分支和相应的reflog</span><br><span class="line">    -C                                           # 快捷键--copy --force</span><br><span class="line">    --color[=&lt;when&gt;]                             # 颜色分支突出显示当前，本地和远程跟踪分支。该值必须始终（默认），永不，或自动</span><br><span class="line">    --no-color                                   # 关闭分支颜色，即使配置文件将默认设置为颜色输出。和...一样--color=never</span><br><span class="line">    -i, --ignore-case                            # 排序和过滤分支不区分大小写</span><br><span class="line">    --column[=&lt;options&gt;], --no-column            # 在列中显示分支列表</span><br><span class="line">    -r, --remotes                                # 列出或删除（如果与-d一起使用）远程跟踪分支</span><br><span class="line">    -a, --all                                    # 列出远程追踪分行和当地分行</span><br><span class="line">    --list                                       # 列出分支</span><br><span class="line">    -v, -vv, --verbose                           # 在列表模式下，显示sha1并为每个头提交主题行，以及与上游分支（如果有）的关系</span><br><span class="line">    -q, --quiet                                  # 创建或删除分支时更安静，抑制非错误消息</span><br><span class="line">    --abbrev=&lt;length&gt;                            # 改变输出列表中sha1的最小显示长度。默认值是7</span><br><span class="line">    --no-abbrev                                  # 在输出列表中显示完整的sha1，而不是缩写它们</span><br><span class="line">    -t, --track                                  # 创建新分支时，设置branch.&lt;name&gt;.remote和 branch.&lt;name&gt;.merge配置条目以将起点分支标记为新分支的“上游”</span><br><span class="line">    --no-track                                   # 即使branch.autoSetupMerge配置变量为true，也不要设置“上游”配置</span><br><span class="line">    --set-upstream                               # 由于此选项具有混淆语法，因此不再支持。请使用--track或--set-upstream-to替代</span><br><span class="line">    -u &lt;upstream&gt;, --set-upstream-to=&lt;upstream&gt;  # 设置&lt;branchname&gt;的跟踪信息，以便&lt;upstream&gt;被视为&lt;branchname&gt;的上游分支。如果未指定&lt;branchname&gt;，则默认为当前分支。</span><br><span class="line">    --unset-upstream                             # 删除&lt;branchname&gt;的上游信息。如果未指定分支，则默认为当前分支</span><br><span class="line">    --edit-description                           # 打开一个编辑器，编辑文本解释分支是干什么用的，通过其他各种命令使用（例如format-patch， request-pull和merge（如果启用））</span><br><span class="line">    --contains [&lt;commit&gt;]                        # 只列出包含指定提交的分支（如果未指定，则为HEAD）。意味着--list</span><br><span class="line">    --no-contains [&lt;commit&gt;]                     # 只列出不包含指定提交的分支（如果未指定，则为HEAD）。意味着--list</span><br><span class="line">    --merged [&lt;commit&gt;]                          # 仅列出可从指定提交中获得提示的分支（如果未指定，则为HEAD）。暗示--list，不符合--no-merged</span><br><span class="line">    --no-merged [&lt;commit&gt;]                       # 只列出提示无法从指定提交中获得的分支（如果未指定，则为HEAD）。暗示--list，不符合--merged</span><br><span class="line">    &lt;branchname&gt;                                 # 要创建或删除的分支的名称</span><br><span class="line">    &lt;start-point&gt;                                # 新的分支头将指向这个提交</span><br><span class="line">    &lt;oldbranch&gt;                                  # 要重命名的现有分支的名称    </span><br><span class="line">    &lt;newbranch&gt;                                  # 现有分支的新名称</span><br><span class="line">    --sort=&lt;key&gt;                                 # 根据给定的关键字进行排序</span><br><span class="line">    --points-at &lt;object&gt;                         # 只列出给定对象的分支</span><br><span class="line">    --format &lt;format&gt;                            # 从显示的分支ref 中插入的字符串以及它指向的对象。格式与git-for-each-ref [1]的格式相同</span><br></pre></td></tr></table></figure><h3 id="checkout-命令"><a href="#checkout-命令" class="headerlink" title="checkout 命令"></a>checkout 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git checkout [-q] [-f] [-m] [&lt;branch&gt;]</span><br><span class="line">    git checkout [-q] [-f] [-m] --detach [&lt;branch&gt;]</span><br><span class="line">    git checkout [-q] [-f] [-m] [--detach] &lt;commit&gt;</span><br><span class="line">    git checkout [-q] [-f] [-m] [[-b|-B|--orphan] &lt;new_branch&gt;] [&lt;start_point&gt;]</span><br><span class="line">    git checkout [-f|--ours|--theirs|-m|--conflict=&lt;style&gt;] [&lt;tree-ish&gt;] [--] &lt;paths&gt;…</span><br><span class="line">    git checkout [&lt;tree-ish&gt;] [--] &lt;pathspec&gt;…</span><br><span class="line">    git checkout (-p|--patch) [&lt;tree-ish&gt;] [--] [&lt;paths&gt;…]</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    -q, --quiet                     # 抑制反馈信息</span><br><span class="line">    --[no-]progress                 # 除非--quiet 已指定，否则标准错误流默认情况下会将其连接到终端时报告进度状态</span><br><span class="line">    -f, --force                     # 切换分支时，即使索引或工作树与HEAD不同，也要继续。这用于丢弃本地更改</span><br><span class="line">    --ours, --theirs                # 当从索引中检出路径时，请检查第2阶段(ours)或第3阶段(theirs)是否有未合并的路径</span><br><span class="line">    -b &lt;new_branch&gt;                 # 创建一个名为&lt;new_branch&gt;的新分支并在&lt;start_point&gt;处启动它</span><br><span class="line">    -B &lt;new_branch&gt;                 # 创建分支&lt;new_branch&gt;并在&lt;start_point&gt;处启动它</span><br><span class="line">    -t, --track                     # 创建新分支时，设置“上游”配置</span><br><span class="line">    --no-track                      # 即使branch.autoSetupMerge配置变量为true，也不要设置“上游”配置</span><br><span class="line">    -l                              # 创建新分支的reflog</span><br><span class="line">    --detach                        # 而不是检查一个分支来处理它，检查提交检查和可废弃的实验</span><br><span class="line">    --orphan &lt;new_branch&gt;           # 创建一个名为&lt;new_branch&gt; 的新孤立分支，从&lt;start_point&gt;开始并切换到该分支</span><br><span class="line">    --ignore-skip-worktree-bits     # 在稀疏结帐模式下，git checkout -- &lt;paths&gt;只会更新$GIT_DIR/info/sparse-checkout中由&lt;路径&gt;和稀疏模式匹配的条目</span><br><span class="line">    -m, --merge                     # 在切换分支时，如果对当前分支与切换到的分支之间的一个或多个文件进行本地修改，则该命令将拒绝切换分支以便在上下文中保留修改</span><br><span class="line">    --conflict=&lt;style&gt;              # 与上面的--merge选项相同，但改变了冲突的区块显示方式，覆盖merge.conflictStyle配置变量</span><br><span class="line">    -p, --patch                     # 在&lt;tree-ish&gt;（或索引，如果未指定）和工作树之间的区别中交互地选择hunk。然后将选定的区块反向应用于工作树（并且如果指定了&lt;tree-ish&gt;，则索引）</span><br><span class="line">    --ignore-other-worktrees        # git checkout当被通缉的裁判已经被另一个工作树签出时拒绝。这个选项使它无论如何检查裁判</span><br><span class="line">    --[no-]recurse-submodules       # 使用--recurse子模块将根据超级项目中记录的提交更新所有已初始化的子模块的内容</span><br><span class="line">    &lt;branch&gt;                        # 分支, 如果它引用了一个分支（即，前缀为“refs/heads/”的名称是有效的ref），那么该分支将被签出</span><br><span class="line">    &lt;new_branch&gt;                    # 新分支的名称</span><br><span class="line">    &lt;start_point&gt;                   # 要开始新分支的提交的名称</span><br><span class="line">    &lt;tree-ish&gt;                      # 要检出的树（当有路径时）。如果未指定，则会使用索引</span><br></pre></td></tr></table></figure><h3 id="merge-命令"><a href="#merge-命令" class="headerlink" title="merge 命令"></a>merge 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git merge [-n] [--stat] [--no-commit] [--squash] [--[no-]edit]</span><br><span class="line">        [-s &lt;strategy&gt;] [-X &lt;strategy-option&gt;] [-S[&lt;keyid&gt;]]</span><br><span class="line">        [--[no-]allow-unrelated-histories]</span><br><span class="line">        [--[no-]rerere-autoupdate] [-m &lt;msg&gt;] [&lt;commit&gt;…]</span><br><span class="line">    git merge --abort</span><br><span class="line">    git merge --continue</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    --commit, --no-commit                       # 执行合并并提交结果。这个选项可以用来覆盖--no-commit</span><br><span class="line">    -e, --edit, --no-edit                       # 在提交成功的机械合并之前调用编辑器来进一步编辑自动生成的合并消息，以便用户可以解释并验证合并</span><br><span class="line">    --ff                                        # 当合并解析为快进时，只更新分支指针，而不创建合并提交。这是默认行为</span><br><span class="line">    --no-ff                                     # 即使合并解析为快进，也可以创建合并提交。这是合并注释标记时的默认行为</span><br><span class="line">    --ff-only                                   # 拒绝合并并以非零状态退出，除非当前HEAD已更新或合并可以解决为快进</span><br><span class="line">    -S[&lt;keyid&gt;], --gpg-sign[=&lt;keyid&gt;]           # GPG-签署合并提交</span><br><span class="line">    --log[=&lt;n&gt;], --no-log                       # 除了分支名称之外，还可以用来自至多&lt;n&gt;实际提交的单行描述来填充日志消息</span><br><span class="line">    --signoff, --no-signoff                     # 提交日志消息结尾处的提交者添加Signed-off-by行</span><br><span class="line">    --stat, -n, --no-stat                       # 在合并结束时显示diffstat。diffstat也由配置选项merge.stat控制</span><br><span class="line">    --squash, --no-squash                       # 生成工作树和索引状态，就像发生真正的合并一样，但实际上并未进行提交，移动HEAD或记录$GIT_DIR/MERGE_HEAD </span><br><span class="line">    -s &lt;strategy&gt;, --strategy=&lt;strategy&gt;        # 使用给定的合并策略; 可以多次提供，以按照他们应该尝试的顺序指定它们</span><br><span class="line">    -X &lt;option&gt;, --strategy-option=&lt;option&gt;     # 将合并策略特定选项传递给合并策略</span><br><span class="line">    --verify-signatures, --no-verify-signatures # 验证被合并的分支的提示提交是否使用有效密钥进行签名，即具有有效uid的密钥：在默认信任模型中，</span><br><span class="line">                                                  这意味着签名密钥已由可信密钥签名。如果侧分支的提示提交未使用有效密钥进行签名，则会中止合并</span><br><span class="line">    --summary, --no-summary                     # 同义词--stat和--no-stat; 这些已被弃用，并将在未来被删除</span><br><span class="line">    -q, --quiet                                 # 安静地操作。意味着 - 没有进步</span><br><span class="line">    -v, --verbose                               # 详细</span><br><span class="line">    --progress, --no-progress                   # 明确地打开/关闭进度。如果没有指定，如果标准错误连接到终端，则显示进度</span><br><span class="line">    --allow-unrelated-histories                 # 默认情况下，git merge命令拒绝合并不共享祖先的历史记录</span><br><span class="line">    -m &lt;msg&gt;                                    # 设置要用于合并提交的提交消息（以防创建）</span><br><span class="line">    --[no-]rerere-autoupdate                    # 如果可能的话，允许rerere机制用自动冲突解决的结果更新索引</span><br><span class="line">    --abort                                     # 中止当前的冲突解决过程，并尝试重新构建预合并状态</span><br><span class="line">    --continue                                  # 经过git的合并，由于停止冲突，那么可以得出结论：通过运行合并混帐合并--continue</span><br><span class="line">    &lt;commit&gt;…                                   # 提交, 通常其他分支, 合并到我们的分支</span><br></pre></td></tr></table></figure><h3 id="mergetool-命令"><a href="#mergetool-命令" class="headerlink" title="mergetool 命令"></a>mergetool 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git mergetool [--tool=&lt;tool&gt;] [-y | --[no-]prompt] [&lt;file&gt;…]</span><br><span class="line">    </span><br><span class="line">选项：</span><br><span class="line">    -t &lt;tool&gt;, --tool=&lt;tool&gt;  # 使用&lt;tool&gt;指定的合并解析程序。有效值包括emerge，gvimdiff，kdiff3，meld，vimdiff和tortoisemerge。 运行git mergetool --tool-help 有效的&lt;工具&gt;设置列表</span><br><span class="line">    --tool-help               # 打印可能使用的合并工具列表--tool</span><br><span class="line">    -y, --no-prompt           # 在每次调用合并解析程序之前不要提示。如果通过--tool或 merge.tool配置变量显式指定合并解析程序(默认值)</span><br><span class="line">    --prompt                  # 在每次调用合并解决方案之前提示，以使用户有机会跳过该路径</span><br><span class="line">    -O&lt;orderfile&gt;             # 按照&lt;orderfile&gt;中指定的顺序处理文件，每行有一个shell glob模式</span><br></pre></td></tr></table></figure><h3 id="log-命令"><a href="#log-命令" class="headerlink" title="log 命令"></a>log 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git log [&lt;options&gt;] [&lt;revision range&gt;] [[\--] &lt;path&gt;…]</span><br><span class="line">    </span><br><span class="line">选项：</span><br><span class="line">    --follow                                                     # 继续列出除重命名之外的文件历史记录（仅适用于单个文件）</span><br><span class="line">    --no-decorate, --decorate[=short|full|auto|no]               # 打印出任何提交的ref名称</span><br><span class="line">    --decorate-refs=&lt;pattern&gt;, --decorate-refs-exclude=&lt;pattern&gt; # 如果没有--decorate-refs给出，假装所有参考文献都包含在内</span><br><span class="line">    --source                                                     # 打印在每个提交到达的命令行上给出的ref名称</span><br><span class="line">    --use-mailmap                                                # 使用邮件地图文件将作者和提交者姓名和电子邮件地址映射到规范的实名和电子邮件地址</span><br><span class="line">    --full-diff                                                  # 没有此标志，git log -p &lt;path&gt;...显示提交触摸指定的路径，并且差异关于相同指定的路径</span><br><span class="line">    --log-size                                                   # 在每个提交的输出中包含一行“log size &lt;number&gt;”，其中&lt;number&gt;是该提交消息的长度（以字节为单位）</span><br><span class="line">    -L &lt;start&gt;,&lt;end&gt;:&lt;file&gt;, -L :&lt;funcname&gt;:&lt;file&gt;               # 跟踪&lt;file&gt;中由“&lt;start&gt;，&lt;end&gt;”（或函数名称regex &lt;funcname&gt;）给出的行范围的演变</span><br><span class="line">    &lt;revision range&gt;                                             # 仅显示指定修订范围内的提交</span><br><span class="line">    [\--] &lt;path&gt;…                                                # 仅显示足以解释如何匹配指定路径的文件的提交</span><br><span class="line">    </span><br><span class="line">提交限制：                                        </span><br><span class="line">    -&lt;number&gt;, -n &lt;number&gt;, --max-count=&lt;number&gt;         # 限制提交输出的数量</span><br><span class="line">    --skip=&lt;number&gt;                                      # 在开始显示提交输出之前跳过数字提交</span><br><span class="line">    --since=&lt;date&gt;, --after=&lt;date&gt;                       # 显示比特定日期更近的提交</span><br><span class="line">    --until=&lt;date&gt;, --before=&lt;date&gt;                      # 显示比特定日期更早的提交</span><br><span class="line">    --author=&lt;pattern&gt;, --committer=&lt;pattern&gt;            # 将提交输出限制为与指定模式（正则表达式）匹配的作者/提交者标题行</span><br><span class="line">    --grep-reflog=&lt;pattern&gt;                              # 将提交输出限制为具有与指定模式（正则表达式）匹配的reflog条目的提交输出</span><br><span class="line">    --grep=&lt;pattern&gt;                                     # 将提交输出限制为符合指定模式（正则表达式）的日志消息</span><br><span class="line">    --all-match                                          # 将提交输出限制为匹配所有给定的提交--grep，而不是至少匹配一个提交</span><br><span class="line">    --invert-grep                                        # 将提交输出限制为与日志消息不匹配的模式--grep=&lt;pattern&gt;</span><br><span class="line">    -i, --regexp-ignore-case                             # 匹配正则表达式限制模式而不考虑字母大小写</span><br><span class="line">    --basic-regexp                                       # 考虑限制模式是基本的正则表达式; 这是默认值</span><br><span class="line">    -E, --extended-regexp                                # 考虑限制模式是扩展正则表达式而不是默认的基本正则表达式</span><br><span class="line">    -F, --fixed-strings                                  # 考虑限制模式为固定字符串（不要将模式解释为正则表达式）</span><br><span class="line">    -P, --perl-regexp                                    # 考虑限制模式是与Perl兼容的正则表达式</span><br><span class="line">    --remove-empty                                       # 当给定的路径从树上消失时停止</span><br><span class="line">    --merges                                             # 仅打印合并提交。这完全一样--min-parents=2</span><br><span class="line">    --no-merges                                          # 不要打印与多个父代的提交。这完全一样--max-parents=1</span><br><span class="line">    --min-parents=&lt;number&gt;, --max-parents=&lt;number&gt;       # 仅显示至少（或至多）多次父级提交的提交</span><br><span class="line">    --no-min-parents, --no-max-parents                   # --no-min-parents并--no-max-parents重新设置这些限制（无限制）</span><br><span class="line">    --first-parent                                       # 在查看合并提交后，只跟踪第一个父提交</span><br><span class="line">    --not                                                # 反转的意思^前缀（或缺乏）的所有后续修订说明符，到下一个--not</span><br><span class="line">    --all                                                # 假设所有的参考文件refs/，以及HEAD命令行都列为&lt;commit&gt;</span><br><span class="line">    --branches[=&lt;pattern&gt;]                               # 假设所有的参数refs/heads都在命令行上列为&lt;commit&gt;。如果给定&lt;pattern&gt;，则将分支限制为与给定shell glob匹配的分支</span><br><span class="line">    --tags[=&lt;pattern&gt;]                                   # 假设所有的参数refs/tags都在命令行上列为&lt;commit&gt;。如果给出&lt;pattern&gt;，则将标记限制为与给定shell glob相匹配的标记</span><br><span class="line">    --remotes[=&lt;pattern&gt;]                                # 假设所有的参数refs/remotes都在命令行上列为&lt;commit&gt;。如果给出&lt;pattern&gt;，则将远程跟踪分支限制为与给定shell glob匹配的分支</span><br><span class="line">    --glob=&lt;glob-pattern&gt;                                # 假设所有与shell glob &lt;glob-pattern&gt;匹配的ref 在命令行中都以&lt;commit&gt;列出。前导refs /，如果缺失，将自动添加前缀</span><br><span class="line">    --exclude=&lt;glob-pattern&gt;                             # 不包括裁判匹配&lt;水珠图案&gt;，未来--all， --branches，--tags，--remotes，或--glob原本考虑</span><br><span class="line">    --reflog                                             # 假设所有reflog提到的对象都在命令行中列为&lt;commit&gt;</span><br><span class="line">    --single-worktree                                    # 默认情况下，所有工作的树木将被下面的选项时，有一个以上--all，--reflog和 --indexed-objects。该选项强制他们仅检查当前工作树</span><br><span class="line">    --ignore-missing                                     # 在输入中看到一个无效的对象名称时，假装没有给出错误的输入</span><br><span class="line">    --bisect                                             # 假装好坏的二等分参考文献refs/bisect/bad 被列出，并且仿佛它被跟随，--not并且良好的平分参考refs/bisect/good-*命令行</span><br><span class="line">    --stdin                                              # 除了命令行上列出的&lt;commit&gt;之外，还可以从标准输入中读取它们。如果--看到分隔符，请停止读取提交并开始读取路径以限制结果</span><br><span class="line">    --cherry-mark                                        # 像--cherry-pick（见下面）但标记等价提交=而不是省略它们，而不等价的提交+</span><br><span class="line">    --cherry-pick                                        # 当提交集合受到对称差异限制时，省略任何提交引入与“另一侧”上的另一个提交相同的更改的提交</span><br><span class="line">    --left-only, --right-only                            # 列表仅在对称差异的相应侧提交，即只有那些将被标记&lt;为resp的列表。&gt;通过 --left-right</span><br><span class="line">    --cherry                                             # 的代名词--right-only --cherry-mark --no-merges; 有用的是将输出限制在我们这边的提交中，并将那些已经应用到</span><br><span class="line">                                                           分叉历史的另一边的标记标记为 git log --cherry upstream...mybranch类似于 git cherry upstream mybranch</span><br><span class="line">    -g, --walk-reflogs                                   # 而不是走提交祖先链，将reflog条目从最近的一条走到更旧的条目</span><br><span class="line">    --merge                                              # 合并失败后，显示引用文件有冲突并且不存在于所有合并头上</span><br><span class="line">    --boundary                                           # 输出排除边界提交。边界提交以前缀-</span><br><span class="line">    </span><br><span class="line">历史简化：</span><br><span class="line">    &lt;paths&gt;                                              # 提交修改给定的&lt;路径&gt;被选中</span><br><span class="line">    --simplify-by-decoration                             # 由某个分支或标签引用的提交被选中</span><br><span class="line">        Default mode                                     # 将历史简化为解释树的最终状态的最简单历史记录</span><br><span class="line">        --full-history                                   # 与默认模式相同，但不修剪某些历史记录</span><br><span class="line">        --dense                                          # 只显示选定的提交，另外一些提供有意义的历史记录</span><br><span class="line">        --sparse                                         # 显示简化历史记录中的所有提交</span><br><span class="line">        --simplify-merges                                # 附加选项可--full-history从结果历史记录中删除一些不必要的合并，因为没有选定的提交对此合并作出贡献</span><br><span class="line">        --ancestry-path                                  # 当给定一个范围提交的显示（例如commit1..commit2 或commit2 ^ commit1），</span><br><span class="line">                                                           只直接存在于之间的祖先链显示提交commit1和 commit2，即提交属于的两个后代commit1，和祖先commit2</span><br><span class="line"></span><br><span class="line">提交订单：                                                </span><br><span class="line">    --date-order                                         # 在显示所有孩子之前不显示父母，但在提交时间戳顺序中显示提交</span><br><span class="line">    --author-date-order                                  # 在显示所有孩子之前不显示父母，但以作者时间戳顺序显示提交</span><br><span class="line">    --topo-order                                         # 在显示所有孩子之前不要显示父母，并且避免在多行历史记录中混合显示提交</span><br><span class="line">    --reverse                                            # 以相反顺序输出选择显示的提交。不能与之结合 --walk-reflogs</span><br><span class="line"></span><br><span class="line">对象遍历：                                                    </span><br><span class="line">    --no-walk[=(sorted|unsorted)]                        # 只显示给定的提交，但不要遍历其祖先。如果指定了范围，则这不起作用。如果提供了参数 unsorted，</span><br><span class="line">　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　 则提交按照它们在命令行上的顺序显示。否则（如sorted没有给参数），提交按提交时间以反向时间顺序显示。不能与之结合--graph</span><br><span class="line">    --do-walk                                            # 覆盖以前--no-walk</span><br><span class="line"></span><br><span class="line">提交格式：                                                </span><br><span class="line">    --pretty[=&lt;format&gt;], --format=&lt;format&gt;               # 漂亮地打印在提交日志的内容在给定的格式，其中&lt;格式&gt;可以是一个ONELINE，短，中等，充分，更全面的，电子邮件，原料，格式：&lt;字符串&gt; 和tformat：&lt;字符串&gt;        </span><br><span class="line">    --abbrev-commit                                      # 不显示完整的40字节十六进制提交对象名称，只显示部分前缀</span><br><span class="line">    --no-abbrev-commit                                   # 显示完整的40字节十六进制提交对象名称。这种否定 --abbrev-commit和暗示它的选项如“--oneline”</span><br><span class="line">    --oneline                                            # 这是一起使用的“--pretty = oneline --abbrev-commit”的缩写</span><br><span class="line">    --encoding=&lt;encoding&gt;                                # 提交对象在其编码头中记录用于日志消息的编码; 这个选项可以用来告诉命令在用户首选的编码中重新编写提交日志消息</span><br><span class="line">    --expand-tabs=&lt;n&gt;, --expand-tabs, --no-expand-tabs   # 在输出中显示日志消息之前，执行一个选项卡扩展（将每个选项卡用足够的空格替换，以填充日志消息中的倍数为&lt;n&gt;的下一个显示列）</span><br><span class="line">    --notes[=&lt;treeish&gt;]                                  # 在显示提交日志消息时，显示注释提交的注释</span><br><span class="line">    --no-notes                                           # 不要显示笔记</span><br><span class="line">    --show-signature                                     # 通过签名传递gpg --verify并显示输出来检查签名提交对象的有效性</span><br><span class="line">    --relative-date                                      # 的同义词--date=relative</span><br><span class="line">    --date=&lt;format&gt;                                      # 仅对以人可读格式显示的日期生效，例如在使用时--pretty。log.dateconfig变量为log命令的--date选项设置一个默认值</span><br><span class="line">    --parents                                            # 也打印提交的父母（以“commit parent ...”的形式）</span><br><span class="line">    --children                                           # 也打印提交的子代（以“commit child ...”的形式）</span><br><span class="line">    --left-right                                         # 标记可以从中提交提交的对称差异的哪一侧。来自左侧的提交将以前面的&lt;和前面的提交&gt;。如果合并--boundary，那些提交前缀为-</span><br><span class="line">    --graph                                              # 在输出的左侧绘制提交历史记录的基于文本的图形表示</span><br><span class="line">    --show-linear-break[=&lt;barrier&gt;]                      # 当不使用--graph时，所有历史分支都会变平，这使得很难看到两个连续的提交不属于线性分支</span><br><span class="line"></span><br><span class="line">区分格式：                                                </span><br><span class="line">    -c                                                   # 使用此选项，合并提交的差异输出会同时显示每个父级与合并结果的差异，而不是显示父级与每次结果之间的pairwise差异</span><br><span class="line">    --cc                                                 # 这个标志意味着这个-c选项，并通过省略父母内容只有两个变体的无趣hunk来进一步压缩补丁输出，并且合并结果不加修改地选择其中的一个</span><br><span class="line">    -m                                                   # 这个标志使得合并提交显示了像常规提交一样的完整差异; 对于每个合并父项，会生成一个单独的日志条目和diff</span><br><span class="line">    -r                                                   # 显示递归差异</span><br><span class="line">    -t                                                   # 在diff输出中显示树对象。这意味着-r</span><br></pre></td></tr></table></figure><h3 id="stash-命令"><a href="#stash-命令" class="headerlink" title="stash 命令"></a>stash 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git stash list [&lt;options&gt;]</span><br><span class="line">    git stash show [&lt;stash&gt;]</span><br><span class="line">    git stash drop [-q|--quiet] [&lt;stash&gt;]</span><br><span class="line">    git stash ( pop | apply ) [--index] [-q|--quiet] [&lt;stash&gt;]</span><br><span class="line">    git stash branch &lt;branchname&gt; [&lt;stash&gt;]</span><br><span class="line">    git stash [push [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]</span><br><span class="line">             [-u|--include-untracked] [-a|--all] [-m|--message &lt;message&gt;]</span><br><span class="line">             [--] [&lt;pathspec&gt;…]]</span><br><span class="line">    git stash clear</span><br><span class="line">    git stash create [&lt;message&gt;]</span><br><span class="line">    git stash store [-m|--message &lt;message&gt;] [-q|--quiet] &lt;commit&gt;</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    push [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]        </span><br><span class="line">        [-u|--include-untracked] [-a|--all] [-m|--message &lt;message&gt;]</span><br><span class="line">        [--] [&lt;pathspec&gt;…]                 # 将您的本地修改保存到新的存储条目中，并将它们回滚到HEAD（在工作树和索引中）</span><br><span class="line">    list [&lt;options&gt;]                       # 列出您当前拥有的存储条目</span><br><span class="line">    show [&lt;stash&gt;]                         # 显示存储条目中记录的更改，作为隐藏内容和提交首次创建存储条目时的提交之间的差异</span><br><span class="line">    pop [--index] [-q|--quiet] [&lt;stash&gt;]   # 从存储列表中删除一个单独的存储状态并将其应用于当前工作树状态的顶部，即进行反操作git stash push。工作目录必须与索引匹配</span><br><span class="line">    apply [--index] [-q|--quiet] [&lt;stash&gt;] # 喜欢pop，但不要从存储列表中删除状态。不像pop， &lt;stash&gt;可能是任何看起来像由stash pushor 创建的提交 stash create</span><br><span class="line">    branch &lt;branchname&gt; [&lt;stash&gt;]          # 创建并检出&lt;branchname&gt;从&lt;stash&gt;最初创建的提交开始的新分支，将记录的更改应用&lt;stash&gt;到新的工作树和索引</span><br><span class="line">    clear                                  # 删除所有的存储条目</span><br><span class="line">    drop [-q|--quiet] [&lt;stash&gt;]            # 从存储条目列表中删除单个存储条目。如果没有&lt;stash&gt;给出，它将删除最新的一个</span><br><span class="line">    create                                 # 创建一个存储条目（这是一个常规的提交对象）并返回它的对象名称，而不将它存储在ref命名空间的任何位置</span><br><span class="line">    store                                  # 在存储引用中存储通过git stash create（这是一个悬挂的合并提交）创建的给定存储，更新存储引用日志</span><br></pre></td></tr></table></figure><h3 id="tag-命令"><a href="#tag-命令" class="headerlink" title="tag 命令"></a>tag 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git tag [-a | -s | -u &lt;keyid&gt;] [-f] [-m &lt;msg&gt; | -F &lt;file&gt;] [-e]</span><br><span class="line">        &lt;tagname&gt; [&lt;commit&gt; | &lt;object&gt;]</span><br><span class="line">    git tag -d &lt;tagname&gt;…</span><br><span class="line">    git tag [-n[&lt;num&gt;]] -l [--contains &lt;commit&gt;] [--no-contains &lt;commit&gt;]</span><br><span class="line">        [--points-at &lt;object&gt;] [--column[=&lt;options&gt;] | --no-column]</span><br><span class="line">        [--create-reflog] [--sort=&lt;key&gt;] [--format=&lt;format&gt;]</span><br><span class="line">        [--[no-]merged [&lt;commit&gt;]] [&lt;pattern&gt;…]</span><br><span class="line">    git tag -v [--format=&lt;format&gt;] &lt;tagname&gt;…</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    -a, --annotate                          # 制作一个未签名的带注释的标签对象</span><br><span class="line">    -s, --sign                              # 使用默认的电子邮件地址密钥创建一个GPG签名的标签</span><br><span class="line">    -u &lt;keyid&gt;, --local-user=&lt;keyid&gt;        # 使用给定的密钥创建一个GPG签名的标签</span><br><span class="line">    -f, --force                             # 用给定名称替换现有标签（而不是失败）</span><br><span class="line">    -d, --delete                            # 用给定名称删除现有标签</span><br><span class="line">    -v, --verify                            # 验证给定标签名称的GPG签名</span><br><span class="line">    -n&lt;num&gt;                                 # &lt;num&gt;指定在使用-l时打印多少行（如果有）。意味着--list</span><br><span class="line">    -l, --list                              # 列表标签</span><br><span class="line">    --sort=&lt;key&gt;                            # 根据给定的关键字进行排序。前缀-按值的降序进行排序</span><br><span class="line">    -i, --ignore-case                       # 排序和过滤标签不区分大小写</span><br><span class="line">    --column[=&lt;options&gt;], --no-column       # 在列中显示标签列表</span><br><span class="line">    --contains [&lt;commit&gt;]                   # 只列出包含指定提交的标签（如果未指定，则为HEAD）。意味着--list</span><br><span class="line">    --no-contains [&lt;commit&gt;]                # 只列出不包含指定提交的标签（如果未指定，则为HEAD）。意味着--list</span><br><span class="line">    --merged [&lt;commit&gt;]                     # 仅列出可从提交的提交（HEAD如果未指定）可访问的列表标记，与之不兼容--no-merged</span><br><span class="line">    --no-merged [&lt;commit&gt;]                  # 仅列出其提交无法从指定提交（HEAD如果未指定）到达的标记，与之不兼容--merged</span><br><span class="line">    --points-at &lt;object&gt;                    # 只列出给定对象的标签（HEAD，如果未指定）。意味着--list</span><br><span class="line">    -m &lt;msg&gt;, --message=&lt;msg&gt;               # 使用给定的标签消息（而不是提示）</span><br><span class="line">    -F &lt;file&gt;, --file=&lt;file&gt;                # 从给定的文件中获取标签消息。使用-从标准输入中读取消息。</span><br><span class="line">    -e, --edit                              # 从带有-F和命令行的 文件中获取的消息-m通常用作未经修改的标记消息</span><br><span class="line">    --cleanup=&lt;mode&gt;                        # 该选项设置标签消息的清理方式</span><br><span class="line">    --create-reflog                         # 为标签创建一个reflog</span><br><span class="line">    &lt;tagname&gt;                               # 要创建，删除或描述的标记的名称</span><br><span class="line">    &lt;commit&gt;, &lt;object&gt;                      # 新标签将引用的对象，通常是提交。默认为HEAD</span><br><span class="line">    &lt;format&gt;                                # %(fieldname)从显示的标记ref和指向的对象中插入一个字符串</span><br></pre></td></tr></table></figure><h3 id="worktree-命令"><a href="#worktree-命令" class="headerlink" title="worktree 命令"></a>worktree 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git worktree add [-f] [--detach] [--checkout] [--lock] [-b &lt;new-branch&gt;] &lt;path&gt; [&lt;commit-ish&gt;]</span><br><span class="line">    git worktree list [--porcelain]</span><br><span class="line">    git worktree lock [--reason &lt;string&gt;] &lt;worktree&gt;</span><br><span class="line">    git worktree move &lt;worktree&gt; &lt;new-path&gt;</span><br><span class="line">    git worktree prune [-n] [-v] [--expire &lt;expire&gt;]</span><br><span class="line">    git worktree remove [--force] &lt;worktree&gt;</span><br><span class="line">    git worktree unlock &lt;worktree&gt;</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    add &lt;path&gt; [&lt;commit-ish&gt;]          # 创建&lt;path&gt;并签&lt;commit-ish&gt;出</span><br><span class="line">    list                               # 列出每个工作树的详细信息</span><br><span class="line">    lock                               # 如果工作树位于便携式设备或网络共享上，且该共享并非始终挂载，请将其锁定以防止其管理文件被自动修剪</span><br><span class="line">    move                               # 将工作树移到新位置</span><br><span class="line">    prune                              # 修剪$ GIT_DIR / worktrees中的修剪树信息</span><br><span class="line">    remove                             # 删除一棵工作树。只有干净的工作树（没有未跟踪的文件，并且没有修改跟踪的文件）可以被删除</span><br><span class="line">    unlock                             # 解锁一个工作树，允许它被修剪，移动或删除</span><br><span class="line">    -f, --force                        # 默认情况下，add拒绝创建一个新的工作树，当它 &lt;commit-ish&gt;是一个分支名称并且已经被另一个工作树签出并remove拒绝删除不干净的工作树时</span><br><span class="line">    -b &lt;new-branch&gt;, -B &lt;new-branch&gt;   # 用add，创建一个名为&lt;new-branch&gt;起始处 的新分支&lt;commit-ish&gt;，并检查&lt;new-branch&gt;新的工作树</span><br><span class="line">    --detach                           # 随着add，在新的工作树中分离HEAD</span><br><span class="line">    --[no-]checkout                    # 默认情况下，add检查出来&lt;commit-ish&gt;，但--no-checkout可以用来抑制，以进行自定义，如配置稀疏结帐结帐</span><br><span class="line">    --[no-]guess-remote                # 与worktree add &lt;path&gt;没有，&lt;commit-ish&gt;而不是创建从HEAD一个新的分支，如果存在在恰好一个远程匹配的</span><br><span class="line">                                         基本名称的跟踪分支&lt;path&gt;，立足于远程跟踪分支的新分支，并标记远程跟踪分支为“上游”来自新的分支</span><br><span class="line">    --[no-]track                       # 创建新分支时，如果&lt;commit-ish&gt;是分支，则将其标记为新分支中的“上游”</span><br><span class="line">    --lock                             # 创建后保持工作树锁定</span><br><span class="line">    -n, --dry-run                      # 随着prune，不要删除任何东西; 只是报告它会删除什么</span><br><span class="line">    --porcelain                        # 使用list，输出脚本的易于解析的格式</span><br><span class="line">    -v, --verbose                      # 随着prune，报告所有清除</span><br><span class="line">    --expire &lt;time&gt;                    # 使用时prune，只会使&lt;age&gt;以前的未使用的工作树过期</span><br><span class="line">    --reason &lt;string&gt;                  # 随着lock，为什么工作树被锁定的解释</span><br><span class="line">    &lt;worktree&gt;                         # 工作树可以通过相对路径或绝对路径来标识</span><br></pre></td></tr></table></figure><h3 id="fetch-命令"><a href="#fetch-命令" class="headerlink" title="fetch 命令"></a>fetch 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git fetch [&lt;options&gt;] [&lt;repository&gt; [&lt;refspec&gt;…]]</span><br><span class="line">    git fetch [&lt;options&gt;] &lt;group&gt;</span><br><span class="line">    git fetch --multiple [&lt;options&gt;] [(&lt;repository&gt; | &lt;group&gt;)…]</span><br><span class="line">    git fetch --all [&lt;options&gt;]</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    --all                                    # 取回所有遥控器</span><br><span class="line">    -a, --append                             # 追加refs的ref名称和对象名称到现有的内容.git/FETCH_HEAD。</span><br><span class="line">    --depth=&lt;depth&gt;                          # 将提取限制为从每个远程分支历史记录的提示中指定的提交数量</span><br><span class="line">    --deepen=&lt;depth&gt;                         # 与--depth相似，只是它指定了来自当前浅边界而不是每个远程分支历史记录的提示的提交数</span><br><span class="line">    --shallow-since=&lt;date&gt;                   # 加深或缩短浅储存库的历史记录，以便在&lt;date&gt;之后包含所有可访问的提交</span><br><span class="line">    --shallow-exclude=&lt;revision&gt;             # 加深或缩短浅储存库的历史记录，以排除可从指定的远程分支或标记访问的提交</span><br><span class="line">    --unshallow                              # 如果源存储库已完成，请将浅层存储库转换为完整存储库，以消除浅存储库施加的所有限制</span><br><span class="line">    --update-shallow                         # 默认情况下，从浅仓库中获取时， git fetch拒绝需要更新.git/shallow的引用</span><br><span class="line">    --dry-run                                # 显示将做什么，不做任何改变</span><br><span class="line">    -f, --force                              # 当git fetch与&lt;rbranch&gt;:&lt;lbranch&gt; refspec一起使用时，它拒绝更新本地分支， </span><br><span class="line">                                               &lt;lbranch&gt;除非&lt;rbranch&gt;它获取的远程分支是子孙的后代&lt;lbranch&gt;</span><br><span class="line">    -k, --keep                               # 保持下载的包</span><br><span class="line">    --multiple                               # 允许指定多个&lt;repository&gt;和&lt;group&gt;参数</span><br><span class="line">    -p, --prune                              # 在提取之前，请删除远程不再存在的所有远程跟踪参考</span><br><span class="line">    -P, --prune-tags                         # 在获取之前，删除--prune已启用的远程不再存在的所有本地标记</span><br><span class="line">    -n, --no-tags                            # 默认情况下，指向从远程存储库下载的对象的标签将在本地获取并存储</span><br><span class="line">    --refmap=&lt;refspec&gt;                       # 在获取命令行中列出的ref时，使用指定的refspec（可以多次提供）将ref映射到远程跟踪分支，而不是remote.*.fetch远程存储库的配置变量的值 </span><br><span class="line">    -t, --tags                               # 从远程获取所有标签（即，将远程标签获取 refs/tags/*到具有相同名称的本地标签中），除此之外的任何其他内容都将被提取</span><br><span class="line">    --recurse-submodules[=yes|on-demand|no]  # 此选项控制是否以及在什么条件下也应提取填充的子模块的新提交</span><br><span class="line">    -j, --jobs=&lt;n&gt;                           # 用于提取子模块的并行子项的数量</span><br><span class="line">    --no-recurse-submodules                  # 禁用递归获取子模块（这与使用该--recurse-submodules=no选项具有相同的效果）</span><br><span class="line">    --submodule-prefix=&lt;path&gt;                # 在信息消息（如“获取子模块foo”）中打印路径前加上&lt;path&gt;</span><br><span class="line">    --recurse-submodules-default=[yes|on-demand] # 此选项在内部用于为--recurse-submodules选项临时提供非负的默认值</span><br><span class="line">    -u, --update-head-ok                         # 默认情况下，git fetch拒绝更新与当前分支对应的头部</span><br><span class="line">    --upload-pack &lt;upload-pack&gt;                  # 当给定时，并且从git fetch-pack处理要从中获取的存储库，--exec=&lt;upload-pack&gt;将传递给该命令以指定在另一端运行的命令的非默认路径</span><br><span class="line">    -q, --quiet                                  # 通过 - 安静的git-fetch-pack和沉默任何其他内部使用的git命令</span><br><span class="line">    -v, --verbose                                # 详细</span><br><span class="line">    --progress                                   # 当连接到终端时，默认情况下，标准错误流中会报告进度状态，除非指定-q</span><br><span class="line">    -4, --ipv4                                   # 仅使用IPv4地址，忽略IPv6地址</span><br><span class="line">    -6, --ipv6                                   # 仅使用IPv6地址，忽略IPv4地址</span><br><span class="line">    &lt;repository&gt;                                 # 作为提取或拉取操作源的“远程”存储库</span><br><span class="line">    &lt;group&gt;                                      # 名称指的是存储库列表，作为配置文件中的远程数据&lt;group&gt;的值</span><br><span class="line">    &lt;refspec&gt;                                    # 指定要获取哪些引用以及哪些本地引用要更新</span><br></pre></td></tr></table></figure><h3 id="pull-命令"><a href="#pull-命令" class="headerlink" title="pull 命令"></a>pull 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git pull [options] [&lt;repository&gt; [&lt;refspec&gt;…]]</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    -q, --quiet                                    # 这被传递给底层的git-fetch，以便在传输过程中压制报告，并在合并过程中将潜在的git-merge压制成静噪输出</span><br><span class="line">    -v, --verbose                                  # 通过--verbose git-fetch和git-merge</span><br><span class="line">    --[no-]recurse-submodules[=yes|on-demand|no]   # 该选项控制是否应该提取和更新所有已填充子模块的新提交</span><br><span class="line"></span><br><span class="line">与合并有关的选项：</span><br><span class="line">    --commit， --no-commit      　　　　　　　　      # 执行合并并提交结果</span><br><span class="line">    -e, --edit, --no-edit                          # 在提交成功的机械合并之前调用编辑器来进一步编辑自动生成的合并消息，以便用户可以解释并验证合并</span><br><span class="line">    --ff                                           # 当合并解析为快进时，只更新分支指针，而不创建合并提交。这是默认行为</span><br><span class="line">    --no-ff                                        # 即使合并解析为快进，也可以创建合并提交</span><br><span class="line">    --ff-only                                      # 拒绝合并并以非零状态退出，除非电流HEAD已经是最新的或合并可以解决为快进</span><br><span class="line">    --log[=&lt;n&gt;], --no-log                          # 除了分支名称之外，还可以用来自至多&lt;n&gt;实际提交的单行描述来填充日志消息</span><br><span class="line">    --stat, -n, --no-stat                          # 在合并结束时显示diffstat。diffstat也由配置选项merge.stat控制</span><br><span class="line">    --squash, --no-squash                          # 生成工作树和索引状态，就像发生真正的合并（合并信息除外）一样，但实际上并未进行提交，</span><br><span class="line">                                                     移动HEAD或记录$GIT_DIR/MERGE_HEAD （以导致下一个git commit命令创建合并提交）</span><br><span class="line">    -s &lt;strategy&gt;, --strategy=&lt;strategy&gt;           # 使用给定的合并策略; 可以多次提供，以按照他们应该尝试的顺序指定它们</span><br><span class="line">    -X &lt;option&gt;, --strategy-option=&lt;option&gt;        # 将合并策略特定选项传递给合并策略</span><br><span class="line">    --verify-signatures, --no-verify-signatures    # 验证被合并的分支的提示提交是否使用有效密钥进行签名，即具有有效uid的密钥：在默认信任模型中，这意味着签名密钥已由可信密钥签名</span><br><span class="line">    --allow-unrelated-histories                    # 默认情况下，git merge命令拒绝合并不共享祖先的历史记录</span><br><span class="line">    -r, --rebase[=false|true|preserve|interactive] # 如果为true，则在获取后重新绑定上游分支顶部的当前分支</span><br><span class="line">    --no-rebase                                    # 早先覆盖--rebase</span><br><span class="line">    --autostash, --no-autostash                    # 在开始rebase之前，如果需要，将局部修改隐藏起来，并在完成时应用存储条目</span><br><span class="line"></span><br><span class="line">与抓取相关的选项:</span><br><span class="line">    --all                                          # 取回所有遥控器</span><br><span class="line">    -a, --append                                   # 追加refs的ref名称和对象名称到现有的内容.git/FETCH_HEAD</span><br><span class="line">    --depth=&lt;depth&gt;                                # 将提取限制为从每个远程分支历史记录的提示中指定的提交数量</span><br><span class="line">    --deepen=&lt;depth&gt;                               # 与--depth相似，只是它指定了来自当前浅边界而不是每个远程分支历史记录的提示的提交数</span><br><span class="line">    --shallow-since=&lt;date&gt;                         # 加深或缩短浅储存库的历史记录，以便在&lt;date&gt;之后包含所有可访问的提交</span><br><span class="line">    --shallow-exclude=&lt;revision&gt;                   # 加深或缩短浅储存库的历史记录，以排除可从指定的远程分支或标记访问的提交</span><br><span class="line">    --unshallow                                    # 如果源存储库已完成，请将浅层存储库转换为完整存储库，以消除浅存储库施加的所有限制</span><br><span class="line">    --update-shallow                               # 默认情况下，从浅仓库中获取时， git fetch拒绝需要更新.git/shallow的引用</span><br><span class="line">    -f, --force                                    # 当git fetch与&lt;rbranch&gt;:&lt;lbranch&gt; refspec一起使用时，它拒绝更新本地分支，&lt;lbranch&gt;除非&lt;rbranch&gt;它获取的远程分支是子孙的后代&lt;lbranch&gt;</span><br><span class="line">    -k, --keep                                     # 保持下载的包</span><br><span class="line">    --no-tags                                      # 默认情况下，指向从远程存储库下载的对象的标签将在本地获取并存储</span><br><span class="line">    -u, --update-head-ok                           # 默认情况下，git fetch拒绝更新与当前分支对应的头部</span><br><span class="line">    --upload-pack &lt;upload-pack&gt;                    # 当给定时，并且从git fetch-pack处理要从中获取的存储库，--exec=&lt;upload-pack&gt;将传递给该命令以指定在另一端运行的命令的非默认路径</span><br><span class="line">    --progress                                     # 当连接到终端时，默认情况下，标准错误流中会报告进度状态，除非指定-q</span><br><span class="line">    -4, --ipv4                                     # 仅使用IPv4地址，忽略IPv6地址</span><br><span class="line">    -6, --ipv6                                     # 仅使用IPv6地址，忽略IPv4地址</span><br><span class="line">    &lt;repository&gt;                                   # 作为提取或拉取操作源的“远程”存储库</span><br><span class="line">    &lt;refspec&gt;                                      # 指定要获取哪些引用以及哪些本地引用要更新</span><br></pre></td></tr></table></figure><h3 id="push-命令"><a href="#push-命令" class="headerlink" title="push 命令"></a>push 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git push [--all | --mirror | --tags] [--follow-tags] [--atomic] [-n | --dry-run] [--receive-pack=&lt;git-receive-pack&gt;]</span><br><span class="line">           [--repo=&lt;repository&gt;] [-f | --force] [-d | --delete] [--prune] [-v | --verbose]</span><br><span class="line">           [-u | --set-upstream] [--push-option=&lt;string&gt;]</span><br><span class="line">           [--[no-]signed|--signed=(true|false|if-asked)]</span><br><span class="line">           [--force-with-lease[=&lt;refname&gt;[:&lt;expect&gt;]]]</span><br><span class="line">           [--no-verify] [&lt;repository&gt; [&lt;refspec&gt;…]]</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    &lt;repository&gt;                                    # 作为推送操作目标的“远程”存储库</span><br><span class="line">    &lt;refspec&gt;…                                      # 用什么源对象指定要更新的目标引用</span><br><span class="line">    --all                                           # 推送所有分支（即参考下refs/heads/）; 不能与其他&lt;refspec&gt;一起使用</span><br><span class="line">    --prune                                         # 删除没有本地副本的远程分支</span><br><span class="line">    --mirror                                        # 代替命名每个裁判推的，指定了下的所有参考文献refs/（包括但不限于refs/heads/，refs/remotes/和refs/tags/）被镜像到远程存储库</span><br><span class="line">    -n, --dry-run                                   # 除了实际发送更新之外，请做其他事</span><br><span class="line">    --porcelain                                     # 生成机器可读的输出</span><br><span class="line">    --delete                                        # 所有列出的ref都从远程存储库中删除</span><br><span class="line">    --tags                                          # refs/tags除了在命令行中明确列出的refspecs之外，所有refs 都将被推送</span><br><span class="line">    --follow-tags                                   # 推送所有没有此选项时将被推送的引用，并且推送refs/tags远程引用中缺少的带注释的标签，但指向可从所推送的引用访问的提交标识</span><br><span class="line">    --[no-]signed, --signed=(true|false|if-asked)   # GPG-签署推送请求以更新接收端的refs，以便通过钩子检查和/或记录</span><br><span class="line">    --[no-]atomic                                   # 如果可用，请在远程端使用原子事务</span><br><span class="line">    -o &lt;option&gt;, --push-option=&lt;option&gt;             # 将给定的字符串传送给服务器，服务器将它们传递给预接收以及接收后挂接</span><br><span class="line">    --receive-pack=&lt;git-receive-pack&gt;, --exec=&lt;git-receive-pack&gt;          # 远程端上git-receive-pack程序的路径</span><br><span class="line">    --[no-]force-with-lease, --force-with-lease=&lt;refname&gt;,      </span><br><span class="line">    --force-with-lease=&lt;refname&gt;:&lt;expect&gt;                                 # 如果远程ref的当前值是期望值，则此选项将覆盖此限制</span><br><span class="line">    -f, --force                                                           # 通常，该命令拒绝更新远程ref，该远程ref不是用于覆盖它的本地ref的祖先</span><br><span class="line">    --repo=&lt;repository&gt;                                                   # 该选项等同于&lt;repository&gt;参数。如果两者都指定，则命令行参数优先</span><br><span class="line">    -u, --set-upstream                                                    # 对于最新或成功推送的每个分支，添加无参数git-pull [1]和其他命令使用的上游（跟踪）引用</span><br><span class="line">    --[no-]thin                                                           # 这些选项被传递给git-send-pack [1]</span><br><span class="line">    -q, --quiet                                                           # 抑制所有输出，包括更新的引用列表，除非发生错误</span><br><span class="line">    -v, --verbose                                                         # 运行详细</span><br><span class="line">    --progress                                                            # 当连接到终端时，默认情况下，标准错误流中会报告进度状态，除非指定-q</span><br><span class="line">    --no-recurse-submodules, --recurse-submodules=check|on-demand|only|no # 可用于所有子模块提交的修改被推到远程跟踪分支上</span><br><span class="line">    --[no-]verify                                                         # 切换预推钩。默认值：验证，使钩子有机会阻止推送</span><br><span class="line">    -4, --ipv4                                                            # 仅使用IPv4地址，忽略IPv6地址</span><br><span class="line">    -6, --ipv6                                                            # 仅使用IPv6地址，忽略IPv4地址</span><br></pre></td></tr></table></figure><h3 id="remote-命令"><a href="#remote-命令" class="headerlink" title="remote 命令"></a>remote 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git remote [-v | --verbose]</span><br><span class="line">    git remote add [-t &lt;branch&gt;] [-m &lt;master&gt;] [-f] [--[no-]tags] [--mirror=&lt;fetch|push&gt;] &lt;name&gt; &lt;url&gt;</span><br><span class="line">    git remote rename &lt;old&gt; &lt;new&gt;</span><br><span class="line">    git remote remove &lt;name&gt;</span><br><span class="line">    git remote set-head &lt;name&gt; (-a | --auto | -d | --delete | &lt;branch&gt;)</span><br><span class="line">    git remote set-branches [--add] &lt;name&gt; &lt;branch&gt;…</span><br><span class="line">    git remote get-url [--push] [--all] &lt;name&gt;</span><br><span class="line">    git remote set-url [--push] &lt;name&gt; &lt;newurl&gt; [&lt;oldurl&gt;]</span><br><span class="line">    git remote set-url --add [--push] &lt;name&gt; &lt;newurl&gt;</span><br><span class="line">    git remote set-url --delete [--push] &lt;name&gt; &lt;url&gt;</span><br><span class="line">    git remote [-v | --verbose] show [-n] &lt;name&gt;…</span><br><span class="line">    git remote prune [-n | --dry-run] &lt;name&gt;…</span><br><span class="line">    git remote [-v | --verbose] update [-p | --prune] [(&lt;group&gt; | &lt;remote&gt;)…]</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    -v, --verbose       # 稍微详细一点，并在名称后显示远程URL</span><br><span class="line">    add                 # 在&lt;url&gt;处添加一个名为&lt;名称&gt;的存储库</span><br><span class="line">    rename              # 将名为&lt;old&gt;的远程重命名为&lt;new&gt;。远程的所有远程跟踪分支和配置设置都会更新</span><br><span class="line">    rm,    remove       # 删除名为&lt;名称&gt;的远程。远程的所有远程跟踪分支和配置设置均被删除</span><br><span class="line">    set-head            # 设置或删除refs/remotes/&lt;name&gt;/HEAD指定远程的默认分支（即symbolic-ref的目标）</span><br><span class="line">    set-branches        # 更改已命名远程所跟踪分支的列表</span><br><span class="line">    get-url             # 检索远程的URL</span><br><span class="line">    set-url             # 更改远程的URL</span><br><span class="line">    show                # 给出关于远程&lt;名称&gt;的一些信息</span><br><span class="line">    prune               # 删除与&lt;名称&gt;关联的陈旧引用</span><br><span class="line">    update              # 按遥控器&lt;group&gt;的定义，获取存储库中一组指定遥控器的更新</span><br></pre></td></tr></table></figure><h3 id="submodule-命令"><a href="#submodule-命令" class="headerlink" title="submodule 命令"></a>submodule 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git submodule [--quiet] add [&lt;options&gt;] [--] &lt;repository&gt; [&lt;path&gt;]</span><br><span class="line">    git submodule [--quiet] status [--cached] [--recursive] [--] [&lt;path&gt;…]</span><br><span class="line">    git submodule [--quiet] init [--] [&lt;path&gt;…]</span><br><span class="line">    git submodule [--quiet] deinit [-f|--force] (--all|[--] &lt;path&gt;…)</span><br><span class="line">    git submodule [--quiet] update [&lt;options&gt;] [--] [&lt;path&gt;…]</span><br><span class="line">    git submodule [--quiet] summary [&lt;options&gt;] [--] [&lt;path&gt;…]</span><br><span class="line">    git submodule [--quiet] foreach [--recursive] &lt;command&gt;</span><br><span class="line">    git submodule [--quiet] sync [--recursive] [--] [&lt;path&gt;…]</span><br><span class="line">    git submodule [--quiet] absorbgitdirs [--] [&lt;path&gt;…]</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    -q, --quiet                # 只打印错误消息</span><br><span class="line">    --all                      # 该选项仅对deinit命令有效。取消注册工作树中的所有子模块</span><br><span class="line">    -b, --branch               # 将存储库的分支添加为子模块</span><br><span class="line">    -f, --force                # 该选项仅适用于添加，删除和更新命令。在运行add时，允许添加一个否则忽略的子模块路径。</span><br><span class="line">    --cached                   # 该选项仅对状态和汇总命令有效。些命令通常使用在子模块HEAD中找到的提交，但使用此选项时，将使用存储在索引中的提交。</span><br><span class="line">    --files                    # 该选项仅对汇总命令有效。当使用此选项时，此命令会将索引中的提交与子模块HEAD中的提交进行比较。</span><br><span class="line">    -n, --summary-limit        # 该选项仅对汇总命令有效。限制摘要大小（总共显示的提交数量）</span><br><span class="line">    --remote                   # 该选项仅对更新命令有效。使用子模块的远程跟踪分支的状态，而不是使用超级项目的已记录的SHA-1来更新子模块</span><br><span class="line">    -N, --no-fetch             # 该选项仅对更新命令有效。不要从远程站点获取新的对象。</span><br><span class="line">    --checkout                 # 该选项仅对更新命令有效。检查子模块中分离的HEAD上超级项目中记录的提交。</span><br><span class="line">    --merge                    # 该选项仅对更新命令有效。将超级项目中记录的提交合并到子模块的当前分支中。</span><br><span class="line">    --rebase                   # 该选项仅对更新命令有效。将当前分支重新映射到超级项目中记录的提交。</span><br><span class="line">    --init                     # 该选项仅对更新命令有效。在更新之前，初始化尚未调用“git子模块初始化”的所有子模块。</span><br><span class="line">    --name                     # 该选项仅对add命令有效。它将子模块的名称设置为给定字符串，而不是默认其路径。</span><br><span class="line">    --reference &lt;repository&gt;   # 该选项仅适用于添加和更新命令。这些命令有时需要克隆远程存储库。</span><br><span class="line">    --recursive                # 此选项仅适用于foreach，更新，状态和同步命令。递归地遍历子模块。</span><br><span class="line">    --depth                    # 该选项对添加和更新命令有效。创建一个 历史记录截断为指定修订版数的浅表副本。</span><br><span class="line">    --[no-]recommend-shallow   # 该选项仅对更新命令有效。默认情况下，子模块的初始克隆将使用submodule.&lt;name&gt;.shallow由.gitmodules文件提供的建议 。</span><br><span class="line">    -j &lt;n&gt;, --jobs &lt;n&gt;         # 该选项仅对更新命令有效。与多个作业并行克隆新子模块。默认为submodule.fetchJobs选项。</span><br><span class="line">    &lt;path&gt;…                    # 子模块的路径。指定时，将限制该命令仅对在指定路径中找到的子模块进行操作。</span><br></pre></td></tr></table></figure><h3 id="show-命令"><a href="#show-命令" class="headerlink" title="show 命令"></a>show 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git show [options] [&lt;object&gt;…]</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    &lt;object&gt;…                                           # 要显示的对象的名称（默认为HEAD）</span><br><span class="line">    --pretty[=&lt;format&gt;], --format=&lt;format&gt;              # 漂亮地打印在提交日志的内容在给定的格式</span><br><span class="line">    --abbrev-commit                                     # 不显示完整的40字节十六进制提交对象名称，只显示部分前缀</span><br><span class="line">    --no-abbrev-commit                                  # 显示完整的40字节十六进制提交对象名称</span><br><span class="line">    --oneline                                           # 这是一起使用的“--pretty = oneline --abbrev-commit”的缩写</span><br><span class="line">    --encoding=&lt;encoding&gt;                               # 提交对象在其编码头中记录用于日志消息的编码; 这个选项可以用来告诉命令在用户首选的编码中重新编写提交日志消息</span><br><span class="line">    --expand-tabs=&lt;n&gt;, --expand-tabs, --no-expand-tabs  # 在输出中显示日志消息之前，执行一个选项卡扩展（将每个选项卡用足够的空格替换，以填充日志消息中的倍数为&lt;n&gt;的下一个显示列）</span><br><span class="line">    --notes[=&lt;treeish&gt;]                                 # 在显示提交日志消息时，显示注释提交的注释（请参阅git-notes [1]）</span><br><span class="line">    --no-notes                                          # 不要显示笔记</span><br><span class="line">    --show-signature                                    # 通过签名传递gpg --verify并显示输出来检查签名提交对象的有效性</span><br></pre></td></tr></table></figure><h3 id="shortlog-命令"><a href="#shortlog-命令" class="headerlink" title="shortlog 命令"></a>shortlog 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git log --pretty=short | git shortlog [&lt;options&gt;]</span><br><span class="line">    git shortlog [&lt;options&gt;] [&lt;revision range&gt;] [[\--] &lt;path&gt;…]</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    -n, --numbered                         # 根据每个作者的提交数量而不是作者字母顺序对输出进行排序</span><br><span class="line">    -s, --summary                          # 禁止提交描述并仅提供提交计数摘要</span><br><span class="line">    -e, --email                            # 显示每位作者的电子邮件地址</span><br><span class="line">    --format[=&lt;format&gt;]                    # 使用一些其他信息来描述每个提交，而不是提交主题</span><br><span class="line">    -c, --committer                        # 收集并显示提交者身份而不是作者</span><br><span class="line">    -w[&lt;width&gt;[,&lt;indent1&gt;[,&lt;indent2&gt;]]]    # 通过包装每行的输入线来包装输出width</span><br><span class="line">    &lt;revision range&gt;                       # 仅显示指定修订范围内的提交</span><br><span class="line">    [\--] &lt;path&gt;…                          # 只考虑足以解释如何匹配指定路径的文件的提交</span><br></pre></td></tr></table></figure><h3 id="describe-命令"><a href="#describe-命令" class="headerlink" title="describe 命令"></a>describe 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git describe [--all] [--tags] [--contains] [--abbrev=&lt;n&gt;] [&lt;commit-ish&gt;…]</span><br><span class="line">    git describe [--all] [--tags] [--contains] [--abbrev=&lt;n&gt;] --dirty[=&lt;mark&gt;]</span><br><span class="line">    git describe &lt;blob&gt;</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    &lt;commit-ish&gt;…                        # 提交对象名称来描述。如果省略，则默认为HEAD</span><br><span class="line">    --dirty[=&lt;mark&gt;], --broken[=&lt;mark&gt;]  # 描述工作树的状态。当工作树与HEAD匹配时，输出与“git describe HEAD”相同</span><br><span class="line">    --all                                # 不要只使用带注释的标签，而应使用refs/名称空间中的任何参考</span><br><span class="line">    --tags                               # 不要只使用带注释的标签，而要使用refs/tags名称空间中的任何标签</span><br><span class="line">    --contains                           # 不是找到提交之前的标签，而是找到提交之后的标签，因此包含它。自动暗示 - 标签</span><br><span class="line">    --abbrev=&lt;n&gt;                         # 使用默认的7位十六进制数字作为缩写对象名称，而不是使用&lt;n&gt;数字或根据需要的数字来组成一个唯一的对象名称</span><br><span class="line">    --candidates=&lt;n&gt;                     # 而不是只考虑最近的10个标签作为描述输入提交的候选者，而是考虑到候选者</span><br><span class="line">    --exact-match                        # 只输出完全匹配（一个标签直接引用提供的提交）。这是--candidates = 0的同义词。</span><br><span class="line">    --debug                              # 精确地显示正在使用的搜索策略的信息以标准错误。标签名称仍将打印到标准输出。</span><br><span class="line">    --long                               # 即使与标签匹配，始终输出长格式（标签，提交数量和缩写提交名称）</span><br><span class="line">    --match &lt;pattern&gt;                    # 只考虑与给定glob(7)模式匹配的标签，不包括“refs/tags/”前缀</span><br><span class="line">    --exclude &lt;pattern&gt;                  # 不要考虑与给定glob(7)模式匹配的标签，不包括“refs/tags/”前缀</span><br><span class="line">    --always                             # 显示唯一缩写的提交对象作为后备</span><br><span class="line">    --first-parent                       # 在查看合并提交后，只跟踪第一个父提交</span><br></pre></td></tr></table></figure><h3 id="apply-命令"><a href="#apply-命令" class="headerlink" title="apply 命令"></a>apply 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git apply [--stat] [--numstat] [--summary] [--check] [--index] [--3way]</span><br><span class="line">          [--apply] [--no-add] [--build-fake-ancestor=&lt;file&gt;] [-R | --reverse]</span><br><span class="line">          [--allow-binary-replacement | --binary] [--reject] [-z]</span><br><span class="line">          [-p&lt;n&gt;] [-C&lt;n&gt;] [--inaccurate-eof] [--recount] [--cached]</span><br><span class="line">          [--ignore-space-change | --ignore-whitespace]</span><br><span class="line">          [--whitespace=(nowarn|warn|fix|error|error-all)]</span><br><span class="line">          [--exclude=&lt;path&gt;] [--include=&lt;path&gt;] [--directory=&lt;root&gt;]</span><br><span class="line">          [--verbose] [--unsafe-paths] [&lt;patch&gt;…]</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    &lt;patch&gt;…                                    # 从中读取补丁的文件。 -可用于从标准输入读取</span><br><span class="line">    --stat                                      # 输出diffstat代替输入补丁。关闭“适用”。</span><br><span class="line">    --numstat                                   # --stat与之类似，但显示十进制表示法中添加和删除的行数以及不带缩写的路径名，以使其更加机器友好</span><br><span class="line">    --summary                                   # 输出从git diff扩展头获取的信息的精简摘要，而不是应用该修补程序。关闭“适用”。</span><br><span class="line">    --check                                     # 而不是应用修补程序，查看修补程序是否适用于当前工作树和/或索引文件并检测错误。关闭“适用”。</span><br><span class="line">    --index                                     # 何时--check生效或应用修补程序，请确保修补程序适用于当前索引文件记录的内容</span><br><span class="line">    --cached                                    # 在不接触工作树的情况下应用补丁</span><br><span class="line">    -3, --3way                                  # 如果修补程序不能干净地应用，如果修补程序记录它应该应用的斑点的标识，则回退到3路合并，</span><br><span class="line">                                                  并且我们在本地可以使用这些斑点，可能会在工作树中的文件中留下冲突标记供用户解决</span><br><span class="line">    --build-fake-ancestor=&lt;file&gt;                # 较新的git diff输出已经 为每个blob 嵌入了索引信息，以帮助识别修补程序适用的原始版本</span><br><span class="line">    -R, --reverse                               # 反向应用补丁</span><br><span class="line">    --reject                                    # 对于原子性，git默认应用会失败整个修补程序，并且在某些不适用的情况下不会触及工作树</span><br><span class="line">    -z                                          # 何时--numstat给出，请勿使用路径名，但使用NUL终止的机器可读格式</span><br><span class="line">    -p&lt;n&gt;                                       # 从传统差异路径中删除&lt;n&gt;引导斜杠。默认值是1。</span><br><span class="line">    -C&lt;n&gt;                                       # 确保每次更改之前和之后至少有&lt;n&gt;行周围环境匹配</span><br><span class="line">    --unidiff-zero                              # 默认情况下，git apply期望所应用的修补程序是一个至少包含一行上下文的统一差异</span><br><span class="line">    --apply                                     # 如果您使用上面标记为“关闭应用 ”的任何选项 ，则git应用读取并输出所请求的信息，而不实际应用修补程序</span><br><span class="line">    --no-add                                    # 应用修补程序时，忽略修补程序添加的内容</span><br><span class="line">    --allow-binary-replacement, --binary        # 从历史上看，我们不允许在未经用户明确许可的情况下应用二进制补丁，并且此标志是实现此目的的方式</span><br><span class="line">    --exclude=&lt;path-pattern&gt;                    # 不要将更改应用于与给定路径模式匹配的文件</span><br><span class="line">    --include=&lt;path-pattern&gt;                    # 将更改应用于与给定路径模式匹配的文件</span><br><span class="line">    --ignore-space-change, --ignore-whitespace  # 应用修补程序时，如果需要，请忽略上下文行中空白的更改</span><br><span class="line">    --whitespace=&lt;action&gt;                       # 应用修补程序时，检测具有空白错误的新行或修改过的行</span><br><span class="line">    --inaccurate-eof                            # 在某些情况下，diff的某些版本不能在文件末尾正确检测到缺失的新行</span><br><span class="line">    -v, --verbose                               # 将进展报告给stderr。默认情况下，只会打印有关当前正在应用的修补程序的消息</span><br><span class="line">    --recount                                   # 不要相信大块头中的行数，但通过检查补丁来推断它们</span><br><span class="line">    --directory=&lt;root&gt;                          # 将&lt;root&gt;加入所有文件名。如果还传递了“-p”参数，则在应用新根之前应用该参数</span><br><span class="line">    --unsafe-paths                              # 默认情况下，影响工作区域以外的补丁被拒绝为错误</span><br></pre></td></tr></table></figure><h3 id="cherry-pick-命令"><a href="#cherry-pick-命令" class="headerlink" title="cherry-pick 命令"></a>cherry-pick 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git cherry-pick [--edit] [-n] [-m parent-number] [-s] [-x] [--ff]</span><br><span class="line">              [-S[&lt;keyid&gt;]] &lt;commit&gt;…</span><br><span class="line">    git cherry-pick --continue</span><br><span class="line">    git cherry-pick --quit</span><br><span class="line">    git cherry-pick --abort</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    &lt;commit&gt;…                                    # 要获得一个更完整的拼写方法列表</span><br><span class="line">    -e, --edit                                   # 使用这个选项，git cherry-pick会让你在提交之前编辑提交信息</span><br><span class="line">    -x                                           # 在记录提交时，附加一条线，该行表示“(cherry从提交…)”到原始的提交消息，以指示该更改是从哪个提交的</span><br><span class="line">    -r                                           # 它曾经是命令默认做-x 了上面描述，并且-r是禁用它</span><br><span class="line">    -m parent-number, --mainline parent-number   # 通常你不能选择合并，因为你不知道合并的哪一边应该被认为是主线</span><br><span class="line">    -n, --no-commit                              # 通常，该命令会自动创建一系列提交</span><br><span class="line">    -s, --signoff                                # 在提交消息的末尾添加Signed-off-by行</span><br><span class="line">    -S[&lt;keyid&gt;], --gpg-sign[=&lt;keyid&gt;]            # GPG标志提交</span><br><span class="line">    --ff                                         # 如果当前的HEAD与樱桃挑选的提交的父对象相同，则将执行快速转发此提交</span><br><span class="line">    --allow-empty                                # 默认情况下，樱桃选择一个空的提交将失败，表明需要显式调用git commit --allow-empty</span><br><span class="line">    --allow-empty-message                        # 默认情况下，用空信息挑选提交将失败</span><br><span class="line">    --keep-redundant-commits                     # 如果在当前的历史中，如果提交的是cherry选择了重复提交，那么它将变为空的</span><br><span class="line">    --strategy=&lt;strategy&gt;                        # 使用给定的合并策略。只能使用一次</span><br><span class="line">    -X&lt;option&gt;, --strategy-option=&lt;option&gt;       # 将合并策略特定选项传递给合并策略</span><br><span class="line">    --continue                                   # 继续使用.git/sequencer中的信息进行操作</span><br><span class="line">    --quit                                       # 忘记当前正在进行的操作</span><br><span class="line">    --abort                                      # 取消操作并返回到预序列状态</span><br></pre></td></tr></table></figure><h3 id="rebase-命令"><a href="#rebase-命令" class="headerlink" title="rebase 命令"></a>rebase 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git rebase [-i | --interactive] [options] [--exec &lt;cmd&gt;] [--onto &lt;newbase&gt;]</span><br><span class="line">        [&lt;upstream&gt; [&lt;branch&gt;]]</span><br><span class="line">    git rebase [-i | --interactive] [options] [--exec &lt;cmd&gt;] [--onto &lt;newbase&gt;]</span><br><span class="line">        --root [&lt;branch&gt;]</span><br><span class="line">    git rebase --continue | --skip | --abort | --quit | --edit-todo | --show-current-patch  </span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    --onto &lt;newbase&gt;                      # 创建新提交的起点</span><br><span class="line">    &lt;upstream&gt;                            # 上游分支进行比较。可以是任何有效的提交，而不仅仅是现有的分支名称。默认为当前分支的配置上游</span><br><span class="line">    &lt;branch&gt;                              # 工作分部; 默认为HEAD</span><br><span class="line">    --continue                            # 解决了合并冲突后重新启动重新绑定过程</span><br><span class="line">    --abort                               # 中止rebase操作并将HEAD重置为原始分支</span><br><span class="line">    --quit                                # 放弃rebase操作，但HEAD不会重置回原始分支。索引和工作树也因此保持不变</span><br><span class="line">    --keep-empty                          # 在结果中保留不改变父项的任何提交</span><br><span class="line">    --allow-empty-message                 # 默认情况下，重新绑定提交空信息将失败</span><br><span class="line">    --skip                                # 通过跳过当前补丁重新启动重新绑定过程</span><br><span class="line">    --edit-todo                           # 在交互式重新绑定期间编辑待办事项列表</span><br><span class="line">    --show-current-patch                  # 在交互式底图中显示当前的补丁，或者由于冲突而停止底牌。这相当于 git show REBASE_HEAD</span><br><span class="line">    -m, --merge                           # 使用合并策略来重新分配</span><br><span class="line">    -s &lt;strategy&gt;, --strategy=&lt;strategy&gt;  # 使用给定的合并策略</span><br><span class="line">    -X &lt;strategy-option&gt;, --strategy-option=&lt;strategy-option&gt;    # 将&lt;strategy-option&gt;传递给合并策略</span><br><span class="line">    -S[&lt;keyid&gt;], --gpg-sign[=&lt;keyid&gt;]               # GPG标志提交</span><br><span class="line">    -q, --quiet                                     # 安静。意味着 - 无统计</span><br><span class="line">    -v, --verbose                                   # 详细。意味着--stat</span><br><span class="line">    -stat                                           # 显示自上次rebase以来上游变化的差异。diffstat也由配置选项rebase.stat控制</span><br><span class="line">    -n, --no-stat                                   # 不要将diffstat显示为rebase过程的一部分</span><br><span class="line">    --no-verify                                     # 此选项绕过预先重新绑定钩子</span><br><span class="line">    --verify                                        # 允许预重贴挂钩运行，这是默认设置</span><br><span class="line">    -C&lt;n&gt;                                           # 确保每次更改之前和之后至少有&lt;n&gt;行周围环境匹配</span><br><span class="line">    -f, --force-rebase                              # 即使当前分支是最新的，并且--force没有做任何事情的命令也不会返回，强制重新分配</span><br><span class="line">    --fork-point, --no-fork-point                   # 计算&lt;branch&gt;引入的提交时，使用reflog可以在&lt;upstream&gt;和&lt;branch&gt;之间找到更好的共同祖先</span><br><span class="line">    --ignore-whitespace, --whitespace=&lt;option&gt;      # 这些标志被传递给应用该补丁的git apply程序。与--interactive选项不兼容</span><br><span class="line">    --committer-date-is-author-date, --ignore-date  # 这些标志被传递给git am以轻松地改变重新发布的提交的日期。与--interactive选项不兼容。</span><br><span class="line">    --signoff                                       # 这个标志被传递给git am签署所有重新提交的提交。与--interactive选项不兼容。</span><br><span class="line">    -i, --interactive                               # 列出将要重新分配的提交列表。让用户在重新绑定之前编辑该列表</span><br><span class="line">    -p, --preserve-merges                           # 重新创建合并提交，而不是通过重播合并提交引入的提交来平坦化历史</span><br><span class="line">    -x &lt;cmd&gt;, --exec &lt;cmd&gt;                          # 在每行在最终历史记录中创建提交后附加“exec &lt;cmd&gt;”。&lt;cmd&gt;将被解释为一个或多个shell命令</span><br><span class="line">    --root                                          # 重新规划从&lt;branch&gt;可访问的所有提交，而不是用&lt;upstream&gt;限制它们</span><br><span class="line">    --autosquash, --no-autosquash                   # 当提交日志消息以“squash！...”（或“fixup！...”）开始时，并且在待办事项列表中已经有一个与之相匹配的提交时...，</span><br><span class="line">                                                      会自动修改rebase -i的待办事项列表，以便被标记为压扁的提交在提交被修改后立即出现，并将被提交的提交的操作从（或）pick改为</span><br><span class="line">    --autostash, --no-autostash                     # 在操作开始之前自动创建临时存储条目，并在操作结束后应用它</span><br><span class="line">    --no-ff                                         # 与-interactive，cherry-pick所有基于rebased的提交，而不是快速转发到未更改的</span><br></pre></td></tr></table></figure><h3 id="revert-命令"><a href="#revert-命令" class="headerlink" title="revert 命令"></a>revert 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git revert [--[no-]edit] [-n] [-m parent-number] [-s] [-S[&lt;keyid&gt;]] &lt;commit&gt;…</span><br><span class="line">    git revert --continue</span><br><span class="line">    git revert --quit</span><br><span class="line">    git revert --abort</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    &lt;commit&gt;…                                    # 承诺恢复。有关拼写提交名称的更完整列表</span><br><span class="line">    -e, --edit                                   # 使用这个选项，git revert可以让你在提交恢复之前编辑提交信息</span><br><span class="line">    -m parent-number, --mainline parent-number   # 通常您无法恢复合并，因为您不知道合并的哪一方应被视为主线</span><br><span class="line">    --no-edit                                    # 使用这个选项，git revert不会启动提交消息编辑器</span><br><span class="line">    -n, --no-commit                              # 通常，该命令会自动创建一些提交日志消息，提交哪些提交已恢复</span><br><span class="line">    -S[&lt;keyid&gt;], --gpg-sign[=&lt;keyid&gt;]            # GPG标志提交。该keyid参数是可选的，并且默认为提交者身份; 如果指定，它必须粘贴到选项没有空格。</span><br><span class="line">    -s, --signoff                                # 在提交消息的末尾添加Signed-off-by行</span><br><span class="line">    --strategy=&lt;strategy&gt;                        # 使用给定的合并策略</span><br><span class="line">    -X&lt;option&gt;, --strategy-option=&lt;option&gt;       # 将合并策略特定选项传递给合并策略</span><br><span class="line">    --continue                                   # 继续使用.git/sequencer中的信息进行操作</span><br><span class="line">    --quit                                       # 忘记当前正在进行的操作。可用于在失败的cherry-pick或还原后清除排序器状态</span><br><span class="line">    --abort                                      # 取消操作并返回到预序列状态</span><br></pre></td></tr></table></figure><h3 id="bisect-命令"><a href="#bisect-命令" class="headerlink" title="bisect 命令"></a>bisect 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git bisect &lt;subcommand&gt; &lt;options&gt;</span><br><span class="line">    git bisect start [--term-&#123;old,good&#125;=&lt;term&gt; --term-&#123;new,bad&#125;=&lt;term&gt;]</span><br><span class="line">        [--no-checkout] [&lt;bad&gt; [&lt;good&gt;...]] [--] [&lt;paths&gt;...]</span><br><span class="line">    git bisect (bad|new|&lt;term-new&gt;) [&lt;rev&gt;]</span><br><span class="line">    git bisect (good|old|&lt;term-old&gt;) [&lt;rev&gt;...]</span><br><span class="line">    git bisect terms [--term-good | --term-bad]</span><br><span class="line">    git bisect skip [(&lt;rev&gt;|&lt;range&gt;)...]</span><br><span class="line">    git bisect reset [&lt;commit&gt;]</span><br><span class="line">    git bisect (visualize|view)</span><br><span class="line">    git bisect replay &lt;logfile&gt;</span><br><span class="line">    git bisect log</span><br><span class="line">    git bisect run &lt;cmd&gt;...</span><br><span class="line">    git bisect help</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    --no-checkout                      # 在平分过程的每次迭代中，不要签出新的工作树</span><br></pre></td></tr></table></figure><h3 id="blame-命令"><a href="#blame-命令" class="headerlink" title="blame 命令"></a>blame 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git blame [-c] [-b] [-l] [--root] [-t] [-f] [-n] [-s] [-e] [-p] [-w] [--incremental]</span><br><span class="line">            [-L &lt;range&gt;] [-S &lt;revs-file&gt;] [-M] [-C] [-C] [-C] [--since=&lt;date&gt;]</span><br><span class="line">            [--progress] [--abbrev=&lt;n&gt;] [&lt;rev&gt; | --contents &lt;file&gt; | --reverse &lt;rev&gt;..&lt;rev&gt;]</span><br><span class="line">            [--] &lt;file&gt;</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    -b                                  # 显示边界提交的空白SHA-1。这也可以通过blame.blankboundary配置选项来控制</span><br><span class="line">    --root                              # 不要将根提交视为边界。这也可以通过blame.showRoot配置选项来控制</span><br><span class="line">    --show-stats                        # 在责备输出结尾包含更多统计数据</span><br><span class="line">    -L &lt;start&gt;, &lt;end&gt;, -L :&lt;funcname&gt;   # 仅注释给定的线范围。可以多次指定。重叠范围是允许的</span><br><span class="line">    -l                                  # 显示长时间（默认：关闭）</span><br><span class="line">    -t                                  # 显示原始时间戳（默认值：关闭）</span><br><span class="line">    -S &lt;revs-file&gt;                      # 使用revs-file中的修订版而不是调用git-rev-list [1]</span><br><span class="line">    --reverse &lt;rev&gt;..&lt;rev&gt;              # 前进而不是后退。它不是显示一行出现的修订，而是显示一行存在的最后修订</span><br><span class="line">    -p, --porcelain                     # 以设计用于机器消耗的格式显示</span><br><span class="line">    --line-porcelain                    # 显示porcelain格式，但输出每行的提交信息，而不仅仅是第一次引用提交</span><br><span class="line">    --incremental                       # 以设计用于机器消耗的格式逐步显示结果</span><br><span class="line">    --encoding=&lt;encoding&gt;               # 指定用于输出作者姓名和提交摘要的编码。将其设置为none使责备输出未转换的数据</span><br><span class="line">    --contents &lt;file&gt;                   # 当未指定&lt;rev&gt;时，该命令注释从工作树副本向后开始的更改</span><br><span class="line">    --date &lt;format&gt;                     # 指定用于输出日期的格式</span><br><span class="line">    --[no-]progress                     # 当连接到终端时，默认情况下标准错误流会报告进度状态</span><br><span class="line">    -M[&lt;num&gt;]                           # 检测文件中移动或复制的行</span><br><span class="line">    -C[&lt;num&gt;]                           # 除了-M检测从同一提交中修改的其他文件移动或复制的行之外</span><br><span class="line">    -h                                  # 显示帮助信息</span><br><span class="line">    -c                                  # 使用与git-annotate [1]相同的输出模式（默认值：关闭）</span><br><span class="line">    --score-debug                       # 包含与文件之间的行移动有关的调试信息和文件中移动的行</span><br><span class="line">    -f, --show-name                     # 在原始提交中显示文件名</span><br><span class="line">    -n, --show-number                   # 在原始提交中显示行号（默认值：关闭）</span><br><span class="line">    -s                                  # 从输出中抑制作者姓名和时间戳</span><br><span class="line">    -e, --show-email                    # 显示作者电子邮件而不是作者姓名（默认：关闭）</span><br><span class="line">    -w                                  # 在比较父版本和子版本时，忽略空白，并找出这些行来自哪里</span><br><span class="line">    --abbrev=&lt;n&gt;                        # 使用默认的7 + 1十六进制数字作为缩写对象名称，而不是使用&lt;n&gt; +1个数字</span><br></pre></td></tr></table></figure><h3 id="grep-命令"><a href="#grep-命令" class="headerlink" title="grep 命令"></a>grep 命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">语法：</span><br><span class="line">    git grep [-a | --text] [-I] [--textconv] [-i | --ignore-case] [-w | --word-regexp]</span><br><span class="line">           [-v | --invert-match] [-h|-H] [--full-name]</span><br><span class="line">           [-E | --extended-regexp] [-G | --basic-regexp]</span><br><span class="line">           [-P | --perl-regexp]</span><br><span class="line">           [-F | --fixed-strings] [-n | --line-number]</span><br><span class="line">           [-l | --files-with-matches] [-L | --files-without-match]</span><br><span class="line">           [(-O | --open-files-in-pager) [&lt;pager&gt;]]</span><br><span class="line">           [-z | --null]</span><br><span class="line">           [-c | --count] [--all-match] [-q | --quiet]</span><br><span class="line">           [--max-depth &lt;depth&gt;]</span><br><span class="line">           [--color[=&lt;when&gt;] | --no-color]</span><br><span class="line">           [--break] [--heading] [-p | --show-function]</span><br><span class="line">           [-A &lt;post-context&gt;] [-B &lt;pre-context&gt;] [-C &lt;context&gt;]</span><br><span class="line">           [-W | --function-context]</span><br><span class="line">           [--threads &lt;num&gt;]</span><br><span class="line">           [-f &lt;file&gt;] [-e] &lt;pattern&gt;</span><br><span class="line">           [--and|--or|--not|(|)|-e &lt;pattern&gt;…]</span><br><span class="line">           [--recurse-submodules] [--parent-basename &lt;basename&gt;]</span><br><span class="line">           [ [--[no-]exclude-standard] [--cached | --no-index | --untracked] | &lt;tree&gt;…]</span><br><span class="line">           [--] [&lt;pathspec&gt;…]</span><br><span class="line"></span><br><span class="line">选项：</span><br><span class="line">    --cached                                     # 在平分过程的每次迭代中，不要签出新的工作树</span><br><span class="line">    --no-index                                   # 搜索当前目录中不受Git管理的文件</span><br><span class="line">    --untracked                                  # 除了在工作树中跟踪文件中搜索外，还可以在未跟踪文件中搜索</span><br><span class="line">    --no-exclude-standard                        # 通过不尊重.gitignore 机制来搜索被忽略的文件。只用于--untracked</span><br><span class="line">    --exclude-standard                           # 不要关注通过.gitignore 机制指定的忽略文件，仅在使用当前目录搜索文件时有用--no-index</span><br><span class="line">    --recurse-submodules                         # 递归搜索已在存储库中初始化并检出的每个子模块</span><br><span class="line">    -a, --text                                   # 像处理文本一样处理二进制文件</span><br><span class="line">    --textconv                                   # 尊重textconv过滤器设置</span><br><span class="line">    --no-textconv                                # 不要兑现textconv过滤器设置。这是默认设置</span><br><span class="line">    -i, --ignore-case                            # 忽略模式和文件之间的大小写区别</span><br><span class="line">    -I                                           # 不匹配二进制文件中的模式</span><br><span class="line">    --max-depth &lt;depth&gt;                          # 对于命令行中给出的每个&lt;pathspec&gt;，最多下降&lt;depth&gt;级别的目录</span><br><span class="line">    -w, --word-regexp                            # 仅在字边界处匹配模式</span><br><span class="line">    -v, --invert-match                           # 选择不匹配的行</span><br><span class="line">    -h, -H                                       # 默认情况下，该命令显示每个匹配的文件名</span><br><span class="line">    --full-name                                  # 从子目录运行时，该命令通常会输出相对于当前目录的路径    </span><br><span class="line">    -E, --extended-regexp, -G, --basic-regexp    # 对于模式使用POSIX扩展/基本正则表达式。默认是使用基本的正则表达式</span><br><span class="line">    -P, --perl-regexp                            # 为模式使用Perl兼容的正则表达式</span><br><span class="line">    -F, --fixed-strings                          # 使用固定字符串模式</span><br><span class="line">    -n, --line-number                            # 在行号前加上匹配的行</span><br><span class="line">    -l, --files-with-matches, --name-only, -L, --files-without-match    # 不显示每条匹配的行，只显示包含（或不包含）匹配的文件的名称</span><br><span class="line">    -O[&lt;pager&gt;], --open-files-in-pager[=&lt;pager&gt;] # 打开寻呼机中的匹配文件（不是grep的输出）</span><br><span class="line">    -z, --null                                   # 输出\ 0而不是通常跟在文件名后的字符    </span><br><span class="line">    -c, --count                                  # 显示匹配的行数，而不是显示每条匹配的行</span><br><span class="line">    --color[=&lt;when&gt;]                             # 显示彩色的比赛。该值必须始终（默认），永不，或自动</span><br><span class="line">    --no-color                                   # 关闭匹配突出显示，即使配置文件将默认设置为彩色输出。和...一样--color=never</span><br><span class="line">    --break                                      # 在不同文件的匹配之间打印空行</span><br><span class="line">    --heading                                    # 在文件的上方显示文件名，而不是在每个显示的行的开头</span><br><span class="line">    -p, --show-function                          # 显示包含匹配函数名称的上一行，除非匹配行是函数名称本身    </span><br><span class="line">    -&lt;num&gt;, -C &lt;num&gt;, --context &lt;num&gt;            # 显示&lt;num&gt;前导和尾部线条，并放置包含--连续的匹配组之间的线条</span><br><span class="line">    -A &lt;num&gt;, --after-context &lt;num&gt;              # 显示&lt;num&gt;尾随线，并--在连续的匹配组之间放置一行 </span><br><span class="line">    -B &lt;num&gt;, --before-context &lt;num&gt;             # 显示&lt;num&gt;引出线，并--在相邻的匹配组之间放置一行 </span><br><span class="line">    -W, --function-context                       # 显示前一行中包含函数名称的周围文本，直到下一个函数名称之前的文本，从而有效地显示找到匹配的整个函数</span><br><span class="line">    --threads &lt;num&gt;                              # 要使用的grep工作线程数</span><br><span class="line">    -f &lt;file&gt;                                    # 从&lt;file&gt;中读取模式，每行一个</span><br><span class="line">    -e                                           # 下一个参数是模式</span><br><span class="line">    --and, --or, --not, ( … )                    # 指定如何使用布尔表达式组合多个模式</span><br><span class="line">    --all-match                                  # 将多个模式表达式结合使用时--or，会指定此标志以将匹配限制为具有与其匹配的所有行的文件</span><br><span class="line">    -q, --quiet                                  # 不输出匹配的行</span><br><span class="line">    &lt;tree&gt;…                                      # 而不是在工作树中搜索跟踪文件，搜索给定树中的斑点</span><br><span class="line">    --                                           # 表示选项结束; 其余的参数是&lt;pathspec&gt;限制器</span><br><span class="line">    &lt;pathspec&gt;…                                  # 如果给定，则将搜索限制为至少匹配一个模式的路径</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原文：&lt;a href=&quot;https://www.cnblogs.com/Small-music/p/9075681.html#git&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/Small-music/p/
      
    
    </summary>
    
    
      <category term="git" scheme="http://zero-mk.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>about_pwn_assembly</title>
    <link href="http://zero-mk.github.io/2019/01/18/about-pwn-assembly/"/>
    <id>http://zero-mk.github.io/2019/01/18/about-pwn-assembly/</id>
    <published>2019-01-18T08:22:35.000Z</published>
    <updated>2019-01-23T15:58:44.941Z</updated>
    
    <content type="html"><![CDATA[<p>关于学pwn的汇编基础,其实我之前汇编基础不是很好,勉强能读懂一点,很多时候还是很乱,在这里分享一下我的学习方法吧</p><p> IDA逆向分析出的源码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">gets(&amp;s);</span><br></pre></td></tr></table></figure><p>汇编代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">80484f9:83 ec 34             sub    $0x34,%esp</span><br><span class="line">80484fc:a1 44 a0 04 08       mov    0x804a044,%eax</span><br><span class="line">8048501:6a 00                push   $0x0</span><br><span class="line">8048503:6a 02                push   $0x2</span><br><span class="line">8048505:6a 00                push   $0x0</span><br><span class="line">8048507:50                   push   %eax</span><br><span class="line">8048508:e8 c3 fe ff ff       call   80483d0 &lt;setvbuf@plt&gt;</span><br><span class="line">804850d:83 c4 10             add    $0x10,%esp</span><br><span class="line">8048510:a1 40 a0 04 08       mov    0x804a040,%eax</span><br><span class="line">8048515:6a 00                push   $0x0</span><br><span class="line">8048517:6a 01                push   $0x1</span><br><span class="line">8048519:6a 00                push   $0x0</span><br><span class="line">804851b:50                   push   %eax</span><br><span class="line">804851c:e8 af fe ff ff       call   80483d0 &lt;setvbuf@plt&gt;</span><br><span class="line">8048521:83 c4 10             add    $0x10,%esp</span><br><span class="line">8048524:83 ec 0c             sub    $0xc,%esp</span><br><span class="line">8048527:8d 45 cc             lea    -0x34(%ebp),%eax</span><br><span class="line">804852a:50                   push   %eax</span><br><span class="line">804852b:e8 60 fe ff ff       call   8048390 &lt;gets@plt&gt;</span><br><span class="line">8048530:83 c4 10             add    $0x10,%esp</span><br></pre></td></tr></table></figure><p> <img src="/2019/01/18/about-pwn-assembly/assembly.PNG" alt=""></p><p>pwn的主要工作是在Linux上完成的,但是我们又要用在IDA,又要在Linux下调试,来回切换很麻烦,所以,你要是能读懂汇编,那问题就简单了,直接objdump -a,看一下汇编,OK</p><p>回正题</p><p>观察上面我给的图,我画线链接的就是汇编与源码</p><p>拿第一句<code>setvbuf(stdout,0,2,0);</code>来说,不难看出</p><p>setvbuf函数的三个参数分别是stdout,0,2,0</p><p>栈是先进后出的,所以,会先push第四个参数(0)到stack上,依次是第三个(2),第二个(0),第一个(stdout)</p><p>对应的汇编代码是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">80484f9:83 ec 34             sub    $0x34,%esp #在栈上开出一个大小为0x34的空间</span><br><span class="line">80484fc:a1 44 a0 04 08       mov    0x804a044,%eax </span><br><span class="line">8048501:6a 00                push   $0x0 #往stack上放0</span><br><span class="line">8048503:6a 02                push   $0x2 #往stack上放2</span><br><span class="line">8048505:6a 00                push   $0x0 #往stack上放0</span><br><span class="line">8048507:50                   push   %eax #stdout</span><br><span class="line">8048508:e8 c3 fe ff ff       call   80483d0 &lt;setvbuf@plt&gt; #参数压好了就是call函数了</span><br></pre></td></tr></table></figure><p>IDA的分析:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.text:080484FC ; 5:   setvbuf(stdout, 0, 2, 0);</span><br><span class="line">.text:080484FC                 mov     eax, ds:stdout@@GLIBC_2_0</span><br><span class="line">.text:08048501                 push    0               ; n</span><br><span class="line">.text:08048503                 push    2               ; modes</span><br><span class="line">.text:08048505                 push    0               ; buf</span><br><span class="line">.text:08048507                 push    eax             ; stream</span><br><span class="line">.text:08048508                 call    _setvbuf</span><br></pre></td></tr></table></figure><p>每一次写题目都这样对照,你的读汇编能力就很快得到提升</p><p>这里注意的是,x86的传参是直接把参数push到stack上然后call函数,但是x64却不是,x64 的传参是</p><p>当参数少于7个时， 参数从左到右放入寄存器: rdi, rsi, rdx, rcx, r8, r9</p><p>参数个数大于 7 个的时候(拿F函数来举例)<br>F(a, b, c, d, e, f, g, h);<br>a-&gt;%rdi, b-&gt;%rsi, c-&gt;%rdx, d-&gt;%rcx, e-&gt;%r8, f-&gt;%r9<br>h-&gt;8(%esp)<br>g-&gt;(%esp)<br>call F</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于学pwn的汇编基础,其实我之前汇编基础不是很好,勉强能读懂一点,很多时候还是很乱,在这里分享一下我的学习方法吧&lt;/p&gt;
&lt;p&gt; IDA逆向分析出的源码&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
    
      <category term="ctf-pwn assembly" scheme="http://zero-mk.github.io/tags/ctf-pwn-assembly/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://zero-mk.github.io/2019/01/17/%E6%B1%87%E7%BC%96%E8%8B%B1%E6%96%87%E5%85%A8%E7%A7%B0/"/>
    <id>http://zero-mk.github.io/2019/01/17/汇编英文全称/</id>
    <published>2019-01-17T14:57:09.021Z</published>
    <updated>2019-01-17T15:37:58.093Z</updated>
    
    <content type="html"><![CDATA[<p>汇编指令的英文全称<br>一、数据传送指令<br>1.通用数据传送指令. </p><p>MOV—-&gt; move<br>MOVSX—-&gt;extended move with sign data<br>MOVZX—-&gt;extended move with zero data<br>PUSH—-&gt;push<br>POP—-&gt;pop<br>PUSHA—-&gt;push all<br>POPA—-&gt;pop all<br>PUSHAD—-&gt;push all data<br>POPAD—-&gt;pop all data<br>BSWAP—-&gt;byte swap<br>XCHG—-&gt;exchange<br>CMPXCHG—-&gt;compare and change<br>XADD—-&gt;exchange and add<br>XLAT—-&gt;translate<br>2.输入输出端口传送指令.<br>IN—-&gt;input<br>OUT—-&gt;output<br>3.目的地址传送指令.<br>LEA—-&gt;load effective address<br>LDS—-&gt;load DS<br>LES—-&gt;load ES<br>LFS—-&gt;load FS<br>LGS—-&gt;load GS<br>LSS—-&gt;load SS<br>4.标志传送指令.<br>LAHF—-&gt;load AH from flag<br>SAHF—-&gt;save AH to flag<br>PUSHF—-&gt;push flag<br>POPF—-&gt;pop flag<br>PUSHD—-&gt;push dflag<br>POPD—-&gt;pop dflag<br>二、算术运算指令<br>ADD—-&gt;add<br>ADC—-&gt;add with carry<br>INC—-&gt;increase 1<br>AAA—-&gt;ascii add with adjust<br>DAA—-&gt;decimal add with adjust<br>SUB—-&gt;substract<br>SBB—-&gt;substract with borrow<br>DEC—-&gt;decrease 1<br>NEC—-&gt;negative<br>CMP—-&gt;compare<br>AAS—-&gt;ascii adjust on substract<br>DAS—-&gt;decimal adjust on substract<br>MUL—-&gt;multiplication<br>IMUL—-&gt;integer multiplication<br>AAM—-&gt;ascii adjust on multiplication<br>DIV—-&gt;divide<br>IDIV—-&gt;integer divide<br>AAD—-&gt;ascii adjust on divide<br>CBW—-&gt;change byte to word<br>CWD—-&gt;change word to double word<br>CWDE—-&gt;change word to double word with sign to EAX<br>CDQ—-&gt;change double word to quadrate word<br>三、逻辑运算指令<br>AND—-&gt;and<br>OR—-&gt;or<br>XOR—-&gt;xor   Exclusive OR<br>NOT—-&gt;not<br>TEST—-&gt;test<br>SHL—-&gt;shift left<br>SAL—-&gt;arithmatic shift left算术<br>SHR—-&gt;shift right<br>SAR—-&gt;arithmatic shift right<br>ROL—-&gt;rotate left<br>ROR—-&gt;rotate right<br>RCL—-&gt;rotate left with carry<br>RCR—-&gt;rotate right with carry<br>四、串指令<br>MOVS—-&gt;move string<br>CMPS—-&gt;compare string<br>SCAS—-&gt;scan string<br>LODS—-&gt;load string<br>STOS—-&gt;store string<br>REP—-&gt;repeat<br>REPE—-&gt;repeat when equal<br>REPZ—-&gt;repeat when zero flag<br>REPNE—-&gt;repeat when not equal<br>REPNZ—-&gt;repeat when zero flag<br>REPC—-&gt;repeat when carry flag<br>REPNC—-&gt;repeat when not carry flag<br>五、程序转移指令<br>1&gt;无条件转移指令(长转移)<br>JMP—-&gt;jump<br>CALL—-&gt;call<br>RET—-&gt;return<br>RETF—-&gt;return far<br>2&gt;条件转移指令(短转移,-128到+127的距离内)<br>JAE—-&gt;jump when above or equal<br>JNB—-&gt;jump when not below<br>JB—-&gt;jump when below<br>JNAE—-&gt;jump when not above or equal<br>JBE—-&gt;jump when below or equal<br>JNA—-&gt;jump when not above<br>JG—-&gt;jump when greater<br>JNLE—-&gt;jump when not less or equal<br>JGE—-&gt;jump when greater or equal<br>JNL—-&gt;jump when not less<br>JL—-&gt;jump when less<br>JNGE—-&gt;jump when not greater or equal<br>JLE—-&gt;jump when less or equal<br>JNG—-&gt;jump when not greater<br>JE—-&gt;jump when equal<br>JZ—-&gt;jump when has zero flag<br>JNE—-&gt;jump when not equal<br>JNZ—-&gt;jump when not has zero flag<br>JC—-&gt;jump when has carry flag<br>JNC—-&gt;jump when not has carry flag<br>JNO—-&gt;jump when not has overflow flag<br>JNP—-&gt;jump when not has parity flag<br>JPO—-&gt;jump when parity flag is odd<br>JNS—-&gt;jump when not has sign flag<br>JO—-&gt;jump when has overflow flag<br>JP—-&gt;jump when has parity flag<br>JPE—-&gt;jump when parity flag is even<br>JS—-&gt;jump when has sign flag<br>3&gt;循环控制指令(短转移)<br>LOOP—-&gt;loop<br>LOOPE—-&gt;loop equal<br>LOOPZ—-&gt;loop zero<br>LOOPNE—-&gt;loop not equal<br>LOOPNZ—-&gt;loop not zero<br>JCXZ—-&gt;jump when CX is zero<br>JECXZ—-&gt;jump when ECX is zero<br>4&gt;中断指令<br>INT—-&gt;interrupt<br>INTO—-&gt;overflow interrupt<br>IRET—-&gt;interrupt return<br>5&gt;处理器控制指令<br>HLT—-&gt;halt<br>WAIT—-&gt;wait<br>ESC—-&gt;escape<br>LOCK—-&gt;lock<br>NOP—-&gt;no operation<br>STC—-&gt;set carry<br>CLC—-&gt;clear carry<br>CMC—-&gt;carry make change<br>STD—-&gt;set direction<br>CLD—-&gt;clear direction<br>STI—-&gt;set interrupt<br>CLI—-&gt;clear interrupt<br>六、伪指令<br>DW—-&gt;definw word<br>PROC—-&gt;procedure<br>ENDP—-&gt;end of procedure<br>SEGMENT—-&gt;segment<br>ASSUME—-&gt;assume<br>ENDS—-&gt;end segment<br>END—-&gt;end</p><p>Move)<br>MOVC (Move Code)<br>MOVX (Move External)<br>XCH     (Exchange)<br>PUSH<br>POP<br>AJMP   (Absolute Jump)<br>LJMP    (Long Jump)<br>SJMP    (Short Jump)<br>JMP      (Jump Indirect)<br>JZ         (Jump Zero)<br>JNZ      (Jump Not Zero)<br>JC         (Jump if Carry)<br>JNC      (Jump if Not Carry)<br>JB         (Jump if Bit is set)<br>JNB      (Jump if Not Bit)<br>JBC       (If Bit is set and Clear Bit)<br>CJNE    (Compare and Jump if Not Equal)<br>DJNZ    (Decrement and Jump if Not Zero)<br>ACALL (Absolute Call)<br>LCALL  (Long Call)<br>RET       (Return)<br>NOP      (No Operation)<br>ADD<br>ADDC  (Add with Carry)<br>SUBB   (Substract with Borrow)<br>MUL     (Multiply)<br>DIV       (Divide)<br>INC      (Increment)<br>DEC     (Decrement)<br>ANL     (Logical AND)<br>ORL     (Logical OR)<br>XRL     (Logical Exclusive OR)<br>CPL     (Complement)<br>CLR     (Clear)<br>SEBT   (Set Bit)<br>RL        (Rotate Left)<br>RR        (Rotate Right)<br>RLC     (Rotate Left throught the Carry flag)<br>RRC     (Rotate Right throught the Carry flag)<br>XCHD<br>SWAP<br>DA       (Decimal Adjust)</p><p>ORG    (Origin)<br>DB       (Define Byte)<br>DW      (Define Word)<br>EQU     (Equal)<br>DATA<br>XDATA (External Data)<br>BIT<br>END</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;汇编指令的英文全称&lt;br&gt;一、数据传送指令&lt;br&gt;1.通用数据传送指令. &lt;/p&gt;
&lt;p&gt;MOV—-&amp;gt; move&lt;br&gt;MOVSX—-&amp;gt;extended move with sign data&lt;br&gt;MOVZX—-&amp;gt;extended move with z
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>docker</title>
    <link href="http://zero-mk.github.io/2019/01/15/docker/"/>
    <id>http://zero-mk.github.io/2019/01/15/docker/</id>
    <published>2019-01-14T19:39:17.000Z</published>
    <updated>2019-01-19T14:29:26.138Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x0前言"><a href="#0x0前言" class="headerlink" title="0x0前言"></a>0x0前言</h2><p>前言</p><p>前几天上了黑苹果,想着直接用docker布置个pwn解题环境就好了,不想再用VM装kali了,于是就开始了折腾docker,忙完,写写总结</p><p>关于docker的学习,我是看 <a href="https://yeasy.gitbooks.io/docker_practice/content/" target="_blank" rel="noopener">Docker —— 从入门到实践</a> 很好的一本书,也不多,看完你对docker的理解会提升一个等级,当然,如果你是docker高手当我没说</p><h2 id="0x1安装docker"><a href="#0x1安装docker" class="headerlink" title="0x1安装docker"></a>0x1安装docker</h2><h4 id="1-用brew安装"><a href="#1-用brew安装" class="headerlink" title="1.用brew安装"></a>1.用brew安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install docker</span><br></pre></td></tr></table></figure><h4 id="2-自己上官网下载二进制文件"><a href="#2-自己上官网下载二进制文件" class="headerlink" title="2.自己上官网下载二进制文件"></a>2.自己上官网下载二进制文件</h4><p><a href="https://hub.docker.com/editions/community/docker-ce-desktop-mac" target="_blank" rel="noopener">get docker for Mac</a></p><h2 id="0x2部署环境"><a href="#0x2部署环境" class="headerlink" title="0x2部署环境"></a>0x2部署环境</h2><p>我参考了<a href="https://github.com/skysider/pwndocker" target="_blank" rel="noopener">pwndocker</a>自己瞎改了,用的是kali的镜像</p><p>我的垃圾Dockerfile:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> kalilinux/kali-linux-docker</span><br><span class="line"><span class="keyword">MAINTAINER</span> l0ser &lt;<span class="number">1565328054</span>@qq.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#关于镜像源,没必要改,因为,kali源会根据你的IP重定向源</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"deb http://http.kali.org/kali kali-rolling main contrib non-free"</span> &gt; /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">"deb-src http://http.kali.org/kali kali-rolling main contrib non-free"</span> &gt;&gt; /etc/apt/sources.list</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN dpkg --add-architecture i386 &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt-get -y update &amp;&amp; \</span></span><br><span class="line"><span class="bash">    apt install -y \</span></span><br><span class="line"><span class="bash">    libc6:i386 \</span></span><br><span class="line"><span class="bash">    libc6-dbg:i386 \</span></span><br><span class="line"><span class="bash">    libc6-dbg \</span></span><br><span class="line"><span class="bash">    lib32stdc++6 \</span></span><br><span class="line"><span class="bash">    g++-multilib \</span></span><br><span class="line"><span class="bash">    cmake \</span></span><br><span class="line"><span class="bash">    ipython \</span></span><br><span class="line"><span class="bash">    vim \</span></span><br><span class="line"><span class="bash">    net-tools \</span></span><br><span class="line"><span class="bash">    libffi-dev \</span></span><br><span class="line"><span class="bash">    libssl-dev \</span></span><br><span class="line"><span class="bash">    python-dev \</span></span><br><span class="line"><span class="bash">    python3-dev \</span></span><br><span class="line"><span class="bash">    python-pip \</span></span><br><span class="line"><span class="bash">    python3-pip \</span></span><br><span class="line"><span class="bash">    build-essential \</span></span><br><span class="line"><span class="bash">    ruby \</span></span><br><span class="line"><span class="bash">    tmux \</span></span><br><span class="line"><span class="bash">    strace \</span></span><br><span class="line"><span class="bash">    ltrace \</span></span><br><span class="line"><span class="bash">    nasm \</span></span><br><span class="line"><span class="bash">    wget \</span></span><br><span class="line"><span class="bash">    radare2 \</span></span><br><span class="line"><span class="bash">    gdb \</span></span><br><span class="line"><span class="bash">    gdb-multiarch \</span></span><br><span class="line"><span class="bash">    netcat \</span></span><br><span class="line"><span class="bash">    socat \</span></span><br><span class="line"><span class="bash">    git \</span></span><br><span class="line"><span class="bash">    patchelf \</span></span><br><span class="line"><span class="bash">    gawk \</span></span><br><span class="line"><span class="bash">    file \</span></span><br><span class="line"><span class="bash">    binwalk \</span></span><br><span class="line"><span class="bash">    ctags \</span></span><br><span class="line"><span class="bash">    silversearcher-ag \</span></span><br><span class="line"><span class="bash">    bison \</span></span><br><span class="line"><span class="bash">    metasploit-framework \</span></span><br><span class="line"><span class="bash">    nmap \</span></span><br><span class="line"><span class="bash">    sqlmap \</span></span><br><span class="line"><span class="bash">    peepdf --fix-missing</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN pip install --upgrade pip &amp;&amp; \</span></span><br><span class="line"><span class="bash">    pip install --upgrade setuptools &amp;&amp; \</span></span><br><span class="line"><span class="bash">    pip install --no-cache-dir \</span></span><br><span class="line"><span class="bash">    ROPgadget \</span></span><br><span class="line"><span class="bash">    pwntools \</span></span><br><span class="line"><span class="bash">    zio \</span></span><br><span class="line"><span class="bash">    lief \</span></span><br><span class="line"><span class="bash">    smmap2 \</span></span><br><span class="line"><span class="bash">    z3-solver \</span></span><br><span class="line"><span class="bash">    apscheduler \</span></span><br><span class="line"><span class="bash">    flake8 \</span></span><br><span class="line"><span class="bash">    yapf &amp;&amp; \</span></span><br><span class="line"><span class="bash">    pip install --upgrade pwntools</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN pip install --upgrade pip3 &amp;&amp; \</span></span><br><span class="line"><span class="bash">    pip3 install --no-cache-dir \</span></span><br><span class="line"><span class="bash">    ropper \</span></span><br><span class="line"><span class="bash">    unicorn \</span></span><br><span class="line"><span class="bash">    capstone \</span></span><br><span class="line"><span class="bash">    angr </span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN <span class="built_in">cd</span> <span class="variable">$HOME</span>/ctf-tools &amp;&amp; git <span class="built_in">clone</span> https://github.com/longld/peda.git ~/peda &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">echo</span> <span class="string">"source /root/ctf-tools/peda/peda.py"</span> &gt;&gt; ~/.gdbinit</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment">#配置vim自动代码补全</span></span></span><br><span class="line"><span class="bash">RUN git <span class="built_in">clone</span> https://github.com/wklken/k-vim.git &amp;&amp; \</span></span><br><span class="line"><span class="bash">    <span class="built_in">cd</span> k-vim &amp;&amp; sh -x install.sh</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">ENV DEBIAN_FRONTEND noninteractive</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">RUN <span class="built_in">set</span> -x \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get -yqq update \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get -yqq dist-upgrade \</span></span><br><span class="line"><span class="bash">    &amp;&amp; apt-get clean</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">CMD [<span class="string">"bash"</span>]</span></span><br></pre></td></tr></table></figure><p>用法:复制,建立一个文件夹再在里面新建一个Dockerfile文件,把上面的代码粘贴进去</p><p>在文件夹目录下运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dcoker build -t pwn .</span><br></pre></td></tr></table></figure><p>等构建完成</p><h2 id="0x3docker常用操作"><a href="#0x3docker常用操作" class="headerlink" title="0x3docker常用操作"></a>0x3docker常用操作</h2><p>查看镜像(<code>docker images</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@VM-0-17-ubuntu:~# docker images</span><br><span class="line">REPOSITORY                    TAG        IMAGE ID            CREATED             SIZE</span><br><span class="line">kalilinux/kali-linux-docker   latest     f26f3ae90aee        2 months ago        1.57GB</span><br></pre></td></tr></table></figure><p>现在我们要运行kalilinux/kali-linux-docker这个镜像可以(docker run -it [REPOSITORY/IMAGE ID] /bin/bash)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@VM-0-17-ubuntu:~# docker run -it kalilinux/kali-linux-docker /bin/bash</span><br><span class="line">root@0d6c7f4d1060:/#</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@VM-0-17-ubuntu:~# docker run -it f26f3ae90aee /bin/bash</span><br><span class="line">root@0d6c7f4d1060:/#</span><br></pre></td></tr></table></figure><p><code>docker run -it xxxxx /bin/bash</code>的意思是运行xxxxx容器的/bin/bash,也就是shell,就可以进行交互</p><p>如果运行交互的时候要后台运行回到主机可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">按下 ctrl + p + q就可以后台运行</span><br></pre></td></tr></table></figure><p>后台运行的容器要怎么重新回到里面,我的做法是(<code>docker attach aca5c32a9cec</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@aca5c32a9cec:/# </span><br><span class="line">root@VM-0-17-ubuntu:~# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE    COMMAND   CREATED          STATUS   PORTS      NAMES</span><br><span class="line">aca5c32a9cec   f26f     &quot;bash&quot;    24 seconds ago     Up                thirsty_mccarthy</span><br><span class="line"></span><br><span class="line">root@VM-0-17-ubuntu:~# docker attach aca5c32a9cec</span><br><span class="line"></span><br><span class="line">root@aca5c32a9cec:/#</span><br></pre></td></tr></table></figure><p>很多时候我们需要修该容器的文件内容,但是每次exit容器后你所做的更改是不会保存的所以(<code>docker commit [CONTAINER ID]</code>)这样操作的话会生成另一个容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root@aca5c32a9cec:/# read escape sequence</span><br><span class="line">root@VM-0-17-ubuntu:~# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE    COMMAND   CREATED          STATUS   PORTS      NAMES</span><br><span class="line">aca5c32a9cec   f26f     &quot;bash&quot;    24 seconds ago     Up                thirsty_mccarthy </span><br><span class="line"></span><br><span class="line">root@VM-0-17-ubuntu:~# docker commit aca5c32a9cec</span><br><span class="line">sha256:1ba3be34808075ed328fd5932026872a6bba41b801886eb57d40cfc98705d913</span><br><span class="line"></span><br><span class="line">root@VM-0-17-ubuntu:~# docker images</span><br><span class="line">REPOSITORY                   TAG         IMAGE ID            CREATED             SIZE</span><br><span class="line">&lt;none&gt;                       &lt;none&gt;      1ba3be348080        12 seconds ago      1.57GB</span><br><span class="line">kalilinux/kali-linux-docker  latest       f26f3ae90aee       2 months ago        1.57GB</span><br><span class="line"></span><br><span class="line">root@VM-0-17-ubuntu:~#</span><br></pre></td></tr></table></figure><p>我平常是(<code>docker commit [CONTAINER ID]原容器REPOSITORY</code>)这样就不会生成新容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@aca5c32a9cec:/# read escape sequence</span><br><span class="line">root@VM-0-17-ubuntu:~# docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE    COMMAND   CREATED          STATUS   PORTS      NAMES</span><br><span class="line">aca5c32a9cec   f26f     &quot;bash&quot;    24 seconds ago     Up                thirsty_mccarthy </span><br><span class="line"></span><br><span class="line">root@VM-0-17-ubuntu:~# docker commit aca5c32a9cec</span><br><span class="line">sha256:1ba3be34808075ed328fd5932026872a6bba41b801886eb57d40cfc98705d913</span><br><span class="line"></span><br><span class="line">root@VM-0-17-ubuntu:~# docker images</span><br><span class="line">REPOSITORY                   TAG         IMAGE ID            CREATED             SIZE </span><br><span class="line">kalilinux/kali-linux-docker  latest       f26f3ae90aee       12 seconds ago      1.57GB</span><br><span class="line"></span><br><span class="line">root@VM-0-17-ubuntu:~#</span><br></pre></td></tr></table></figure><p>暂时写到这吧,凌晨3点了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x0前言&quot;&gt;&lt;a href=&quot;#0x0前言&quot; class=&quot;headerlink&quot; title=&quot;0x0前言&quot;&gt;&lt;/a&gt;0x0前言&lt;/h2&gt;&lt;p&gt;前言&lt;/p&gt;
&lt;p&gt;前几天上了黑苹果,想着直接用docker布置个pwn解题环境就好了,不想再用VM装kali了,于
      
    
    </summary>
    
    
      <category term="dcoker" scheme="http://zero-mk.github.io/tags/dcoker/"/>
    
  </entry>
  
  <entry>
    <title>写写关于我折腾Mac</title>
    <link href="http://zero-mk.github.io/2019/01/13/my-Mac-config/"/>
    <id>http://zero-mk.github.io/2019/01/13/my-Mac-config/</id>
    <published>2019-01-13T05:19:12.000Z</published>
    <updated>2019-01-13T09:06:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>写写关于我(瞎)折腾Mac</p><h3 id="0x1-安装包管理"><a href="#0x1-安装包管理" class="headerlink" title="0x1.安装包管理"></a>0x1.安装包管理</h3><p>当然，装好系统后第一件事当然是装包管理，我装的是<a href="https://brew.sh/" target="_blank" rel="noopener">brew</a>，一句安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><p>什么？装完了不会用？自己看看<a href="https://docs.brew.sh/" target="_blank" rel="noopener">brew文档</a><br>关于brew遇到<a href="https://gist.github.com/irazasyed/7732946" target="_blank" rel="noopener">Permissions Denied</a>问题的时候，自己点击看看Issues上他们提供的方法，我是直接<br>    sudo chown -R $(whoami) $(brew –prefix)/*</p><h3 id="0x2-安装docker"><a href="#0x2-安装docker" class="headerlink" title="0x2.安装docker"></a>0x2.安装docker</h3><h4 id="1-用brew安装"><a href="#1-用brew安装" class="headerlink" title="1.用brew安装"></a>1.用brew安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew cask install docker</span><br></pre></td></tr></table></figure><h4 id="2-自己上官网下载二进制文件"><a href="#2-自己上官网下载二进制文件" class="headerlink" title="2.自己上官网下载二进制文件"></a>2.自己上官网下载二进制文件</h4><p><a href="https://hub.docker.com/editions/community/docker-ce-desktop-mac" target="_blank" rel="noopener">get docker for Mac</a></p><h3 id="0x3-美化shell（zsh和fish自己选一个）"><a href="#0x3-美化shell（zsh和fish自己选一个）" class="headerlink" title="0x3.美化shell（zsh和fish自己选一个）"></a>0x3.美化shell（zsh和fish自己选一个）</h3><p>官方终端比Linux的终端好看一点，但是，配色好像不符合胃口，自己搞吧</p><h4 id="1-oh-my-zsh"><a href="#1-oh-my-zsh" class="headerlink" title="1.oh-my-zsh"></a>1.<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a></h4><p>官方提供了wget和curl两种获取安装</p><h5 id="1-curl"><a href="#1-curl" class="headerlink" title="1.curl"></a>1.curl</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><h5 id="2-wget"><a href="#2-wget" class="headerlink" title="2.wget"></a>2.wget</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure><p>装完后自己换配色方案：<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="noopener">theme</a><br>让zsh命令补全，有个插件：<a href="http://mimosa-pudica.net/zsh-incremental.html" target="_blank" rel="noopener">incr</a>，我的操作是<a href="http://mimosa-pudica.net/src/incr-0.2.zsh" target="_blank" rel="noopener">下载</a>6，然后<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> incr*.zsh</span><br></pre></td></tr></table></figure></p><h4 id="2-fish-shell"><a href="#2-fish-shell" class="headerlink" title="2.fish shell"></a>2.fish shell</h4><p>这个装个<a href="https://github.com/oh-my-fish/oh-my-fish" target="_blank" rel="noopener">on-my-fish</a>,同样一句<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://get.oh-my.fish | fish</span><br><span class="line">omf <span class="built_in">help</span></span><br></pre></td></tr></table></figure></p><p>关于主题配色: <a href="https://github.com/oh-my-fish/oh-my-fish/blob/master/docs/Themes.md" target="_blank" rel="noopener">themes</a><br>中文文档: <a href="https://github.com/oh-my-fish/oh-my-fish/tree/master/docs/zh-CN" target="_blank" rel="noopener">docs</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写写关于我(瞎)折腾Mac&lt;/p&gt;
&lt;h3 id=&quot;0x1-安装包管理&quot;&gt;&lt;a href=&quot;#0x1-安装包管理&quot; class=&quot;headerlink&quot; title=&quot;0x1.安装包管理&quot;&gt;&lt;/a&gt;0x1.安装包管理&lt;/h3&gt;&lt;p&gt;当然，装好系统后第一件事当然是装包管理，我
      
    
    </summary>
    
    
      <category term="Mac" scheme="http://zero-mk.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>汇编速查</title>
    <link href="http://zero-mk.github.io/2019/01/12/%E6%B1%87%E7%BC%96%E9%80%9F%E6%9F%A5%E8%A1%A8/"/>
    <id>http://zero-mk.github.io/2019/01/12/汇编速查表/</id>
    <published>2019-01-12T05:19:12.000Z</published>
    <updated>2019-01-24T08:04:28.918Z</updated>
    
    <content type="html"><![CDATA[<pre><code>指令  功能AAA 调整加AAD 调整除AAM 调整乘AAS 调整减ADC 进位加ADD 加AND 与ARPL    调整优先级BOUND   检查数组BSF 位右扫描BSR 位左扫描BSWAP   交换字节BT  位测试BTC 位测试求反BTR 位测试清零BTS 位测试置一CALL    过程调用CBW 转换字节CDQ 转换双字CLC 进位清零CLD 方向清零CLI 中断清零CLTS    任务清除CMC 进位求反CMOVA   高于传送CMOVB   低于传送CMOVE   相等传送CMOVG   大于传送CMOVL   小于传送CMOVNA  不高于传送CMOVNB  不低于传送CMOVNE  不等传送CMOVNG  不大于传送CMOVNL  不小于传送CMOVNO  不溢出传送CMOVNP  非奇偶传送CMOVNS  非负传送CMOVO   溢出传送CMOVP   奇偶传送CMOVS   负号传送CMP 比较CMPSB   比较字节串CMPSD   比较双字串CMPSW   比较字串CMPXCHG 比较交换CMPXCHG486  比较交换486CMPXCHG8B   比较交换8字节CPUID   CPU标识CWD 转换字CWDE    扩展字DAA 调整加十DAS 调整减十DEC 减一DIV 除ENTER   建立堆栈帧HLT 停IDIV    符号整除IMUL    符号乘法IN  端口输入INC 加一INSB    端口输入字节串INSD    端口输入双字串INSW    端口输入字串JA  高于跳转JB  低于跳转JBE 不高于跳转JCXZ    计数一六零跳转JE  相等跳转JECXZ   计数三二零跳转JG  大于跳转JL  小于跳转JMP 跳转JMPE    跳转扩展JNB 不低于跳转JNE 不等跳转JNG 不大于跳转JNL 不小于跳转JNO 不溢出跳转JNP 非奇偶跳转JNS 非负跳转JO  溢出跳转JP  奇偶跳转JS  负号跳转LAHF    加载标志低八LAR 加载访问权限LDS 加载数据段LEA 加载有效地址LEAVE   清除过程堆栈LES 加载附加段LFS 加载标志段LGDT    加载全局描述符LGS 加载全局段LIDT    加载中断描述符LMSW    加载状态字LOADALL 加载所有LOADALL286  加载所有286LOCK    锁LODSB   加载源变址字节串LODSD   加载源变址双字串LODSW   加载源变址字串LOOP    计数循环LOOPE   相等循环LOOPNE  不等循环LOOPNZ  非零循环LOOPZ   为零循环LSL 加载段界限LSS 加载堆栈段LTR 加载任务MONITOR 监视MOV 传送MOVSB   传送字节串MOVSD   传送双字串MOVSW   传送字串MOVSX   符号传送MOVZX   零传送MUL 乘MWAIT   NEG 求补NOP 空NOT 非OR  或OUT 端口输出OUTSB   端口输出字节串OUTSD   端口输出双字串OUTSW   端口输出字串POP 出栈POPA    全部出栈POPF    标志出栈PUSH    压栈PUSHA   全部压栈PUSHF   标志压栈RCL 进位循环左移RCR 进位循环右移RDMSR   读专用模式RDPMC   读执行监视计数RDSHR   RDTSC   读时间戳计数REP 重复REPE    相等重复REPNE   不等重复RET 过程返回RETF    远过程返回RETN    近过程返回ROL 循环左移ROR 循环右移RSM 恢复系统管理SAHF    恢复标志低八SAL 算术左移SALC    SAR 算术右移SBB 借位减SCASB   扫描字节串SCASD   扫描双字串SCASW   扫描字串SETA    高于置位SETB    低于置位SETE    相等置位SETG    大于置位SETL    小于置位SETNA   不高于置位SETNB   不低于置位SETNE   不等置位SETNG   不大于置位SETNL   不小于置位SETNO   不溢出置位SETNP   非奇偶置位SETNS   非负置位SETO    溢出置位SETP    奇偶置位SETS    负号置位SGDT    保存全局描述符SHL 逻辑左移SHLD    双精度左移SHR 逻辑右移SHRD    双精度右移SIDT    保存中断描述符SLDT    保存局部描述符SMI SMINT   SMINTOLD    SMSW    保存状态字STC 进位设置STD 方向设置STI 中断设置STOSB   保存字节串STOSD   保存双字串STOSW   保存字串STR 保存任务SUB 减SYSCALL 系统调用SYSENTER    系统进入SYSEXIT 系统退出SYSRET  系统返回TEST    数测试UD0 未定义指令0UD1 未定义指令1UD2 未定义指令2UMOV    VERW    校验写WAIT    等WBINVD  回写无效高速缓存WRMSR   写专用模式WRSHR   XADD    交换加XBTS    XCHG    交换XLAT    换码XOR 异或XSTORE  EMMS    媒体空MMX状态F2XM1   浮点栈顶绝对值FADD    浮点加FADDP   浮点加出栈FBLD    浮点加载十数FBSTP   浮点保存十数出栈FCHS    浮点正负求反FCLEX   浮点检查错误清除FCMOVB  浮点低于传送FCMOVBE 浮点不高于传送FCMOVE  浮点相等传送FCMOVNB 浮点不低于传送FCMOVNBE    浮点高于传送FCMOVNE 浮点不等传送FCMOVNU 浮点有序传送FCMOVU  浮点无序传送FCOM    浮点比较FCOMI   浮点比较加载标志FCOMIP  浮点比较加载标志出栈FCOMP   浮点比较出栈FCOMPP  浮点比较出栈二FCOS    浮点余弦FDECSTP 浮点栈针减一FDISI   浮点检查禁止中断FDIV    浮点除FDIVP   浮点除出栈FDIVR   浮点反除FDIVRP  浮点反除出栈FENI    浮点检查禁止中断二FFREE   浮点释放FFREEP  浮点释放出栈FIADD   浮点加整数FICOM   浮点比较整数FICOMP  浮点比较整数出栈FIDIV   浮点除整数FIDIVR  浮点反除FILD    浮点加载整数FIMUL   浮点乘整数FINCSTP 浮点栈针加一FINIT   浮点检查初始化FIST    浮点保存整数FISTP   浮点保存整数出栈FISTTP  FISUB   浮点减整数FISUBR  浮点反减整数FLD 浮点加载数FLD1    浮点加载一FLDCW   浮点加载控制器FLDENV  浮点加载环境FLDL2E  浮点加载L2EFLDL2T  浮点加载L2TFLDLG2  浮点加载LG2FLDLN2  浮点加载LN2FLDPI   浮点加载PIFLDZ    浮点加载零FMUL    浮点乘FMULP   浮点乘出栈FNCLEX  浮点不检查错误清除FNDISI  浮点不检查禁止中断FNENI   浮点不检查禁止中断二FNINIT  浮点不检查初始化FNOP    浮点空FNSAVE  浮点不检查保存状态FNSTCW  浮点不检查保存控制器FNSTENV 浮点不检查保存环境FNSTSW  浮点不检查保存状态器FPATAN  浮点部分反正切FPREM   浮点部分余数FPREM1  浮点部分余数二FPTAN   浮点部分正切FRNDINT 浮点舍入求整FRSTOR  浮点恢复状态FSAVE   浮点检查保存状态FSCALE  浮点比例运算FSETPM  浮点设置保护FSIN    浮点正弦FSINCOS 浮点正余弦FSQRT   浮点平方根FST 浮点保存FSTCW   浮点检查保存控制器FSTENV  浮点检查保存环境FSTP    浮点保存出栈FSTSW   浮点检查保存状态器FSUB    浮点减FSUBP   浮点减出栈FSUBR   浮点反减FSUBRP  浮点反减出栈FTST    浮点比零FUCOM   浮点无序比较FUCOMI  浮点反比加载标志FUCOMIP 浮点反比加载标志出栈FUCOMP  浮点无序比较出栈FUCOMPP 浮点无序比较出栈二FWAIT   浮点等FXAM    浮点检查FXCH    浮点交换FXTRACT 浮点分解FYL2X   浮点求L2XFYL2XP1 浮点求L2XP1MOVED   媒体双字传送MOVEQ   媒体四字传送PACKSSDW    媒体符号双字压缩PACKSSWB    媒体符号字压缩PACKUSWB    媒体无符号字压缩PADDB   媒体截断字节加PADDD   媒体截断双字加PADDSB  媒体符号饱和字节加PADDSIW PADDSW  媒体符号饱和字加PADDUSB 媒体无符号饱和字节加PADDUSW 媒体无符号饱和字加PADDW   媒体截断字加PAND    媒体与PANDN   媒体与非PAVEB   PCMPEQB 媒体字节比等PCMPEQD 媒体双字比等PCMPEQW 媒体字比等PCMPGTB 媒体字节比大PCMPGTD 媒体双字比大PCMPGTW 媒体字比大PDISTIB PMACHRIW    PMADDWD PMAGW   PMULHRIW    PMULHRWC    PMULHW  PMVGEZB PMVLZB  PMVNZB  PMVZB   POR 媒体或PSLLD   媒体双字左移PSLLQ   媒体四字左移PSLLW   媒体字左移PSRAD   媒体双字算术右移PSRAW   媒体字算术右移PSRLD   媒体双字右移PSRLQ   媒体四字右移PSRLW   媒体字右移PSUBB   媒体截断字节减PSUBSB  媒体符号饱和字节减PSUBSIW PSUBSW  媒体符号饱和字减PSUBUSB 媒体无符号饱和字节减PSUBUSW 媒体无符号饱和字减PSUBW   媒体截断字减PUNPCKHBW   媒体字节高位解压PUNPCKHDQ   媒体双字高位解压PUNPCKHWD   媒体字高位解压PUNPCKLBW   媒体字节低位解压PUNPCKLDQ   媒体双字低位解压PUNPCKLWD   媒体字低位解压</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;指令  功能
AAA 调整加
AAD 调整除
AAM 调整乘
AAS 调整减
ADC 进位加
ADD 加
AND 与
ARPL    调整优先级
BOUND   检查数组
BSF 位右扫描
BSR 位左扫描
BSWAP   交换字节
BT  位测试
BTC 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>机械革命z2黑苹果</title>
    <link href="http://zero-mk.github.io/2019/01/12/Mac-os/"/>
    <id>http://zero-mk.github.io/2019/01/12/Mac-os/</id>
    <published>2019-01-11T16:45:29.000Z</published>
    <updated>2019-01-13T05:19:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>这两天pwn关于heap的那部分看吐了，就折腾一下我这破电脑装个黑苹果</p><p>配置表：<br>电脑：机械革命 深海幽灵Z2<br>CPU：i7-8750h(2.2GHz)<br>内建GPU：Intel核芯显卡<br>显示芯片：GTX1050Ti<br>显存容量：独立4GB<br>显存类型：GDDR5</p><p>其实也不难，我用的<a href="https://blog.daliansky.net/" target="_blank" rel="noopener">黑小兵</a>的<a href="https://blog.daliansky.net/macOS-Mojave-10.14.2-18C54-official-version-with-Clover-4792-original-image.html" target="_blank" rel="noopener">【黑果小兵】macOS Mojave 10.14.2 18C54 正式版 with Clover 4792原版镜像</a><br>教程和EFI在群里，就不搬出来了（防止版权纠纷），进不去还是怎么的私信我<br><img src="/2019/01/12/Mac-os/qq.PNG" alt=""><br><img src="/2019/01/12/Mac-os/file.PNG" alt=""><br>大概的步骤：<br>下好镜像：<a href="https://mirrors.dtops.cc/iso/MacOS/daliansky_macos/" target="_blank" rel="noopener">dmg</a><br>U盘烧录：我用的是TransMac（这一步要注意把U盘格式化成Mac formost）然后烧录就好<br>ESP分区操作：先挂载ESP分区，把下载好的EFI解压放进去<br>安装：装系统正常流程<br>装完后重启，真正的折腾才刚刚开始，开始驱动什么的各种麻烦折腾（好好享受）</p><p>注意：Mac无法直接读写ntfs盘，需要借助一个小工具（Tuxera Disk Manager）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这两天pwn关于heap的那部分看吐了，就折腾一下我这破电脑装个黑苹果&lt;/p&gt;
&lt;p&gt;配置表：&lt;br&gt;电脑：机械革命 深海幽灵Z2&lt;br&gt;CPU：i7-8750h(2.2GHz)&lt;br&gt;内建GPU：Intel核芯显卡&lt;br&gt;显示芯片：GTX1050Ti&lt;br&gt;显存容量：独立
      
    
    </summary>
    
    
      <category term="Mac" scheme="http://zero-mk.github.io/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>安装Linux实体机的各种坑</title>
    <link href="http://zero-mk.github.io/2019/01/08/install-Linux/"/>
    <id>http://zero-mk.github.io/2019/01/08/install-Linux/</id>
    <published>2019-01-08T10:19:46.000Z</published>
    <updated>2019-01-12T12:35:28.931Z</updated>
    
    <content type="html"><![CDATA[<p>这几天折腾kali,ubutu,parrot实体机遇到各种坑,记录一下</p><p>我这破电脑之前实体机死活不成.昨天我找到解决方法了</p><h1 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu:"></a>Ubuntu:</h1><p>出现Ubuntu的选择画面时按 e 进入编辑界面.在 <code>quite splash</code> 后面输入 <code>acpi=off</code> </p><p>安装完成开机装显卡驱动,解决问题,步骤:</p><h2 id="查看显卡信息"><a href="#查看显卡信息" class="headerlink" title="查看显卡信息:"></a>查看显卡信息:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ubuntu-drivers devices</span><br><span class="line"></span><br><span class="line">vendor   : NVIDIA Corporation</span><br><span class="line">modalias : xxxxxxxxxxxxxxxxxxx</span><br><span class="line">driver   : nvidia-xxx - distro non-free recommended <span class="comment">#注意这一行的nvidia-xxx(xxx是三个数字),例如:nvidia-390,那么下面安装驱动那一步就是sudo apt install nvidia-390</span></span><br><span class="line">driver   : xserver-xorg-video-nouveau - distro free <span class="built_in">builtin</span></span><br></pre></td></tr></table></figure><h2 id="添加ppa源"><a href="#添加ppa源" class="headerlink" title="添加ppa源:"></a>添加ppa源:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:graphics-drivers/ppa</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h2 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动:"></a>安装驱动:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nvidia-390</span><br></pre></td></tr></table></figure><h2 id="装完重启-输入以下命令验证"><a href="#装完重启-输入以下命令验证" class="headerlink" title="装完重启,输入以下命令验证:"></a>装完重启,输入以下命令验证:</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-ism</span><br></pre></td></tr></table></figure><p>或者是用hashcat -I看看,又或者是进设置的关于Ubuntu界面查看</p><h1 id="kali"><a href="#kali" class="headerlink" title="kali:"></a>kali:</h1><p>前面的跟Ubuntu差不多</p><p>开机时在引导界面按’e’就能看到像下面的(我是复制虚拟机的,反正不影响)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">load_video</span><br><span class="line">insmod gzio</span><br><span class="line">if [ x$grub_platform = xxen ]; then insmod xzio; insmod lzopio; fi</span><br><span class="line">insmod part_msdos</span><br><span class="line">insmod ext2</span><br><span class="line">set root='hd0,msdos1'</span><br><span class="line">if [ x$feature_platform_search_hint = xy ]; then</span><br><span class="line">  search --no-floppy --fs-uuid --set=root --hint-bios=hd0,msdos1 --hint-efi=hd0,msdos1 --hint-baremetal=ahci0,msdos1  930acde8-73cc-4e4b-81b0-bc253f1cac97</span><br><span class="line">else</span><br><span class="line">  search --no-floppy --fs-uuid --set=root 930acde8-73cc-4e4b-81b0-bc253f1cac97</span><br><span class="line">fi</span><br><span class="line">echo    '载入 Linux 4.18.0-kali2-amd64 ...'</span><br><span class="line">linux   /boot/vmlinuz-4.18.0-kali2-amd64 root=UUID=930acde8-73cc-4e4b-81b0-bc253f1cac97 ro initrd=/install/initrd.gz quiet</span><br><span class="line">echo    '载入初始化内存盘...'</span><br><span class="line">initrd  /boot/initrd.img-4.18.0-kali2-amd64</span><br></pre></td></tr></table></figure><p>找到:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linux/boot/vmlinuz-4.18.0-kali2-amd64 root=UUID=930acde8-73cc-4e4b-81b0-bc253f1cac97 ro initrd=/install/initrd.gz quiet</span><br></pre></td></tr></table></figure><p>然后在”quiet”后面添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acpi=off</span><br></pre></td></tr></table></figure><p>按F10引导,成功进入桌面,然后就是安装显卡驱动(反正我kali的N卡驱动到现在都没装上)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这几天折腾kali,ubutu,parrot实体机遇到各种坑,记录一下&lt;/p&gt;
&lt;p&gt;我这破电脑之前实体机死活不成.昨天我找到解决方法了&lt;/p&gt;
&lt;h1 id=&quot;Ubuntu&quot;&gt;&lt;a href=&quot;#Ubuntu&quot; class=&quot;headerlink&quot; title=&quot;Ubun
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://zero-mk.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>python的zlib.crc32</title>
    <link href="http://zero-mk.github.io/2019/01/01/crc32/"/>
    <id>http://zero-mk.github.io/2019/01/01/crc32/</id>
    <published>2019-01-01T14:47:13.000Z</published>
    <updated>2019-01-01T15:39:28.369Z</updated>
    
    <content type="html"><![CDATA[<p>很多的ctf misc题可以用crc32碰撞解出来,就像gxnnctf2018的一道misc题,解压得到一堆压缩包,一个一个爆破很费时间,随便打开一个压缩包可以观察出,flag.txt只有三个字符,三个字符的crc32碰撞几乎是秒解</p><p><img src="/2019/01/01/crc32/crc32.PNG" alt=""></p><p>python的zlib库里就有crc32校验的模块:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> zlib</span><br><span class="line">In [<span class="number">2</span>]:  hex(zlib.crc32(<span class="string">"078"</span>)&amp;<span class="number">0xffffffff</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="string">'0x632f2428'</span></span><br></pre></td></tr></table></figure><p>crc32爆破脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"></span><br><span class="line">crc32code = raw_input(<span class="string">'crc32 : '</span>)</span><br><span class="line"><span class="comment">#这个脚本是爆破3位数字的,所以是xrange(0,100),其他的自己照葫芦画瓢</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">100</span>):                      </span><br><span class="line">    buf = str(i).rjust(<span class="number">3</span>,<span class="string">'0'</span>)                      </span><br><span class="line">    <span class="keyword">if</span> zlib.crc32(buf) &amp; <span class="number">0xffffffff</span> == int(crc32code,<span class="number">16</span>): </span><br><span class="line">        <span class="keyword">print</span> <span class="string">'[*]'</span>,buf</span><br></pre></td></tr></table></figure><p>用来解上面题目:</p><p><img src="/2019/01/01/crc32/crc32_1.PNG" alt="crc32_1"></p><p>完善一下脚本批量解出每个压缩包的flag.txt的内容,发现对着ascii码都能转成可见字符,再base64解码就得到flag,在这里我就不放出来了,自己照葫芦画瓢</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很多的ctf misc题可以用crc32碰撞解出来,就像gxnnctf2018的一道misc题,解压得到一堆压缩包,一个一个爆破很费时间,随便打开一个压缩包可以观察出,flag.txt只有三个字符,三个字符的crc32碰撞几乎是秒解&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/20
      
    
    </summary>
    
    
      <category term="ctf-misc" scheme="http://zero-mk.github.io/tags/ctf-misc/"/>
    
  </entry>
  
  <entry>
    <title>pwntools的命令行工具pwn</title>
    <link href="http://zero-mk.github.io/2019/01/01/pwntools-Command%20Line%20Tools/"/>
    <id>http://zero-mk.github.io/2019/01/01/pwntools-Command Line Tools/</id>
    <published>2019-01-01T06:39:34.000Z</published>
    <updated>2019-01-01T06:45:35.265Z</updated>
    
    <content type="html"><![CDATA[<p><strong>注:我只是翻译(机翻加个人使用然后修正)玩玩的,可能会有错,看看就好,有错的地方请私信我:<a href="mailto:1565328054@qq.com" target="_blank" rel="noopener">1565328054@qq.com</a>十分感谢</strong></p><p>Pwntools 附带了一些有用的命令行实用程序</p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><p>Pwntools 命令行界面<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">usage: pwn [-h]</span><br><span class="line">           &#123;asm,checksec,constgrep,cyclic,debug,disasm,disablenx,elfdiff,elfpatch,errno,hex,phd,pwnstrip,scramble,shellcraft,template,unhex,update&#125;</span><br><span class="line">           ...</span><br></pre></td></tr></table></figure></p><p>显示这个帮助信息，然后退出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-h, --help</span><br></pre></td></tr></table></figure></p><p>### </p><h3 id="pwn-asm-汇编器"><a href="#pwn-asm-汇编器" class="headerlink" title="pwn asm (汇编器)"></a>pwn asm (汇编器)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">usage: pwn asm [-h] [-f &#123;raw,hex,string,elf&#125;] [-o file] [-c context]</span><br><span class="line">               [-v AVOID] [-n] [-z] [-d] [-e ENCODER] [-i INFILE] [-r]</span><br><span class="line">               [line [line ...]]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line</span><br></pre></td></tr></table></figure><p>要组装的代码行。 如果没有提供，请使用 stdin</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-h, --help</span><br></pre></td></tr></table></figure><p>显示这个帮助信息，然后退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-f &#123;raw,hex,string,elf&#125;, --format &#123;raw,hex,string,elf&#125;</span><br></pre></td></tr></table></figure><p>输出格式(对于 ttys，默认为十六进制，否则为原始类型)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-o &lt;file&gt;, --output &lt;file&gt;</span><br></pre></td></tr></table></figure><p>输出文件(默认为 stdout)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-c &#123;16,32,64,android,cgc,freebsd,linux,windows,powerpc64,aarch64,sparc64,powerpc,mips64,msp430,thumb,amd64,sparc,alpha,s390,i386,m68k,mips,ia64,cris,vax,avr,arm,little,big,el,le,be,eb&#125;, --context &#123;16,32,64,android,cgc,freebsd,linux,windows,powerpc64,aarch64,sparc64,powerpc,mips64,msp430,thumb,amd64,sparc,alpha,s390,i386,m68k,mips,ia64,cris,vax,avr,arm,little,big,el,le,be,eb&#125;</span><br></pre></td></tr></table></figure><p>指定生成的shellcode的 操作系统 / 架构 / 字节序(大端小端) / 位数 (默认是: linux/i386), 从: [‘16’, ‘32’, ‘64’, ‘android’, ‘cgc’, ‘freebsd’, ‘linux’, ‘windows’, ‘powerpc64’, ‘aarch64’, ‘sparc64’, ‘powerpc’, ‘mips64’, ‘msp430’, ‘thumb’, ‘amd64’, ‘sparc’, ‘alpha’, ‘s390’, ‘i386’, ‘m68k’, ‘mips’, ‘ia64’, ‘cris’, ‘vax’, ‘avr’, ‘arm’, ‘little’, ‘big’, ‘el’, ‘le’, ‘be’, ‘eb’]中选择</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-v &lt;avoid&gt;, --avoid &lt;avoid&gt;</span><br></pre></td></tr></table></figure><p>对 shellcode 进行编码 (provided as hex; default: 000a)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-n, --newline</span><br></pre></td></tr></table></figure><p>将 shell 代码编码以避免换行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-z, --zero</span><br></pre></td></tr></table></figure><p>对 shell 代码进行编码，以避免NULL byte</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-d, --debug</span><br></pre></td></tr></table></figure><p>使用GDB 调试 shellcode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-e &lt;encoder&gt;, --encoder &lt;encoder&gt;</span><br></pre></td></tr></table></figure><p>指定编码器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-i &lt;infile&gt;, --infile &lt;infile&gt;</span><br></pre></td></tr></table></figure><p>指定输入文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-r, --run</span><br></pre></td></tr></table></figure><p>运行输出</p><h3 id="pwn-disasm-反汇编器"><a href="#pwn-disasm-反汇编器" class="headerlink" title="pwn disasm  (反汇编器)"></a>pwn disasm  (反汇编器)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usage: pwn disasm [-h] [-c arch_or_os] [-a address] [--color] [--no-color]</span><br><span class="line">                  [hex [hex ...]]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hex</span><br></pre></td></tr></table></figure><p>Hex-string to disasemble. If none are supplied, then it uses stdin in non-hex mode.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-h, --help</span><br></pre></td></tr></table></figure><p>显示这个帮助信息，然后退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-c &#123;16,32,64,android,cgc,freebsd,linux,windows,powerpc64,aarch64,sparc64,powerpc,mips64,msp430,thumb,amd64,sparc,alpha,s390,i386,m68k,mips,ia64,cris,vax,avr,arm,little,big,el,le,be,eb&#125;, --context &#123;16,32,64,android,cgc,freebsd,linux,windows,powerpc64,aarch64,sparc64,powerpc,mips64,msp430,thumb,amd64,sparc,alpha,s390,i386,m68k,mips,ia64,cris,vax,avr,arm,little,big,el,le,be,eb&#125;</span><br></pre></td></tr></table></figure><p>指定生成的shellcode的 操作系统 / 架构 / 字节序(大端小端) / 位数 (默认是: linux/i386), 从: [‘16’, ‘32’, ‘64’, ‘android’, ‘cgc’, ‘freebsd’, ‘linux’, ‘windows’, ‘powerpc64’, ‘aarch64’, ‘sparc64’, ‘powerpc’, ‘mips64’, ‘msp430’, ‘thumb’, ‘amd64’, ‘sparc’, ‘alpha’, ‘s390’, ‘i386’, ‘m68k’, ‘mips’, ‘ia64’, ‘cris’, ‘vax’, ‘avr’, ‘arm’, ‘little’, ‘big’, ‘el’, ‘le’, ‘be’, ‘eb’]中选择</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-a &lt;address&gt;, --address &lt;address&gt;</span><br></pre></td></tr></table></figure><p>基址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--color</span><br></pre></td></tr></table></figure><p>彩色输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--no-color</span><br></pre></td></tr></table></figure><p>禁用颜色输出</p><h3 id="pwn-checksec-检查elf安全机制"><a href="#pwn-checksec-检查elf安全机制" class="headerlink" title="pwn checksec  (检查elf安全机制)"></a>pwn checksec  (检查elf安全机制)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usage: pwn checksec [-h] [--file [elf [elf ...]]] [elf [elf ...]]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elf</span><br></pre></td></tr></table></figure><p>要检查的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-h, --help</span><br></pre></td></tr></table></figure><p>显示这个帮助信息，然后退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--file &lt;elf&gt;</span><br></pre></td></tr></table></figure><p>要检查的文件(是否与 checksec.sh 兼容)</p><h3 id="pwn-cyclic-测溢出点"><a href="#pwn-cyclic-测溢出点" class="headerlink" title="pwn cyclic  (测溢出点)"></a>pwn cyclic  (测溢出点)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">usage: pwn cyclic [-h] [-a alphabet] [-n length] [-c context]</span><br><span class="line">                  [-l lookup_value]</span><br><span class="line">                  [count]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count</span><br></pre></td></tr></table></figure><p>要打印的字符数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-h, --help</span><br></pre></td></tr></table></figure><p>显示这个帮助信息，然后退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-a &lt;alphabet&gt;, --alphabet &lt;alphabet&gt;</span><br></pre></td></tr></table></figure><p>循环模式中使用的字母表(默认为所有小写字母)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-n &lt;length&gt;, --length &lt;length&gt;</span><br></pre></td></tr></table></figure><p>指定子序列的大小 (defaults to 4).<br><strong>-c {16,32,64,android,cgc,freebsd,linux,windows,powerpc64,aarch64,sparc64,powerpc,mips64,msp430,thumb,amd64,sparc,alpha,s390,i386,m68k,mips,ia64,cris,vax,avr,arm,little,big,el,le,be,eb}, –context {16,32,64,android,cgc,freebsd,linux,windows,powerpc64,aarch64,sparc64,powerpc,mips64,msp430,thumb,amd64,sparc,alpha,s390,i386,m68k,mips,ia64,cris,vax,avr,arm,little,big,el,le,be,eb}</strong><br>指定生成的shellcode的 操作系统 / 架构 / 字节序(大端小端) / 位数 (默认是: linux/i386), 从: [‘16’, ‘32’, ‘64’, ‘android’, ‘cgc’, ‘freebsd’, ‘linux’, ‘windows’, ‘powerpc64’, ‘aarch64’, ‘sparc64’, ‘powerpc’, ‘mips64’, ‘msp430’, ‘thumb’, ‘amd64’, ‘sparc’, ‘alpha’, ‘s390’, ‘i386’, ‘m68k’, ‘mips’, ‘ia64’, ‘cris’, ‘vax’, ‘avr’, ‘arm’, ‘little’, ‘big’, ‘el’, ‘le’, ‘be’, ‘eb’]中选择</p><p><strong>-l &lt;lookup_value&gt;, -o &lt;lookup_value&gt;, –offset &lt;lookup_value&gt;, –lookup &lt;lookup_value&gt;</strong><br>Do a lookup instead printing the alphabet</p><h3 id="pwn-hex-数据转十六进制"><a href="#pwn-hex-数据转十六进制" class="headerlink" title="pwn hex  (数据转十六进制)"></a>pwn hex  (数据转十六进制)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usage: pwn hex [-h] [data [data ...]]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data</span><br></pre></td></tr></table></figure><p>数据转换为十六进制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-h, --help</span><br></pre></td></tr></table></figure><p>显示这个帮助信息，然后退出</p><h3 id="pwn-unhex-解码十六进制"><a href="#pwn-unhex-解码十六进制" class="headerlink" title="pwn unhex  (解码十六进制)"></a>pwn unhex  (解码十六进制)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usage: pwn unhex [-h] [hex [hex ...]]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hex</span><br></pre></td></tr></table></figure><p>要解码的十六进制字节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-h, --help</span><br></pre></td></tr></table></figure><p>显示这个帮助信息，然后退出</p><h3 id="pwn-update-更新pwntools"><a href="#pwn-update-更新pwntools" class="headerlink" title="pwn update  (更新pwntools)"></a>pwn update  (更新pwntools)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usage: pwn update [-h] [--install] [--pre]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-h, --help</span><br></pre></td></tr></table></figure><p>显示这个帮助信息，然后退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--install</span><br></pre></td></tr></table></figure><p>自动安装更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--pre</span><br></pre></td></tr></table></figure><p>检查预发行版本。</p><h3 id="pwn-phd-dump出efl的hex有点像xxd"><a href="#pwn-phd-dump出efl的hex有点像xxd" class="headerlink" title="pwn phd  (dump出efl的hex有点像xxd)"></a>pwn phd  (dump出efl的hex有点像xxd)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">usage: pwn phd [-h] [-w WIDTH] [-l [HIGHLIGHT [HIGHLIGHT ...]]] [-s SKIP]</span><br><span class="line">               [-c COUNT] [-o OFFSET] [--color [&#123;always,never,auto&#125;]]</span><br><span class="line">               [file]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file</span><br></pre></td></tr></table></figure><p>file 转换到 hex。 如果丢失，从 stdin 读取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-h, --help</span><br></pre></td></tr></table></figure><p>显示这个帮助信息，然后退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-w &lt;width&gt;, --width &lt;width&gt;</span><br></pre></td></tr></table></figure><p>每行字节数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-l &lt;highlight&gt;, --highlight &lt;highlight&gt;</span><br></pre></td></tr></table></figure><p>要高亮的字节。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-s &lt;skip&gt;, --skip &lt;skip&gt;</span><br></pre></td></tr></table></figure><p>跳过多少字节。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-c &lt;count&gt;, --count &lt;count&gt;</span><br></pre></td></tr></table></figure><p>只显示这么多字节。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-o &lt;offset&gt;, --offset &lt;offset&gt;</span><br></pre></td></tr></table></figure><p>左栏中的地址从这个地址开始。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--color &#123;always,never,auto&#125;</span><br></pre></td></tr></table></figure><p>使输出着色。 当”auto”输出正好是着色时，标准输出是 TTY。 默认是自动的。</p><h3 id="pwn-disablenx-检查elf安全机制"><a href="#pwn-disablenx-检查elf安全机制" class="headerlink" title="pwn disablenx  (检查elf安全机制)"></a>pwn disablenx  (检查elf安全机制)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">usage: pwn disablenx [-h] elf [elf ...]</span><br><span class="line"></span><br><span class="line">l0ser@DESKTOP-N2FHDCM:/mnt/k/pwn/gxnnctf/pwn_x64$ pwn disablenx pwn</span><br><span class="line">[*] &apos;/mnt/k/pwn/gxnnctf/pwn_x64/pwn&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">[*] &apos;/mnt/k/pwn/gxnnctf/pwn_x64/pwn&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elf</span><br></pre></td></tr></table></figure><p>要检查的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-h, --help</span><br></pre></td></tr></table></figure><p>显示这个帮助信息</p><h3 id="pwn-shellcraft-shellcode生成器"><a href="#pwn-shellcraft-shellcode生成器" class="headerlink" title="pwn shellcraft  (shellcode生成器)"></a>pwn shellcraft  (shellcode生成器)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">usage: pwn shellcraft [-h] [-?] [-o file] [-f format] [-d] [-b] [-a]</span><br><span class="line">                      [-v AVOID] [-n] [-z] [-r] [--color] [--no-color]</span><br><span class="line">                      [--syscalls] [--address ADDRESS] [-l] [-s]</span><br><span class="line">                      [shellcode] [arg [arg ...]]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shellcode</span><br></pre></td></tr></table></figure><p>你想要的shellcode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arg</span><br></pre></td></tr></table></figure><p>Argument to the chosen shellcode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-h, --help</span><br></pre></td></tr></table></figure><p>显示这个帮助信息，然后退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-?, --show</span><br></pre></td></tr></table></figure><p>打印出shellcode文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-o &lt;file&gt;, --out &lt;file&gt;</span><br></pre></td></tr></table></figure><p>Output file (default: stdout)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-f &#123;r,raw,s,str,string,c,h,hex,a,asm,assembly,p,i,hexii,e,elf,d,escaped,default&#125;, --format &#123;r,raw,s,str,string,c,h,hex,a,asm,assembly,p,i,hexii,e,elf,d,escaped,default&#125;</span><br></pre></td></tr></table></figure><p>输出格式(默认值: 十六进制) ，选择{ e } lf，{ r } aw，{ s } tring，{ c }-style array，{ h } ex string，hex { i } ，{ a } ssembly code，{ p } reccssed code，escape { d } hex string</p><p><strong>-d, –debug</strong><br>使用gdb调试shellcode</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-b, --before</span><br></pre></td></tr></table></figure><p>在代码之前插入调试陷阱(debug trap)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-a, --after</span><br></pre></td></tr></table></figure><p>在代码之后插入调试陷阱(debug trap)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-v &lt;avoid&gt;, --avoid &lt;avoid&gt;</span><br></pre></td></tr></table></figure><p>对 shell 代码进行编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-n, --newline</span><br></pre></td></tr></table></figure><p>将 shell 代码编码以避免换行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-z, --zero</span><br></pre></td></tr></table></figure><p>对 shell 代码进行编码，以避免NIULL bytes</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-r, --run</span><br></pre></td></tr></table></figure><p>Run output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--color</span><br></pre></td></tr></table></figure><p>Color output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--no-color</span><br></pre></td></tr></table></figure><p>Disable color output</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--syscalls</span><br></pre></td></tr></table></figure><p>列出系统调用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--address &lt;address&gt;</span><br></pre></td></tr></table></figure><p>加载地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-l, --list</span><br></pre></td></tr></table></figure><p>列出可用的shellcode，也可选择提供一个过滤器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-s, --shared</span><br></pre></td></tr></table></figure><p>生成的 ELF 是一个共享库</p><h3 id="pwn-template"><a href="#pwn-template" class="headerlink" title="pwn template"></a>pwn template</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">usage: pwn template [-h] [--host HOST] [--port PORT] [--user USER]</span><br><span class="line">                    [--pass PASSWORD] [--path PATH] [--quiet]</span><br><span class="line">                    [exe]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exe</span><br></pre></td></tr></table></figure><p>目标二进制文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-h, --help</span><br></pre></td></tr></table></figure><p>显示这个帮助信息，然后退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--host &lt;host&gt;</span><br></pre></td></tr></table></figure><p>远程主机 / SSH 服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--port &lt;port&gt;</span><br></pre></td></tr></table></figure><p>远程端口 / SSH 端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--user &lt;user&gt;</span><br></pre></td></tr></table></figure><p>SSH 用户名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--pass &lt;password&gt;</span><br></pre></td></tr></table></figure><p>SSH 密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--path &lt;path&gt;</span><br></pre></td></tr></table></figure><p>ssh 服务器上文件的远程路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--quiet</span><br></pre></td></tr></table></figure><p>较少冗长的模板注释</p><h3 id="pwn-elfdiff"><a href="#pwn-elfdiff" class="headerlink" title="pwn elfdiff"></a>pwn elfdiff</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usage: pwn elfdiff [-h] a b</span><br></pre></td></tr></table></figure><p><strong>a</strong><br><strong>b</strong><br>对比a , b两个elf文件<br><strong>-h, –help</strong><br>显示这个帮助信息，然后退出</p><h3 id="pwn-pwnstrip"><a href="#pwn-pwnstrip" class="headerlink" title="pwn pwnstrip"></a>pwn pwnstrip</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usage: pwn pwnstrip [-h] [-b] [-p FUNCTION] [-o OUTPUT] file</span><br></pre></td></tr></table></figure><p><strong>file</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-h, --help</span><br></pre></td></tr></table></figure><p>显示这个帮助信息，然后退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-b, --build-id</span><br></pre></td></tr></table></figure><p>Strip build ID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-p &lt;function&gt;, --patch &lt;function&gt;</span><br></pre></td></tr></table></figure><p>Patch function</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-o &lt;output&gt;, --output &lt;output&gt;</span><br></pre></td></tr></table></figure><h3 id="pwn-constgrep"><a href="#pwn-constgrep" class="headerlink" title="pwn constgrep"></a>pwn constgrep</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usage: pwn constgrep [-h] [-e constant] [-i] [-m] [-c arch_or_os]</span><br><span class="line">                     [regex] [constant]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regex</span><br></pre></td></tr></table></figure><p>要求匹配常量的正则表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">constant</span><br></pre></td></tr></table></figure><p>要找的常量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-h, --help</span><br></pre></td></tr></table></figure><p>显示这个帮助信息，然后退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-e &lt;constant&gt;, --exact &lt;constant&gt;</span><br></pre></td></tr></table></figure><p>对常量执行精确匹配，而不是搜索正则表达式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-i, --case-insensitive</span><br></pre></td></tr></table></figure><p>搜索不区分大小写</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-m, --mask-mode</span><br></pre></td></tr></table></figure><p>不要搜索特定的常量值，而是搜索不严格包含比给定值少的位的值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-c &#123;16,32,64,android,cgc,freebsd,linux,windows,powerpc64,aarch64,sparc64,powerpc,mips64,msp430,thumb,amd64,sparc,alpha,s390,i386,m68k,mips,ia64,cris,vax,avr,arm,little,big,el,le,be,eb&#125;, --context &#123;16,32,64,android,cgc,freebsd,linux,windows,powerpc64,aarch64,sparc64,powerpc,mips64,msp430,thumb,amd64,sparc,alpha,s390,i386,m68k,mips,ia64,cris,vax,avr,arm,little,big,el,le,be,eb&#125;</span><br></pre></td></tr></table></figure><p>指定生成的shellcode的 操作系统 / 架构 / 字节序(大端小端) / 位数 (默认是: linux/i386), 从: [‘16’, ‘32’, ‘64’, ‘android’, ‘cgc’, ‘freebsd’, ‘linux’, ‘windows’, ‘powerpc64’, ‘aarch64’, ‘sparc64’, ‘powerpc’, ‘mips64’, ‘msp430’, ‘thumb’, ‘amd64’, ‘sparc’, ‘alpha’, ‘s390’, ‘i386’, ‘m68k’, ‘mips’, ‘ia64’, ‘cris’, ‘vax’, ‘avr’, ‘arm’, ‘little’, ‘big’, ‘el’, ‘le’, ‘be’, ‘eb’]中选择</p><h3 id="pwn-debug"><a href="#pwn-debug" class="headerlink" title="pwn debug"></a>pwn debug</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">usage: pwn debug [-h] [-x GDBSCRIPT] [--pid PID] [-c context]</span><br><span class="line">                 [--exec EXECUTABLE] [--process PROCESS_NAME]</span><br><span class="line">                 [--sysroot SYSROOT]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-h, --help</span><br></pre></td></tr></table></figure><p>显示这个帮助信息，然后退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-x &lt;gdbscript&gt;</span><br></pre></td></tr></table></figure><p>从该文件执行 GDB 命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--pid &lt;pid&gt;</span><br></pre></td></tr></table></figure><p>PID to attach to</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-c &#123;16,32,64,android,cgc,freebsd,linux,windows,powerpc64,aarch64,sparc64,powerpc,mips64,msp430,thumb,amd64,sparc,alpha,s390,i386,m68k,mips,ia64,cris,vax,avr,arm,little,big,el,le,be,eb&#125;, --context &#123;16,32,64,android,cgc,freebsd,linux,windows,powerpc64,aarch64,sparc64,powerpc,mips64,msp430,thumb,amd64,sparc,alpha,s390,i386,m68k,mips,ia64,cris,vax,avr,arm,little,big,el,le,be,eb&#125;</span><br></pre></td></tr></table></figure><p>指定生成的shellcode的 操作系统 / 架构 / 字节序(大端小端) / 位数 (默认是: linux/i386), 从: [‘16’, ‘32’, ‘64’, ‘android’, ‘cgc’, ‘freebsd’, ‘linux’, ‘windows’, ‘powerpc64’, ‘aarch64’, ‘sparc64’, ‘powerpc’, ‘mips64’, ‘msp430’, ‘thumb’, ‘amd64’, ‘sparc’, ‘alpha’, ‘s390’, ‘i386’, ‘m68k’, ‘mips’, ‘ia64’, ‘cris’, ‘vax’, ‘avr’, ‘arm’, ‘little’, ‘big’, ‘el’, ‘le’, ‘be’, ‘eb’]中选择</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--exec &lt;executable&gt;</span><br></pre></td></tr></table></figure><p>要调试的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--process &lt;process_name&gt;</span><br></pre></td></tr></table></figure><p>要attach的进程的名称(例如”bash”)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--sysroot &lt;sysroot&gt;</span><br></pre></td></tr></table></figure><p>GDB sysroot path</p><h3 id="pwn-elfpatch"><a href="#pwn-elfpatch" class="headerlink" title="pwn elfpatch"></a>pwn elfpatch</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usage: pwn elfpatch [-h]</span><br></pre></td></tr></table></figure><p><strong>-h, –help</strong><br>显示这个帮助信息，然后退出</p><h3 id="pwn-errno"><a href="#pwn-errno" class="headerlink" title="pwn errno"></a>pwn errno</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usage: pwn errno [-h] error</span><br></pre></td></tr></table></figure><p><strong>error</strong><br>错误消息或值<br><strong>-h, –help</strong><br>显示这个帮助信息，然后退出</p><p>###<br>pwn scramble<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usage: pwn scramble [-h] [-f &#123;raw,hex,string,elf&#125;] [-o file] [-c context] [-p]</span><br><span class="line">                    [-v AVOID] [-n] [-z] [-d]</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-h, --help</span><br></pre></td></tr></table></figure><p>显示这个帮助信息，然后退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-f &#123;raw,hex,string,elf&#125;, --format &#123;raw,hex,string,elf&#125;</span><br></pre></td></tr></table></figure><p>输出格式(对于 ttys，默认为十六进制，否则为原始数据)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-o &lt;file&gt;, --output &lt;file&gt;</span><br></pre></td></tr></table></figure><p>输出文件(默认为 stdout)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-c &#123;16,32,64,android,cgc,freebsd,linux,windows,powerpc64,aarch64,sparc64,powerpc,mips64,msp430,thumb,amd64,sparc,alpha,s390,i386,m68k,mips,ia64,cris,vax,avr,arm,little,big,el,le,be,eb&#125;, --context &#123;16,32,64,android,cgc,freebsd,linux,windows,powerpc64,aarch64,sparc64,powerpc,mips64,msp430,thumb,amd64,sparc,alpha,s390,i386,m68k,mips,ia64,cris,vax,avr,arm,little,big,el,le,be,eb&#125;</span><br></pre></td></tr></table></figure><p>指定生成的shellcode的 操作系统 / 架构 / 字节序(大端小端) / 位数 (默认是: linux/i386), 从: [‘16’, ‘32’, ‘64’, ‘android’, ‘cgc’, ‘freebsd’, ‘linux’, ‘windows’, ‘powerpc64’, ‘aarch64’, ‘sparc64’, ‘powerpc’, ‘mips64’, ‘msp430’, ‘thumb’, ‘amd64’, ‘sparc’, ‘alpha’, ‘s390’, ‘i386’, ‘m68k’, ‘mips’, ‘ia64’, ‘cris’, ‘vax’, ‘avr’, ‘arm’, ‘little’, ‘big’, ‘el’, ‘le’, ‘be’, ‘eb’]中选择</p><p><strong>-p, –alphanumeric</strong><br>Encode the shellcode with an alphanumeric encoder</p><p><strong>-v <avoid>, –avoid <avoid></avoid></avoid></strong><br>对 shell 代码进行编码</p><p><strong>-n, –newline</strong><br>将 shell 代码编码以避免换行</p><p><strong>-z, –zero</strong><br>对 shell 代码进行编码，以避免NIULL bytes</p><p><strong>-d, –debug</strong><br>使用gdb调试shellcode</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;注:我只是翻译(机翻加个人使用然后修正)玩玩的,可能会有错,看看就好,有错的地方请私信我:&lt;a href=&quot;mailto:1565328054@qq.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1565328054@qq.com&lt;
      
    
    </summary>
    
    
      <category term="pwntools" scheme="http://zero-mk.github.io/tags/pwntools/"/>
    
  </entry>
  
  <entry>
    <title>ctf-pwn-tips-zh_CN</title>
    <link href="http://zero-mk.github.io/2018/12/31/CTF-pwn-tips-zh_CN/"/>
    <id>http://zero-mk.github.io/2018/12/31/CTF-pwn-tips-zh_CN/</id>
    <published>2018-12-31T08:39:34.000Z</published>
    <updated>2018-12-31T18:43:48.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Catalog"><a href="#Catalog" class="headerlink" title="Catalog"></a>Catalog</h1><ul><li><a href="http://#overflow" target="_blank" rel="noopener">Overflow</a></li><li><a href="#find-string-in-gdb">Find string in gdb</a></li><li><a href="#binary-service">Binary Service</a></li><li><a href="#find-specific-function-offset-in-libc">Find specific function offset in libc</a></li><li><a href="#find-binsh-or-sh-in-library">Find ‘/bin/sh’ or ‘sh’ in library</a></li><li><a href="#leak-stack-address">Leak stack address</a></li><li><a href="#fork-problem-in-gdb">Fork problem in gdb</a></li><li><a href="#secret-of-a-mysterious-section---tls">Secret of a mysterious section - .tls</a></li><li><a href="#predictable-rngrandom-number-generator">Predictable RNG(Random Number Generator)</a></li><li><a href="#make-stack-executable">Make stack executable</a></li><li><a href="#use-one-gadget-rce-instead-of-system">Use one-gadget-RCE instead of system</a></li><li><a href="#hijack-hook-function">Hijack hook function</a></li><li><a href="#use-printf-to-trigger-malloc-and-free">Use printf to trigger malloc and free</a></li><li><a href="#use-execveat-to-open-a-shell">Use execveat to open a shell</a></li></ul><h2 id="Overflow"><a href="#Overflow" class="headerlink" title="Overflow"></a>Overflow</h2><p>例如:<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> buf[<span class="number">40</span>]</span><br><span class="line"><span class="keyword">signed</span> <span class="keyword">int</span> num</span><br></pre></td></tr></table></figure></p><h3 id="scanf"><a href="#scanf" class="headerlink" title="scanf"></a>scanf</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, buf)</span><br></pre></td></tr></table></figure><ul><li><code>%s</code> 没有边界检查</li><li><strong>pwnable</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%39s"</span>, buf)</span><br></pre></td></tr></table></figure><ul><li><code>39s</code> 只从输入中获取39个字节，并将 NULL 字节放在输入的末尾。</li><li><strong>useless</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%40s"</span>, buf)</span><br></pre></td></tr></table></figure><ul><li>乍一看，这似乎是合理的。</li><li>它从输入中获取40字节，但它也将NULL字节放在输入的末尾。</li><li>但是,它有one-byte-overflow</li><li><strong>pwnable</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num)</span><br><span class="line">alloca(num)</span><br></pre></td></tr></table></figure><pre><code>* 由于`alloca`从调用者的堆栈框架分配内存，因此有一条` sub esp, eax `指令来实现这一点。* 如果我们使num为负，它将有重叠的堆栈帧。* E.g. [Seccon CTF quals 2016 cheer_msg](https://github.com/ctfs/write-ups-2016/tree/master/seccon-ctf-quals-2016/exploit/cheer-msg-100)</code></pre><ul><li>使用num访问一些数据结构<ul><li>大多数情况下，程序只检查较高的边界，忘记使num无符号。</li><li>使num为负可以让我们覆盖一些重要的数据</li></ul></li></ul><h3 id="gets"><a href="#gets" class="headerlink" title="gets"></a>gets</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gets(buf)</span><br></pre></td></tr></table></figure><ul><li>没有检查边界</li><li><strong>pwnable</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fgets(buf, <span class="number">40</span>, <span class="built_in">stdin</span>)</span><br></pre></td></tr></table></figure><ul><li>它只从输入中获取39个字节，并将NULL字节放在输入的末尾。</li><li><strong>useless</strong></li></ul><h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read(<span class="built_in">stdin</span>, buf, <span class="number">40</span>)</span><br></pre></td></tr></table></figure><ul><li>它从输入中获取40字节，并且不将NULL字节放在输入的末尾。</li><li>这看起来很安全，但可能会有 <strong>information leak</strong>.</li><li><strong>leakable</strong></li></ul><p>E.g.</p><p><strong>memory layout</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x7fffffffdd00: 0x4141414141414141      0x4141414141414141</span><br><span class="line">0x7fffffffdd10: 0x4141414141414141      0x4141414141414141</span><br><span class="line">0x7fffffffdd20: 0x4141414141414141      0x00007fffffffe1cd</span><br></pre></td></tr></table></figure></p><ul><li>如果现在用<code>printf</code>或者<code>puts</code>来输出这个buf,它将一直输出到NULL byte.</li><li>在这种情况下，我们可以:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;A&apos;*40 + &apos;\xcd\xe1\xff\xff\xff\x7f&apos;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fread(buf, 1, 40, stdin)</span><br></pre></td></tr></table></figure><ul><li>几乎和<code>read</code>一样</li><li><strong>leakable</strong></li></ul><h3 id="strcpy"><a href="#strcpy" class="headerlink" title="strcpy"></a>strcpy</h3><p>假设还有另一个缓冲区:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char buf2[60]</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strcpy(buf, buf2)</span><br></pre></td></tr></table></figure><ul><li>没有边界检查</li><li>buf2的大小可能比buf大</li><li>所以可能会buffer overflow</li><li><strong>pwnable</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strncpy(buf, buf2, 40)</span><br><span class="line">memcpy(buf, buf2, 40)</span><br></pre></td></tr></table></figure><ul><li>这个操作会把buf2前40 bytes复制到buf,但是不会再末尾添加NULL byte</li><li>因为结尾没有NULL byte, 也许可以 <strong>information leak</strong>.</li><li><strong>leakable</strong></li></ul><h3 id="strcat"><a href="#strcat" class="headerlink" title="strcat"></a>strcat</h3><p>假设有:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char buf2[60]</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strcat(buf, buf2)</span><br></pre></td></tr></table></figure><ul><li>strcat是将两个char类型连接。</li><li>如果buf不够大，可能会导致溢出。</li><li>它将NULL byte放在末尾，这可能会导致<strong>one-byte-overflow</strong>.</li><li>在某些情况下，我们可以使用这个NULL byte来更改堆栈地址或堆地址。</li><li><strong>pwnable</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strncat(buf, buf2, n)</span><br></pre></td></tr></table></figure><ul><li>和<code>strcat</code>相似, 但是有大小n限制</li><li><strong>pwnable</strong></li><li>E.g. <a href="https://github.com/ctfs/write-ups-2016/tree/master/seccon-ctf-quals-2016/exploit/jmper-300" target="_blank" rel="noopener">Seccon CTF quals 2016 jmper</a></li></ul><h2 id="Find-string-in-gdb"><a href="#Find-string-in-gdb" class="headerlink" title="Find string in gdb"></a>Find string in gdb</h2><p>在 <a href="http://j00ru.vexillium.org/blog/24_03_15/dragons_ctf.pdf" target="_blank" rel="noopener">SSP</a>中, 我们需要找出argv[0]和输入缓冲区之间的偏移量。</p><h3 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h3><ul><li>Use <code>p/x ((char **)environ)</code> in gdb, and the address of argv[0] will be the <code>output - 0x10</code></li><li>在gdb中使用<code>p/x ((char **)environ)</code>， argv[0]的地址将是<code>output - 0x10</code></li></ul><p>E.g.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(gdb) p/x (char **)environ</span><br><span class="line">$9 = 0x7fffffffde38</span><br><span class="line">(gdb) x/gx 0x7fffffffde38-0x10</span><br><span class="line">0x7fffffffde28: 0x00007fffffffe1cd</span><br><span class="line">(gdb) x/s 0x00007fffffffe1cd</span><br><span class="line">0x7fffffffe1cd: &quot;/home/naetw/CTF/seccon2016/check/checker&quot;</span><br></pre></td></tr></table></figure><h3 id="gdb-peda"><a href="#gdb-peda" class="headerlink" title="gdb peda"></a><a href="https://github.com/longld/peda" target="_blank" rel="noopener">gdb peda</a></h3><ul><li>使用 <code>searchmem</code>搜索内存<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">    searchmem pattern start end</span><br><span class="line">    searchmem pattern mapname</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ searchmem &quot;/home/naetw/CTF/seccon2016/check/checker&quot;</span><br><span class="line">Searching for &apos;/home/naetw/CTF/seccon2016/check/checker&apos; in: None ranges</span><br><span class="line">Found 3 results, display max 3 items:</span><br><span class="line">[stack] : 0x7fffffffe1cd (&quot;/home/naetw/CTF/seccon2016/check/checker&quot;)</span><br><span class="line">[stack] : 0x7fffffffed7c (&quot;/home/naetw/CTF/seccon2016/check/checker&quot;)</span><br><span class="line">[stack] : 0x7fffffffefcf (&quot;/home/naetw/CTF/seccon2016/check/checker&quot;)</span><br><span class="line">gdb-peda$ searchmem 0x7fffffffe1cd</span><br><span class="line">Searching for &apos;0x7fffffffe1cd&apos; in: None ranges</span><br><span class="line">Found 2 results, display max 2 items:</span><br><span class="line">   libc : 0x7ffff7dd33b8 --&gt; 0x7fffffffe1cd (&quot;/home/naetw/CTF/seccon2016/check/checker&quot;)</span><br><span class="line">[stack] : 0x7fffffffde28 --&gt; 0x7fffffffe1cd (&quot;/home/naetw/CTF/seccon2016/check/checker&quot;)</span><br></pre></td></tr></table></figure><h2 id="Binary-Service"><a href="#Binary-Service" class="headerlink" title="Binary Service"></a>Binary Service</h2><p>不需要使用共享库的binary:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat -vc ./binary -kl $ip $port</span><br></pre></td></tr></table></figure><p>需要使用共享库的binary:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ncat -vc &apos;LD_PRELOAD=/path/to/libc.so ./binary&apos; -kl $ip $port</span><br><span class="line">ncat -vc &apos;LD_LIBRARY_PATH=/path/of/libc.so ./binary&apos; -kl $ip $port</span><br></pre></td></tr></table></figure><p>在此之后，您可以通过nc连接到二进制服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc $ip $port</span><br></pre></td></tr></table></figure></p><h2 id="Find-specific-function-offset-in-libc"><a href="#Find-specific-function-offset-in-libc" class="headerlink" title="Find specific function offset in libc"></a>Find specific function offset in libc</h2><p>如果我们成功地泄漏了某个函数的libc地址，我们可以通过用函数在libc地址减去该函数的偏移量来得到libc的基地址。</p><h3 id="Manually"><a href="#Manually" class="headerlink" title="Manually"></a>Manually</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -s libc名 | grep 函数名@</span><br></pre></td></tr></table></figure><p>E.g.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -s libc-2.19.so | grep system@</span><br><span class="line">    620: 00040310    56 FUNC    GLOBAL DEFAULT   12 __libc_system@@GLIBC_PRIVATE</span><br><span class="line">   1443: 00040310    56 FUNC    WEAK   DEFAULT   12 system@@GLIBC_2.0</span><br></pre></td></tr></table></figure><h3 id="Automatically"><a href="#Automatically" class="headerlink" title="Automatically"></a>Automatically</h3><ul><li>使用 <a href="https://github.com/Gallopsled/pwntools" target="_blank" rel="noopener">pwntools</a></li></ul><p>E.g.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">libc = ELF(&apos;libc.so&apos;)</span><br><span class="line">system_off = libc.symbols[&apos;system&apos;]</span><br></pre></td></tr></table></figure><h2 id="Find-‘-bin-sh’-or-‘sh’-in-library"><a href="#Find-‘-bin-sh’-or-‘sh’-in-library" class="headerlink" title="Find ‘/bin/sh’ or ‘sh’ in library"></a>Find ‘/bin/sh’ or ‘sh’ in library</h2><p>先得到libc的基地址</p><h3 id="Manually-1"><a href="#Manually-1" class="headerlink" title="Manually"></a>Manually</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objdump -s libc.so | less (search &apos;sh&apos;)</span><br><span class="line">strings -tx libc.so | grep /bin/sh</span><br></pre></td></tr></table></figure><h3 id="Automatically-1"><a href="#Automatically-1" class="headerlink" title="Automatically"></a>Automatically</h3><ul><li>使用 <a href="https://github.com/Gallopsled/pwntools" target="_blank" rel="noopener">pwntools</a></li></ul><p>E.g.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">libc = ELF(&apos;libc.so&apos;)</span><br><span class="line">...</span><br><span class="line">sh = base + next(libc.search(&apos;sh\x00&apos;))</span><br><span class="line">binsh = base + next(libc.search(&apos;/bin/sh\x00&apos;))</span><br></pre></td></tr></table></figure><p>译者注 : next(libc.search(<code>some_characters</code>)) 在libc找到包含 some_characters（字符串，汇编代码或者某个数值）的地址</p><h2 id="Leak-stack-address"><a href="#Leak-stack-address" class="headerlink" title="Leak stack address"></a>Leak stack address</h2><p><strong>constraints</strong>:</p><ul><li>libc的基地地址已经泄露了吗</li><li>可以泄露任意地址的内容吗</li></ul><p>有一个 symbol <code>environ</code> 在libc中,它的值与<code>main</code>函数的第三个参数<code>char **envp</code>相同。<br> char **envp ‘的值在堆栈上，因此我们可以使用这个 symbol泄漏堆栈地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(gdb) list 1</span><br><span class="line">1       #include &lt;stdlib.h&gt;</span><br><span class="line">2       #include &lt;stdio.h&gt;</span><br><span class="line">3</span><br><span class="line">4       extern char **environ;</span><br><span class="line">5</span><br><span class="line">6       int main(int argc, char **argv, char **envp)</span><br><span class="line">7       &#123;</span><br><span class="line">8           return 0;</span><br><span class="line">9       &#125;</span><br><span class="line">(gdb) x/gx 0x7ffff7a0e000 + 0x3c5f38</span><br><span class="line">0x7ffff7dd3f38 &lt;environ&gt;:       0x00007fffffffe230</span><br><span class="line">(gdb) p/x (char **)envp</span><br><span class="line">$12 = 0x7fffffffe230</span><br></pre></td></tr></table></figure><ul><li>当前的libc基地址是 <code>0x7ffff7a0e000</code></li><li><code>environ</code>在libc的偏移量为<code>0x3c5f38</code></li></ul><p>这本 <a href="https://www.gnu.org/software/libc/manual/html_node/Program-Arguments.html" target="_blank" rel="noopener">手册</a> 详细解释了 <code>environ</code></p><h2 id="Fork-problem-in-gdb"><a href="#Fork-problem-in-gdb" class="headerlink" title="Fork problem in gdb"></a>Fork problem in gdb</h2><p>当您使用<code>gdb</code>调试一个带有<code>fork()</code>函数的二进制文件时，您可以使用以下命令来确定要执行哪个进程(原始<code>gdb</code>的默认设置是父进程，而<code>gdb-peda</code>的默认设置是子进程):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set follow-fork-mode parent</span><br><span class="line">set follow-fork-mode child</span><br></pre></td></tr></table></figure><p>Alternatively, using <code>set detach-on-fork off</code>, we can then control both sides of each fork. Using <code>inferior X</code> where <code>X</code> is any of the numbers that show up for <code>info inferiors</code> will switch to that side of the fork. This is useful if both sides of the fork are necessary to attack a challenge, and the simple <code>follow</code> ones above aren’t sufficient.<br>或者，使用<code>set detach-on-fork off</code>，我们可以控制每个fork的两边。使用<code>inferior X</code>，其中<code>X</code>是出现在<code>info inferiors</code>中的任何一个数字，都会切换到fork的那一边。如果分支的两端都是攻击某个挑战所必需的，并且上面简单的<code>follow</code>操作还不够，那么这种方法非常有用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ info inferiors</span><br><span class="line">  Num  Description       Executable</span><br><span class="line">* 1    xxxx              xxxxx</span><br><span class="line">  2    xxxx              xxxxx</span><br></pre></td></tr></table></figure></p><h2 id="Secret-of-a-mysterious-section-tls"><a href="#Secret-of-a-mysterious-section-tls" class="headerlink" title="Secret of a mysterious section - .tls"></a>Secret of a mysterious section - .tls</h2><p><strong>constraints</strong>:</p><ul><li>Need <code>malloc</code> function and you can malloc with arbitrary size</li><li>Arbitrary address leaking</li></ul><p>We make <code>malloc</code> use <code>mmap</code> to allocate memory(size 0x21000 is enough). In general, these pages will be placed at the address just before <code>.tls</code> section.</p><p>There is some useful information on <strong><code>.tls</code></strong>, such as the address of <code>main_arena</code>, <code>canary</code> (value of stack guard), and a strange <code>stack address</code> which points to somewhere on the stack but with a fixed offset.</p><p><strong>Before calling mmap:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7fecbfe4d000-7fecbfe51000 r--p 001bd000 fd:00 131210         /lib/x86_64-linux-gnu/libc-2.24.so</span><br><span class="line">7fecbfe51000-7fecbfe53000 rw-p 001c1000 fd:00 131210         /lib/x86_64-linux-gnu/libc-2.24.so</span><br><span class="line">7fecbfe53000-7fecbfe57000 rw-p 00000000 00:00 0</span><br><span class="line">7fecbfe57000-7fecbfe7c000 r-xp 00000000 fd:00 131206         /lib/x86_64-linux-gnu/ld-2.24.so</span><br><span class="line">7fecc0068000-7fecc006a000 rw-p 00000000 00:00 0              &lt;- .tls section</span><br><span class="line">7fecc0078000-7fecc007b000 rw-p 00000000 00:00 0</span><br><span class="line">7fecc007b000-7fecc007c000 r--p 00024000 fd:00 131206         /lib/x86_64-linux-gnu/ld-2.24.so</span><br><span class="line">7fecc007c000-7fecc007d000 rw-p 00025000 fd:00 131206         /lib/x86_64-linux-gnu/ld-2.24.so</span><br></pre></td></tr></table></figure><p><strong>After call mmap:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7fecbfe4d000-7fecbfe51000 r--p 001bd000 fd:00 131210         /lib/x86_64-linux-gnu/libc-2.24.so</span><br><span class="line">7fecbfe51000-7fecbfe53000 rw-p 001c1000 fd:00 131210         /lib/x86_64-linux-gnu/libc-2.24.so</span><br><span class="line">7fecbfe53000-7fecbfe57000 rw-p 00000000 00:00 0</span><br><span class="line">7fecbfe57000-7fecbfe7c000 r-xp 00000000 fd:00 131206         /lib/x86_64-linux-gnu/ld-2.24.so</span><br><span class="line">7fecc0045000-7fecc006a000 rw-p 00000000 00:00 0              &lt;- memory of mmap + .tls section</span><br><span class="line">7fecc0078000-7fecc007b000 rw-p 00000000 00:00 0</span><br><span class="line">7fecc007b000-7fecc007c000 r--p 00024000 fd:00 131206         /lib/x86_64-linux-gnu/ld-2.24.so</span><br><span class="line">7fecc007c000-7fecc007d000 rw-p 00025000 fd:00 131206         /lib/x86_64-linux-gnu/ld-2.24.so</span><br></pre></td></tr></table></figure><h2 id="Predictable-RNG-Random-Number-Generator"><a href="#Predictable-RNG-Random-Number-Generator" class="headerlink" title="Predictable RNG(Random Number Generator)"></a>Predictable RNG(Random Number Generator)</h2><p>When the binary uses the RNG to make the address of important information or sth, we can guess the same value if it’s predictable.</p><p>Assuming that it’s predictable, we can use <a href="https://docs.python.org/2/library/ctypes.html" target="_blank" rel="noopener">ctypes</a> which is a build-in module in Python.</p><p><strong>ctypes</strong> allows calling a function in DLL(Dynamic-Link Library) or Shared Library.</p><p>Therefore, if binary has an init_proc like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">srand(time(NULL));</span><br><span class="line">while(addr &lt;= 0x10000)&#123;</span><br><span class="line">    addr = rand() &amp; 0xfffff000;</span><br><span class="line">&#125;</span><br><span class="line">secret = mmap(addr,0x1000,PROT_READ|PROT_WRITE,MAP_PRIVATE|MAP_ANONYMOUS ,-1,0);</span><br><span class="line">if(secret == -1)&#123;</span><br><span class="line">    puts(`mmap error`);</span><br><span class="line">    exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we can use <strong>ctypes</strong> to get the same value of addr.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import ctypes</span><br><span class="line">LIBC = ctypes.cdll.LoadLibrary(&apos;/path/to/dll&apos;)</span><br><span class="line">LIBC.srand(LIBC.time(0))</span><br><span class="line">addr = LIBC.rand() &amp; 0xfffff000</span><br></pre></td></tr></table></figure><h2 id="Make-stack-executable"><a href="#Make-stack-executable" class="headerlink" title="Make stack executable"></a>Make stack executable</h2><ul><li><a href="http://radare.today/posts/defeating-baby_rop-with-radare2/" target="_blank" rel="noopener">link1</a></li><li><a href="https://sploitfun.wordpress.com/author/sploitfun/" target="_blank" rel="noopener">link2</a></li><li>Haven’t read yet orz</li></ul><h2 id="Use-one-gadget-RCE-instead-of-system"><a href="#Use-one-gadget-RCE-instead-of-system" class="headerlink" title="Use one-gadget-RCE instead of system"></a>Use one-gadget-RCE instead of system</h2><p><strong>constraints</strong>:</p><ul><li>有libc的基本地址</li><li>任意地址写</li></ul><p>几乎每个pwnable挑战都需要在攻击结束时调用<code>system(&quot;/bin/sh&quot;)</code>，但是如果我们想调用它，我们必须操纵参数，当然，还需要劫持一些函数来调用’<code>system</code>。如果我们不能操纵参数怎么办?</p><p>使用 <a href="http://j00ru.vexillium.org/blog/24_03_15/dragons_ctf.pdf" target="_blank" rel="noopener">one-gadget-RCE</a>!</p><p>用 <strong>one-gadget-RCE</strong>, 我们就劫持 <code>.got.plt</code> 或者我们可以用它来控制eip 使程序跳转到 <strong>one-gadget</strong>, 但是在使用它之前需要满足一些constraint<br>libc中有很多<strong>one-gadgets</strong>. 每个都有不同的constraints，但它们是相似的。每个constraints都与寄存器的状态有关。</p><p>E.g.</p><ul><li>ebx 在libc里的地址是 <code>rw-p</code> 的</li><li><code>[esp+0x34] == NULL</code></li></ul><p>我们如何得到这些constraints? 这里有一个有效的工具 <a href="https://github.com/david942j/one_gadget" target="_blank" rel="noopener">one_gadget</a> !!!!</p><p>如果我们能满足这些constraints, 我们就可以轻易getshell</p><h2 id="Hijack-hook-function"><a href="#Hijack-hook-function" class="headerlink" title="Hijack hook function"></a>Hijack hook function</h2><p><strong>constraints</strong>:</p><ul><li>有libc基地址</li><li>任意地址写</li><li>程序有用到 <code>malloc</code>, <code>free</code> or <code>realloc</code></li></ul><p>By manual:</p><blockquote><p>原文:<br>The GNU C Library lets you modify the behavior of <code>malloc</code>, <code>realloc</code>, and <code>free</code> by specifying appropriate hook functions. You can use these hooks to help you debug programs that use dynamic memory allocation, for example.<br>译文:<br>GNU C库允许您通过指定适当的hook函数来修改<code>malloc</code>、<code>realloc</code>和<code>free</code>的行为。例如，您可以使用这些hook来帮助调试使用动态内存分配的程序。</p></blockquote><p>malloc.h中声明了一些hook变量。它们的默认值是<code>0x0</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__malloc_hook</span><br><span class="line">__free_hook</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>因为它们用于帮助用户调试程序，所以它们在执行的时候是可写的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0xf77228e0 &lt;__free_hook&gt;:       0x00000000</span><br><span class="line">0xf7722000 0xf7727000 rw-p      mapped</span><br></pre></td></tr></table></figure><p>这是malloc.c的<a href="https://code.woboq.org/userspace/glibc/malloc/malloc.c.html" target="_blank" rel="noopener">源码</a>.下面我使用 <code>__libc_free</code>来演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void (*hook) (void *, const void *) = atomic_forced_read (__free_hook);</span><br><span class="line">if (__builtin_expect (hook != NULL, 0))</span><br><span class="line">&#123;</span><br><span class="line">    (*hook)(mem, RETURN_ADDRESS (0));</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它检查<code>__free_hook</code>的值。如果不是NULL，它将首先调用hook函数。在这里，我们希望使用<strong>one-gadget-RCE</strong>。由于hook函数是在libc中调用的，所以通常满足<strong>one-gadget</strong>的constraints。</p><h2 id="Use-printf-to-trigger-malloc-and-free"><a href="#Use-printf-to-trigger-malloc-and-free" class="headerlink" title="Use printf to trigger malloc and free"></a>Use printf to trigger malloc and free</h2><p>查看<code>printf</code>函数的源码,有几个地方可能会触发<code>malloc</code>. 拿 <a href="https://code.woboq.org/userspace/glibc/stdio-common/vfprintf.c.html#1470" target="_blank" rel="noopener">vfprintf.c line 1470</a> 来做例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#define EXTSIZ 32</span><br><span class="line">enum &#123; WORK_BUFFER_SIZE = 1000 &#125;;</span><br><span class="line"></span><br><span class="line">if (width &gt;= WORK_BUFFER_SIZE - EXTSIZ)</span><br><span class="line">&#123;</span><br><span class="line">    /* 我们必须使用一个特殊的缓冲区。  */</span><br><span class="line">    size_t needed = ((size_t) width + EXTSIZ) * sizeof (CHAR_T);</span><br><span class="line">    if (__libc_use_alloca (needed))</span><br><span class="line">        workend = (CHAR_T *) alloca (needed) + width + EXTSIZ;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        workstart = (CHAR_T *) malloc (needed);</span><br><span class="line">        if (workstart == NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            done = -1;</span><br><span class="line">            goto all_done;</span><br><span class="line">        &#125;</span><br><span class="line">        workend = workstart + width + EXTSIZ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can find that <code>malloc</code> will be triggered if the width field is large enough.(Of course, <code>free</code> will also be triggered at the end of printf if <code>malloc</code> has been triggered.) However, WORK_BUFFER_SIZE is not large enough, since we need to go to <strong>else</strong> block. Let’s take a look at <code>__libc_use_alloca</code> and see what exactly the minimum size of width we should give.</p><p>我们可以发现，如果width field足够大，将触发<code>malloc</code>。(当然，如果<code>malloc</code>被触发，那么<code>free</code>也会在printf的末尾被触发。)但是，WORK_BUFFER_SIZE不够大，所以我们需要转到else块从而触发mallco。让我们看看<code>__libc_use_alloca</code>，看看应该给出的最小宽度是多少。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/* 线程的最小大小。我们可以自由选择一个合理的值  */</span><br><span class="line">#define PTHREAD_STACK_MIN        16384</span><br><span class="line"></span><br><span class="line">#define __MAX_ALLOCA_CUTOFF        65536</span><br><span class="line"></span><br><span class="line">int __libc_use_alloca (size_t size)</span><br><span class="line">&#123;</span><br><span class="line">    return (__builtin_expect (size &lt;= PTHREAD_STACK_MIN / 4, 1)</span><br><span class="line">        || __builtin_expect (__libc_alloca_cutoff (size), 1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int __libc_alloca_cutoff (size_t size)</span><br><span class="line">&#123;</span><br><span class="line">return size &lt;= (MIN (__MAX_ALLOCA_CUTOFF,</span><br><span class="line">THREAD_GETMEM (THREAD_SELF, stackblock_size) / 4</span><br><span class="line">/* 在初始化线程库之前，主线程在stackblock_size元素中为零。因为它是主线程，所以我们可以假设最大可用堆栈空间。  */</span><br><span class="line">?: __MAX_ALLOCA_CUTOFF * 4));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们必须确保:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">size &gt; PTHREAD_STACK_MIN / 4</span><br><span class="line">size &gt; MIN(__MAX_ALLOCA_CUTOFF, THREAD_GETMEM(THREAD_SELF, stackblock_size) / 4 ?: __MAX_ALLOCA_CUTOFF * 4)</span><br></pre></td></tr></table></figure><ul><li>我并没有完全理解函数THREAD_GETMEM的作用，但它似乎主要返回0。</li><li>第二个条件通常是 <code>size &gt; 65536</code></li></ul><p>More details:</p><ul><li><a href="https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html" target="_blank" rel="noopener">__builtin_expect</a></li><li><a href="https://code.woboq.org/userspace/glibc/sysdeps/x86_64/nptl/tls.h.html#_M/THREAD_GETMEM" target="_blank" rel="noopener">THREAD_GETMEM</a></li></ul><h3 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h3><ul><li>触发<code>malloc</code>和<code>free</code>的最小宽度通常是65537。</li><li>If there is a Format String Vulnerability and the program ends right after calling <code>printf(buf)</code>, we can hijack <code>__malloc_hook</code> or <code>__free_hook</code> with <code>one-gadget</code> and use the trick mentioned above to trigger <code>malloc</code> &amp; <code>free</code> then we can still get the shell even there is no more function call or sth after <code>printf(buf)</code>.(如果有一个格式字符串漏洞,程序结束后调用printf(buf),我们可以用one-gadget劫持<code>__malloc_hook</code>或<code>__free_hook</code>,使用上面提到的技巧来触发<code>malloc</code>&amp;<code>free</code>然后我们仍然可以得到shell后没有更多的函数调用<code>printf(buf)</code>。)</li></ul><h2 id="Use-execveat-to-open-a-shell"><a href="#Use-execveat-to-open-a-shell" class="headerlink" title="Use execveat to open a shell"></a>Use execveat to open a shell</h2><p>提到用系统调用getshell时，我们会想到<code>execve</code>。但是，由于缺少gadgets或其他的constraints，通常并不是很容易就能办到。<br>有一个系统调用<code>execveat</code>，原型如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int execveat(int dirfd, const char *pathname,</span><br><span class="line">             char *const argv[], char *const envp[],</span><br><span class="line">             int flags);</span><br></pre></td></tr></table></figure><p>According to its <a href="http://man7.org/linux/man-pages/man2/execveat.2.html" target="_blank" rel="noopener">man page</a>, it operates in the same way as <code>execve</code>. As for the additional arguments, it mentions that:<br>根据<a href="http://man7.org/linux/man-pages/man2/execveat.2.html" target="_blank" rel="noopener">其手册</a>得知，它的运作方式与execve相同。至于其他不同点，它提到:</p><blockquote><p>If pathname is absolute, then dirfd is ignored.<br>如果路径名是绝对的，那么dirfd将被忽略。</p></blockquote><p>Hence, if we make <code>pathname</code> point to <code>/bin/sh</code>, and set <code>argv</code>, <code>envp</code> and <code>flags</code> to 0, we can still get a shell whatever the value of <code>dirfd</code>.<br>因此，如果我们让<code>pathname</code>为<code>/bin/sh</code>，并将<code>argv</code>、‘envp’和‘flags’设置为0，那么无论<code>dirfd</code>的值是多少，我们仍然可以getshell。</p><h1 id="原文-https-github-com-Naetw-CTF-pwn-tips"><a href="#原文-https-github-com-Naetw-CTF-pwn-tips" class="headerlink" title="原文:https://github.com/Naetw/CTF-pwn-tips"></a>原文:<a href="https://github.com/Naetw/CTF-pwn-tips" target="_blank" rel="noopener">https://github.com/Naetw/CTF-pwn-tips</a></h1><h1 id="译者-l0ser"><a href="#译者-l0ser" class="headerlink" title="译者:l0ser"></a>译者:l0ser</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Catalog&quot;&gt;&lt;a href=&quot;#Catalog&quot; class=&quot;headerlink&quot; title=&quot;Catalog&quot;&gt;&lt;/a&gt;Catalog&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://#overflow&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
      <category term="ctf-pwn" scheme="http://zero-mk.github.io/tags/ctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>Linux_System_Call_Table</title>
    <link href="http://zero-mk.github.io/2018/12/20/syscall/"/>
    <id>http://zero-mk.github.io/2018/12/20/syscall/</id>
    <published>2018-12-20T08:39:34.000Z</published>
    <updated>2018-12-31T18:11:12.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="x64-system-call"><a href="#x64-system-call" class="headerlink" title="x64_system_call:"></a>x64_system_call:</h1><p>原表位于 : <a href="http://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/" target="_blank" rel="noopener">http://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/</a></p><table><thead><tr><th>%rax</th><th>System call</th><th>%rdi</th><th>%rsi</th><th>%rdx</th><th>%r10</th><th>%r8</th><th>%r9</th></tr></thead><tbody><tr><td>0</td><td>sys_read</td><td>unsigned int fd</td><td>char *buf</td><td>size_t count</td><td></td><td></td><td></td></tr><tr><td>1</td><td>sys_write</td><td>unsigned int fd</td><td>const char *buf</td><td>size_t count</td><td></td><td></td><td></td></tr><tr><td>2</td><td>sys_open</td><td>const char *filename</td><td>int flags</td><td>int mode</td><td></td><td></td><td></td></tr><tr><td>3</td><td>sys_close</td><td>unsigned int fd</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>4</td><td>sys_stat</td><td>const char *filename</td><td>struct stat *statbuf</td><td></td><td></td><td></td><td></td></tr><tr><td>5</td><td>sys_fstat</td><td>unsigned int fd</td><td>struct stat *statbuf</td><td></td><td></td><td></td><td></td></tr><tr><td>6</td><td>sys_lstat</td><td>fconst char *filename</td><td>struct stat *statbuf</td><td></td><td></td><td></td><td></td></tr><tr><td>7</td><td>sys_poll</td><td>struct poll_fd *ufds</td><td>unsigned int nfds</td><td>long timeout_msecs</td><td></td><td></td><td></td></tr><tr><td>8</td><td>sys_lseek</td><td>unsigned int fd</td><td>off_t offset</td><td>unsigned int origin</td><td></td><td></td><td></td></tr><tr><td>9</td><td>sys_mmap</td><td>unsigned long addr</td><td>unsigned long len</td><td>unsigned long prot</td><td>unsigned long flags</td><td>unsigned long fd</td><td>unsigned long off</td></tr><tr><td>10</td><td>sys_mprotect</td><td>unsigned long start</td><td>size_t len</td><td>unsigned long prot</td><td></td><td></td><td></td></tr><tr><td>11</td><td>sys_munmap</td><td>unsigned long addr</td><td>size_t len</td><td></td><td></td><td></td><td></td></tr><tr><td>12</td><td>sys_brk</td><td>unsigned long brk</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>13</td><td>sys_rt_sigaction</td><td>int sig</td><td>const struct sigaction *act</td><td>struct sigaction *oact</td><td>size_t sigsetsize</td><td></td><td></td></tr><tr><td>14</td><td>sys_rt_sigprocmask</td><td>int how</td><td>sigset_t *nset</td><td>sigset_t *oset</td><td>size_t sigsetsize</td><td></td><td></td></tr><tr><td>15</td><td>sys_rt_sigreturn</td><td>unsigned long __unused</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>16</td><td>sys_ioctl</td><td>unsigned int fd</td><td>unsigned int cmd</td><td>unsigned long arg</td><td></td><td></td><td></td></tr><tr><td>17</td><td>sys_pread64</td><td>unsigned long fd</td><td>char *buf</td><td>size_t count</td><td>loff_t pos</td><td></td><td></td></tr><tr><td>18</td><td>sys_pwrite64</td><td>unsigned int fd</td><td>const char *buf</td><td>size_t count</td><td>loff_t pos</td><td></td><td></td></tr><tr><td>19</td><td>sys_readv</td><td>unsigned long fd</td><td>const struct iovec *vec</td><td>unsigned long vlen</td><td></td><td></td><td></td></tr><tr><td>20</td><td>sys_writev</td><td>unsigned long fd</td><td>const struct iovec *vec</td><td>unsigned long vlen</td><td></td><td></td><td></td></tr><tr><td>21</td><td>sys_access</td><td>const char *filename</td><td>int mode</td><td></td><td></td><td></td><td></td></tr><tr><td>22</td><td>sys_pipe</td><td>int *filedes</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>23</td><td>sys_select</td><td>int n</td><td>fd_set *inp</td><td>fd_set *outp</td><td>fd_set*exp</td><td>struct timeval *tvp</td><td></td></tr><tr><td>24</td><td>sys_sched_yield</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>25</td><td>sys_mremap</td><td>unsigned long addr</td><td>unsigned long old_len</td><td>unsigned long new_len</td><td>unsigned long flags</td><td>unsigned long new_addr</td><td></td></tr><tr><td>26</td><td>sys_msync</td><td>unsigned long start</td><td>size_t len</td><td>int flags</td><td></td><td></td><td></td></tr><tr><td>27</td><td>sys_mincore</td><td>unsigned long start</td><td>size_t len</td><td>unsigned char *vec</td><td></td><td></td><td></td></tr><tr><td>28</td><td>sys_madvise</td><td>unsigned long start</td><td>size_t len_in</td><td>int behavior</td><td></td><td></td><td></td></tr><tr><td>29</td><td>sys_shmget</td><td>key_t key</td><td>size_t size</td><td>int shmflg</td><td></td><td></td><td></td></tr><tr><td>30</td><td>sys_shmat</td><td>int shmid</td><td>char *shmaddr</td><td>int shmflg</td><td></td><td></td><td></td></tr><tr><td>31</td><td>sys_shmctl</td><td>int shmid</td><td>int cmd</td><td>struct shmid_ds *buf</td><td></td><td></td><td></td></tr><tr><td>32</td><td>sys_dup</td><td>unsigned int fildes</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>33</td><td>sys_dup2</td><td>unsigned int oldfd</td><td>unsigned int newfd</td><td></td><td></td><td></td><td></td></tr><tr><td>34</td><td>sys_pause</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>35</td><td>sys_nanosleep</td><td>struct timespec *rqtp</td><td>struct timespec *rmtp</td><td></td><td></td><td></td><td></td></tr><tr><td>36</td><td>sys_getitimer</td><td>int which</td><td>struct itimerval *value</td><td></td><td></td><td></td><td></td></tr><tr><td>37</td><td>sys_alarm</td><td>unsigned int seconds</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>38</td><td>sys_setitimer</td><td>int which</td><td>struct itimerval *value</td><td>struct itimerval *ovalue</td><td></td><td></td><td></td></tr><tr><td>39</td><td>sys_getpid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>40</td><td>sys_sendfile</td><td>int out_fd</td><td>int in_fd</td><td>off_t *offset</td><td>size_t count</td><td></td><td></td></tr><tr><td>41</td><td>sys_socket</td><td>int family</td><td>int type</td><td>int protocol</td><td></td><td></td><td></td></tr><tr><td>42</td><td>sys_connect</td><td>int fd</td><td>struct sockaddr *uservaddr</td><td>int addrlen</td><td></td><td></td><td></td></tr><tr><td>43</td><td>sys_accept</td><td>int fd</td><td>struct sockaddr *upeer_sockaddr</td><td>int *upeer_addrlen</td><td></td><td></td><td></td></tr><tr><td>44</td><td>sys_sendto</td><td>int fd</td><td>void *buff</td><td>size_t len</td><td>unsigned flags</td><td>struct sockaddr *addr</td><td>int addr_len</td></tr><tr><td>45</td><td>sys_recvfrom</td><td>int fd</td><td>void *ubuf</td><td>size_t size</td><td>unsigned flags</td><td>struct sockaddr *addr</td><td>int *addr_len</td></tr><tr><td>46</td><td>sys_sendmsg</td><td>int fd</td><td>struct msghdr *msg</td><td>unsigned flags</td><td></td><td></td><td></td></tr><tr><td>47</td><td>sys_recvmsg</td><td>int fd</td><td>struct msghdr *msg</td><td>unsigned int flags</td><td></td><td></td><td></td></tr><tr><td>48</td><td>sys_shutdown</td><td>int fd</td><td>int how</td><td></td><td></td><td></td><td></td></tr><tr><td>49</td><td>sys_bind</td><td>int fd</td><td>struct sokaddr *umyaddr</td><td>int addrlen</td><td></td><td></td><td></td></tr><tr><td>50</td><td>sys_listen</td><td>int fd</td><td>int backlog</td><td></td><td></td><td></td><td></td></tr><tr><td>51</td><td>sys_getsockname</td><td>int fd</td><td>struct sockaddr *usockaddr</td><td>int *usockaddr_len</td><td></td><td></td><td></td></tr><tr><td>52</td><td>sys_getpeername</td><td>int fd</td><td>struct sockaddr *usockaddr</td><td>int *usockaddr_len</td><td></td><td></td><td></td></tr><tr><td>53</td><td>sys_socketpair</td><td>int family</td><td>int type</td><td>int protocol</td><td>int *usockvec</td><td></td><td></td></tr><tr><td>54</td><td>sys_setsockopt</td><td>int fd</td><td>int level</td><td>int optname</td><td>char *optval</td><td>int optlen</td><td></td></tr><tr><td>55</td><td>sys_getsockopt</td><td>int fd</td><td>int level</td><td>int optname</td><td>char *optval</td><td>int *optlen</td><td></td></tr><tr><td>56</td><td>sys_clone</td><td>unsigned long clone_flags</td><td>unsigned long newsp</td><td>void *parent_tid</td><td>void *child_tid</td><td></td><td></td></tr><tr><td>57</td><td>sys_fork</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>58</td><td>sys_vfork</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>59</td><td>sys_execve</td><td>const char *filename</td><td>const char *const argv[]</td><td>const char *const envp[]</td><td></td><td></td><td></td></tr><tr><td>60</td><td>sys_exit</td><td>int error_code</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>61</td><td>sys_wait4</td><td>pid_t upid</td><td>int *stat_addr</td><td>int options</td><td>struct rusage *ru</td><td></td><td></td></tr><tr><td>62</td><td>sys_kill</td><td>pid_t pid</td><td>int sig</td><td></td><td></td><td></td><td></td></tr><tr><td>63</td><td>sys_uname</td><td>struct old_utsname *name</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>64</td><td>sys_semget</td><td>key_t key</td><td>int nsems</td><td>int semflg</td><td></td><td></td><td></td></tr><tr><td>65</td><td>sys_semop</td><td>int semid</td><td>struct sembuf *tsops</td><td>unsigned nsops</td><td></td><td></td><td></td></tr><tr><td>66</td><td>sys_semctl</td><td>int semid</td><td>int semnum</td><td>int cmd</td><td>union semun arg</td><td></td><td></td></tr><tr><td>67</td><td>sys_shmdt</td><td>char *shmaddr</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>68</td><td>sys_msgget</td><td>key_t key</td><td>int msgflg</td><td></td><td></td><td></td><td></td></tr><tr><td>69</td><td>sys_msgsnd</td><td>int msqid</td><td>struct msgbuf *msgp</td><td>size_t msgsz</td><td>int msgflg</td><td></td><td></td></tr><tr><td>70</td><td>sys_msgrcv</td><td>int msqid</td><td>struct msgbuf *msgp</td><td>size_t msgsz</td><td>long msgtyp</td><td>int msgflg</td><td></td></tr><tr><td>71</td><td>sys_msgctl</td><td>int msqid</td><td>int cmd</td><td>struct msqid_ds *buf</td><td></td><td></td><td></td></tr><tr><td>72</td><td>sys_fcntl</td><td>unsigned int fd</td><td>unsigned int cmd</td><td>unsigned long arg</td><td></td><td></td><td></td></tr><tr><td>73</td><td>sys_flock</td><td>unsigned int fd</td><td>unsigned int cmd</td><td></td><td></td><td></td><td></td></tr><tr><td>74</td><td>sys_fsync</td><td>unsigned int fd</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>75</td><td>sys_fdatasync</td><td>unsigned int fd</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>76</td><td>sys_truncate</td><td>const char *path</td><td>long length</td><td></td><td></td><td></td><td></td></tr><tr><td>77</td><td>sys_ftruncate</td><td>unsigned int fd</td><td>unsigned long length</td><td></td><td></td><td></td><td></td></tr><tr><td>78</td><td>sys_getdents</td><td>unsigned int fd</td><td>struct linux_dirent *dirent</td><td>unsigned int count</td><td></td><td></td><td></td></tr><tr><td>79</td><td>sys_getcwd</td><td>char *buf</td><td>unsigned long size</td><td></td><td></td><td></td><td></td></tr><tr><td>80</td><td>sys_chdir</td><td>const char *filename</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>81</td><td>sys_fchdir</td><td>unsigned int fd</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>82</td><td>sys_rename</td><td>const char *oldname</td><td>const char *newname</td><td></td><td></td><td></td><td></td></tr><tr><td>83</td><td>sys_mkdir</td><td>const char *pathname</td><td>int mode</td><td></td><td></td><td></td><td></td></tr><tr><td>84</td><td>sys_rmdir</td><td>const char *pathname</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>85</td><td>sys_creat</td><td>const char *pathname</td><td>int mode</td><td></td><td></td><td></td><td></td></tr><tr><td>86</td><td>sys_link</td><td>const char *oldname</td><td>const char *newname</td><td></td><td></td><td></td><td></td></tr><tr><td>87</td><td>sys_unlink</td><td>const char *pathname</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>88</td><td>sys_symlink</td><td>const char *oldname</td><td>const char *newname</td><td></td><td></td><td></td><td></td></tr><tr><td>89</td><td>sys_readlink</td><td>const char *path</td><td>char *buf</td><td>int bufsiz</td><td></td><td></td><td></td></tr><tr><td>90</td><td>sys_chmod</td><td>const char *filename</td><td>mode_t mode</td><td></td><td></td><td></td><td></td></tr><tr><td>91</td><td>sys_fchmod</td><td>unsigned int fd</td><td>mode_t mode</td><td></td><td></td><td></td><td></td></tr><tr><td>92</td><td>sys_chown</td><td>const char *filename</td><td>uid_t user</td><td>gid_t group</td><td></td><td></td><td></td></tr><tr><td>93</td><td>sys_fchown</td><td>unsigned int fd</td><td>uid_t user</td><td>gid_t group</td><td></td><td></td><td></td></tr><tr><td>94</td><td>sys_lchown</td><td>const char *filename</td><td>uid_t user</td><td>gid_t group</td><td></td><td></td><td></td></tr><tr><td>95</td><td>sys_umask</td><td>int mask</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>96</td><td>sys_gettimeofday</td><td>struct timeval *tv</td><td>struct timezone *tz</td><td></td><td></td><td></td><td></td></tr><tr><td>97</td><td>sys_getrlimit</td><td>unsigned int resource</td><td>struct rlimit *rlim</td><td></td><td></td><td></td><td></td></tr><tr><td>98</td><td>sys_getrusage</td><td>int who</td><td>struct rusage *ru</td><td></td><td></td><td></td><td></td></tr><tr><td>99</td><td>sys_sysinfo</td><td>struct sysinfo *info</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>100</td><td>sys_times</td><td>struct sysinfo *info</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>101</td><td>sys_ptrace</td><td>long request</td><td>long pid</td><td>unsigned long addr</td><td>unsigned long data</td><td></td><td></td></tr><tr><td>102</td><td>sys_getuid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>103</td><td>sys_syslog</td><td>int type</td><td>char *buf</td><td>int len</td><td></td><td></td><td></td></tr><tr><td>104</td><td>sys_getgid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>105</td><td>sys_setuid</td><td>uid_t uid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>106</td><td>sys_setgid</td><td>gid_t gid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>107</td><td>sys_geteuid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>108</td><td>sys_getegid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>109</td><td>sys_setpgid</td><td>pid_t pid</td><td>pid_t pgid</td><td></td><td></td><td></td><td></td></tr><tr><td>110</td><td>sys_getppid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>111</td><td>sys_getpgrp</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>112</td><td>sys_setsid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>113</td><td>sys_setreuid</td><td>uid_t ruid</td><td>uid_t euid</td><td></td><td></td><td></td><td></td></tr><tr><td>114</td><td>sys_setregid</td><td>gid_t rgid</td><td>gid_t egid</td><td></td><td></td><td></td><td></td></tr><tr><td>115</td><td>sys_getgroups</td><td>int gidsetsize</td><td>gid_t *grouplist</td><td></td><td></td><td></td><td></td></tr><tr><td>116</td><td>sys_setgroups</td><td>int gidsetsize</td><td>gid_t *grouplist</td><td></td><td></td><td></td><td></td></tr><tr><td>117</td><td>sys_setresuid</td><td>uid_t *ruid</td><td>uid_t *euid</td><td>uid_t *suid</td><td></td><td></td><td></td></tr><tr><td>118</td><td>sys_getresuid</td><td>uid_t *ruid</td><td>uid_t *euid</td><td>uid_t *suid</td><td></td><td></td><td></td></tr><tr><td>119</td><td>sys_setresgid</td><td>gid_t rgid</td><td>gid_t egid</td><td>gid_t sgid</td><td></td><td></td><td></td></tr><tr><td>120</td><td>sys_getresgid</td><td>gid_t *rgid</td><td>gid_t *egid</td><td>gid_t *sgid</td><td></td><td></td><td></td></tr><tr><td>121</td><td>sys_getpgid</td><td>pid_t pid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>122</td><td>sys_setfsuid</td><td>uid_t uid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>123</td><td>sys_setfsgid</td><td>gid_t gid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>124</td><td>sys_getsid</td><td>pid_t pid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>125</td><td>sys_capget</td><td>cap_user_header_t header</td><td>cap_user_data_t dataptr</td><td></td><td></td><td></td><td></td></tr><tr><td>126</td><td>sys_capset</td><td>cap_user_header_t header</td><td>const cap_user_data_t data</td><td></td><td></td><td></td><td></td></tr><tr><td>127</td><td>sys_rt_sigpending</td><td>sigset_t *set</td><td>size_t sigsetsize</td><td></td><td></td><td></td><td></td></tr><tr><td>128</td><td>sys_rt_sigtimedwait</td><td>const sigset_t *uthese</td><td>siginfo_t *uinfo</td><td>const struct timespec *uts</td><td>size_t sigsetsize</td><td></td><td></td></tr><tr><td>129</td><td>sys_rt_sigqueueinfo</td><td>pid_t pid</td><td>int sig</td><td>siginfo_t *uinfo</td><td></td><td></td><td></td></tr><tr><td>130</td><td>sys_rt_sigsuspend</td><td>sigset_t *unewset</td><td>size_t sigsetsize</td><td></td><td></td><td></td><td></td></tr><tr><td>131</td><td>sys_sigaltstack</td><td>const stack_t *uss</td><td>stack_t *uoss</td><td></td><td></td><td></td><td></td></tr><tr><td>132</td><td>sys_utime</td><td>char *filename</td><td>struct utimbuf *times</td><td></td><td></td><td></td><td></td></tr><tr><td>133</td><td>sys_mknod</td><td>const char *filename</td><td>umode_t mode</td><td>unsigned dev</td><td></td><td></td><td></td></tr><tr><td>134</td><td>sys_uselib</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>135</td><td>sys_personality</td><td>unsigned int personality</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>136</td><td>sys_ustat</td><td>unsigned dev</td><td>struct ustat *ubuf</td><td></td><td></td><td></td><td></td></tr><tr><td>137</td><td>sys_statfs</td><td>const char *pathname</td><td>struct statfs *buf</td><td></td><td></td><td></td><td></td></tr><tr><td>138</td><td>sys_fstatfs</td><td>unsigned int fd</td><td>struct statfs *buf</td><td></td><td></td><td></td><td></td></tr><tr><td>139</td><td>sys_sysfs</td><td>int option</td><td>unsigned long arg1</td><td>unsigned long arg2</td><td></td><td></td><td></td></tr><tr><td>140</td><td>sys_getpriority</td><td>int which</td><td>int who</td><td></td><td></td><td></td><td></td></tr><tr><td>141</td><td>sys_setpriority</td><td>int which</td><td>int who</td><td>int niceval</td><td></td><td></td><td></td></tr><tr><td>142</td><td>sys_sched_setparam</td><td>pid_t pid</td><td>struct sched_param *param</td><td></td><td></td><td></td><td></td></tr><tr><td>143</td><td>sys_sched_getparam</td><td>pid_t pid</td><td>struct sched_param *param</td><td></td><td></td><td></td><td></td></tr><tr><td>144</td><td>sys_sched_setscheduler</td><td>pid_t pid</td><td>int policy</td><td>struct sched_param *param</td><td></td><td></td><td></td></tr><tr><td>145</td><td>sys_sched_getscheduler</td><td>pid_t pid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>146</td><td>sys_sched_get_priority_max</td><td>int policy</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>147</td><td>sys_sched_get_priority_min</td><td>int policy</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>148</td><td>sys_sched_rr_get_interval</td><td>pid_t pid</td><td>struct timespec *interval</td><td></td><td></td><td></td><td></td></tr><tr><td>149</td><td>sys_mlock</td><td>unsigned long start</td><td>size_t len</td><td></td><td></td><td></td><td></td></tr><tr><td>150</td><td>sys_munlock</td><td>unsigned long start</td><td>size_t len</td><td></td><td></td><td></td><td></td></tr><tr><td>151</td><td>sys_mlockall</td><td>int flags</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>152</td><td>sys_munlockall</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>153</td><td>sys_vhangup</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>154</td><td>sys_modify_ldt</td><td>int func</td><td>void *ptr</td><td>unsigned long bytecount</td><td></td><td></td><td></td></tr><tr><td>155</td><td>sys_pivot_root</td><td>const char *new_root</td><td>const char *put_old</td><td></td><td></td><td></td><td></td></tr><tr><td>156</td><td>sys__sysctl</td><td>struct __sysctl_args *args</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>157</td><td>sys_prctl</td><td>int option</td><td>unsigned long arg2</td><td>unsigned long arg3</td><td>unsigned long arg4</td><td></td><td>unsigned long arg5</td></tr><tr><td>158</td><td>sys_arch_prctl</td><td>struct task_struct *task</td><td>int code</td><td>unsigned long *addr</td><td></td><td></td><td></td></tr><tr><td>159</td><td>sys_adjtimex</td><td>struct timex *txc_p</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>160</td><td>sys_setrlimit</td><td>unsigned int resource</td><td>struct rlimit *rlim</td><td></td><td></td><td></td><td></td></tr><tr><td>161</td><td>sys_chroot</td><td>const char *filename</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>162</td><td>sys_sync</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>163</td><td>sys_acct</td><td>const char *name</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>164</td><td>sys_settimeofday</td><td>struct timeval *tv</td><td>struct timezone *tz</td><td></td><td></td><td></td><td></td></tr><tr><td>165</td><td>sys_mount</td><td>char *dev_name</td><td>char *dir_name</td><td>char *type</td><td>unsigned long flags</td><td>void *data</td><td></td></tr><tr><td>166</td><td>sys_umount2</td><td>const char *target</td><td>int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>167</td><td>sys_swapon</td><td>const char *specialfile</td><td>int swap_flags</td><td></td><td></td><td></td><td></td></tr><tr><td>168</td><td>sys_swapoff</td><td>const char *specialfile</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>169</td><td>sys_reboot</td><td>int magic1</td><td>int magic2</td><td>unsigned int cmd</td><td>void *arg</td><td></td><td></td></tr><tr><td>170</td><td>sys_sethostname</td><td>char *name</td><td>int len</td><td></td><td></td><td></td><td></td></tr><tr><td>171</td><td>sys_setdomainname</td><td>char *name</td><td>int len</td><td></td><td></td><td></td><td></td></tr><tr><td>172</td><td>sys_iopl</td><td>unsigned int level</td><td>struct pt_regs *regs</td><td></td><td></td><td></td><td></td></tr><tr><td>173</td><td>sys_ioperm</td><td>unsigned long from</td><td>unsigned long num</td><td>int turn_on</td><td></td><td></td><td></td></tr><tr><td>174</td><td>sys_create_module</td><td>REMOVED IN Linux 2.6</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>175</td><td>sys_init_module</td><td>void *umod</td><td>unsigned long len</td><td>const char *uargs</td><td></td><td></td><td></td></tr><tr><td>176</td><td>sys_delete_module</td><td>const chat *name_user</td><td>unsigned int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>177</td><td>sys_get_kernel_syms</td><td>REMOVED IN Linux 2.6</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>178</td><td>sys_query_module</td><td>REMOVED IN Linux 2.6</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>179</td><td>sys_quotactl</td><td>unsigned int cmd</td><td>const char *special</td><td>qid_t id</td><td>void *addr</td><td></td><td></td></tr><tr><td>180</td><td>sys_nfsservctl</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>181</td><td>sys_getpmsg</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>182</td><td>sys_putpmsg</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>183</td><td>sys_afs_syscall</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>184</td><td>sys_tuxcall</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>185</td><td>sys_security</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>186</td><td>sys_gettid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>187</td><td>sys_readahead</td><td>int fd</td><td>loff_t offset</td><td>size_t count</td><td></td><td></td><td></td></tr><tr><td>188</td><td>sys_setxattr</td><td>const char *pathname</td><td>const char *name</td><td>const void *value</td><td>size_t size</td><td>int flags</td><td></td></tr><tr><td>189</td><td>sys_lsetxattr</td><td>const char *pathname</td><td>const char *name</td><td>const void *value</td><td>size_t size</td><td>int flags</td><td></td></tr><tr><td>190</td><td>sys_fsetxattr</td><td>int fd</td><td>const char *name</td><td>const void *value</td><td>size_t size</td><td>int flags</td><td></td></tr><tr><td>191</td><td>sys_getxattr</td><td>const char *pathname</td><td>const char *name</td><td>void *value</td><td>size_t size</td><td></td><td></td></tr><tr><td>192</td><td>sys_lgetxattr</td><td>const char *pathname</td><td>const char *name</td><td>void *value</td><td>size_t size</td><td></td><td></td></tr><tr><td>193</td><td>sys_fgetxattr</td><td>int fd</td><td>const har *name</td><td>void *value</td><td>size_t size</td><td></td><td></td></tr><tr><td>194</td><td>sys_listxattr</td><td>const char *pathname</td><td>char *list</td><td>size_t size</td><td></td><td></td><td></td></tr><tr><td>195</td><td>sys_llistxattr</td><td>const char *pathname</td><td>char *list</td><td>size_t size</td><td></td><td></td><td></td></tr><tr><td>196</td><td>sys_flistxattr</td><td>int fd</td><td>char *list</td><td>size_t size</td><td></td><td></td><td></td></tr><tr><td>197</td><td>sys_removexattr</td><td>const char *pathname</td><td>const char *name</td><td></td><td></td><td></td><td></td></tr><tr><td>198</td><td>sys_lremovexattr</td><td>const char *pathname</td><td>const char *name</td><td></td><td></td><td></td><td></td></tr><tr><td>199</td><td>sys_fremovexattr</td><td>int fd</td><td>const char *name</td><td></td><td></td><td></td><td></td></tr><tr><td>200</td><td>sys_tkill</td><td>pid_t pid</td><td>ing sig</td><td></td><td></td><td></td><td></td></tr><tr><td>201</td><td>sys_time</td><td>time_t *tloc</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>202</td><td>sys_futex</td><td>u32 *uaddr</td><td>int op</td><td>u32 val</td><td>struct timespec *utime</td><td>u32 *uaddr2</td><td>u32 val3</td></tr><tr><td>203</td><td>sys_sched_setaffinity</td><td>pid_t pid</td><td>unsigned int len</td><td>unsigned long *user_mask_ptr</td><td></td><td></td><td></td></tr><tr><td>204</td><td>sys_sched_getaffinity</td><td>pid_t pid</td><td>unsigned int len</td><td>unsigned long *user_mask_ptr</td><td></td><td></td><td></td></tr><tr><td>205</td><td>sys_set_thread_area</td><td>NOT IMPLEMENTED. Use arch_prctl</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>206</td><td>sys_io_setup</td><td>unsigned nr_events</td><td>aio_context_t *ctxp</td><td></td><td></td><td></td><td></td></tr><tr><td>207</td><td>sys_io_destroy</td><td>aio_context_t ctx</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>208</td><td>sys_io_getevents</td><td>aio_context_t ctx_id</td><td>long min_nr</td><td>long nr</td><td>struct io_event *events</td><td></td><td></td></tr><tr><td>209</td><td>sys_io_submit</td><td>aio_context_t ctx_id</td><td>long nr</td><td>struct iocb **iocbpp</td><td></td><td></td><td></td></tr><tr><td>210</td><td>sys_io_cancel</td><td>aio_context_t ctx_id</td><td>struct iocb *iocb</td><td>struct io_event *result</td><td></td><td></td><td></td></tr><tr><td>211</td><td>sys_get_thread_area</td><td>NOT IMPLEMENTED. Use arch_prctl</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>212</td><td>sys_lookup_dcookie</td><td>u64 cookie64</td><td>long buf</td><td>long len</td><td></td><td></td><td></td></tr><tr><td>213</td><td>sys_epoll_create</td><td>int size</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>214</td><td>sys_epoll_ctl_old</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>215</td><td>sys_epoll_wait_old</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>216</td><td>sys_remap_file_pages</td><td>unsigned long start</td><td>unsigned long size</td><td>unsigned long prot</td><td>unsigned long pgoff</td><td>unsigned long flags</td><td></td></tr><tr><td>217</td><td>sys_getdents64</td><td>unsigned int fd</td><td>struct linux_dirent64 *dirent</td><td>unsigned int count</td><td></td><td></td><td></td></tr><tr><td>218</td><td>sys_set_tid_address</td><td>int *tidptr</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>219</td><td>sys_restart_syscall</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>220</td><td>sys_semtimedop</td><td>int semid</td><td>struct sembuf *tsops</td><td>unsigned nsops</td><td>const struct timespec *timeout</td><td></td><td></td></tr><tr><td>221</td><td>sys_fadvise64</td><td>int fd</td><td>loff_t offset</td><td>size_t len</td><td>int advice</td><td></td><td></td></tr><tr><td>222</td><td>sys_timer_create</td><td>const clockid_t which_clock</td><td>struct sigevent *timer_event_spec</td><td>timer_t *created_timer_id</td><td></td><td></td><td></td></tr><tr><td>223</td><td>sys_timer_settime</td><td>timer_t timer_id</td><td>int flags</td><td>const struct itimerspec *new_setting</td><td>struct itimerspec *old_setting</td><td></td><td></td></tr><tr><td>224</td><td>sys_timer_gettime</td><td>timer_t timer_id</td><td>struct itimerspec *setting</td><td></td><td></td><td></td><td></td></tr><tr><td>225</td><td>sys_timer_getoverrun</td><td>timer_t timer_id</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>226</td><td>sys_timer_delete</td><td>timer_t timer_id</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>227</td><td>sys_clock_settime</td><td>const clockid_t which_clock</td><td>const struct timespec *tp</td><td></td><td></td><td></td><td></td></tr><tr><td>228</td><td>sys_clock_gettime</td><td>const clockid_t which_clock</td><td>struct timespec *tp</td><td></td><td></td><td></td><td></td></tr><tr><td>229</td><td>sys_clock_getres</td><td>const clockid_t which_clock</td><td>struct timespec *tp</td><td></td><td></td><td></td><td></td></tr><tr><td>230</td><td>sys_clock_nanosleep</td><td>const clockid_t which_clock</td><td>int flags</td><td>const struct timespec *rqtp</td><td>struct timespec *rmtp</td><td></td><td></td></tr><tr><td>231</td><td>sys_exit_group</td><td>int error_code</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>232</td><td>sys_epoll_wait</td><td>int epfd</td><td>struct epoll_event *events</td><td>int maxevents</td><td>int timeout</td><td></td><td></td></tr><tr><td>233</td><td>sys_epoll_ctl</td><td>int epfd</td><td>int op</td><td>int fd</td><td>struct epoll_event *event</td><td></td><td></td></tr><tr><td>234</td><td>sys_tgkill</td><td>pid_t tgid</td><td>pid_t pid</td><td>int sig</td><td></td><td></td><td></td></tr><tr><td>235</td><td>sys_utimes</td><td>char *filename</td><td>struct timeval *utimes</td><td></td><td></td><td></td><td></td></tr><tr><td>236</td><td>sys_vserver</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>237</td><td>sys_mbind</td><td>unsigned long start</td><td>unsigned long len</td><td>unsigned long mode</td><td>unsigned long *nmask</td><td>unsigned long maxnode</td><td>unsigned flags</td></tr><tr><td>238</td><td>sys_set_mempolicy</td><td>int mode</td><td>unsigned long *nmask</td><td>unsigned long maxnode</td><td></td><td></td><td></td></tr><tr><td>239</td><td>sys_get_mempolicy</td><td>int *policy</td><td>unsigned long *nmask</td><td>unsigned long maxnode</td><td>unsigned long addr</td><td>unsigned long flags</td><td></td></tr><tr><td>240</td><td>sys_mq_open</td><td>const char *u_name</td><td>int oflag</td><td>mode_t mode</td><td>struct mq_attr *u_attr</td><td></td><td></td></tr><tr><td>241</td><td>sys_mq_unlink</td><td>const char *u_name</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>242</td><td>sys_mq_timedsend</td><td>mqd_t mqdes</td><td>const char *u_msg_ptr</td><td>size_t msg_len</td><td>unsigned int msg_prio</td><td>const stuct timespec *u_abs_timeout</td><td></td></tr><tr><td>243</td><td>sys_mq_timedreceive</td><td>mqd_t mqdes</td><td>char *u_msg_ptr</td><td>size_t msg_len</td><td>unsigned int *u_msg_prio</td><td>const struct timespec *u_abs_timeout</td><td></td></tr><tr><td>244</td><td>sys_mq_notify</td><td>mqd_t mqdes</td><td>const struct sigevent *u_notification</td><td></td><td></td><td></td><td></td></tr><tr><td>245</td><td>sys_mq_getsetattr</td><td>mqd_t mqdes</td><td>const struct mq_attr *u_mqstat</td><td>struct mq_attr *u_omqstat</td><td></td><td></td><td></td></tr><tr><td>246</td><td>sys_kexec_load</td><td>unsigned long entry</td><td>unsigned long nr_segments</td><td>struct kexec_segment *segments</td><td>unsigned long flags</td><td></td><td></td></tr><tr><td>247</td><td>sys_waitid</td><td>int which</td><td>pid_t upid</td><td>struct siginfo *infop</td><td>int options</td><td>struct rusage *ru</td><td></td></tr><tr><td>248</td><td>sys_add_key</td><td>const char *_type</td><td>const char *_description</td><td>const void *_payload</td><td>size_t plen</td><td></td><td></td></tr><tr><td>249</td><td>sys_request_key</td><td>const char *_type</td><td>const char *_description</td><td>const char *_callout_info</td><td>key_serial_t destringid</td><td></td><td></td></tr><tr><td>250</td><td>sys_keyctl</td><td>int option</td><td>unsigned long arg2</td><td>unsigned long arg3</td><td>unsigned long arg4</td><td>unsigned long arg5</td><td></td></tr><tr><td>251</td><td>sys_ioprio_set</td><td>int which</td><td>int who</td><td>int ioprio</td><td></td><td></td><td></td></tr><tr><td>252</td><td>sys_ioprio_get</td><td>int which</td><td>int who</td><td></td><td></td><td></td><td></td></tr><tr><td>253</td><td>sys_inotify_init</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>254</td><td>sys_inotify_add_watch</td><td>int fd</td><td>const char *pathname</td><td>u32 mask</td><td></td><td></td><td></td></tr><tr><td>255</td><td>sys_inotify_rm_watch</td><td>int fd</td><td>__s32 wd</td><td></td><td></td><td></td><td></td></tr><tr><td>256</td><td>sys_migrate_pages</td><td>pid_t pid</td><td>unsigned long maxnode</td><td>const unsigned long *old_nodes</td><td>const unsigned long *new_nodes</td><td></td><td></td></tr><tr><td>257</td><td>sys_openat</td><td>int dfd</td><td>const char *filename</td><td>int flags</td><td>int mode</td><td></td><td></td></tr><tr><td>258</td><td>sys_mkdirat</td><td>int dfd</td><td>const char *pathname</td><td>int mode</td><td></td><td></td><td></td></tr><tr><td>259</td><td>sys_mknodat</td><td>int dfd</td><td>const char *filename</td><td>int mode</td><td>unsigned dev</td><td></td><td></td></tr><tr><td>260</td><td>sys_fchownat</td><td>int dfd</td><td>const char *filename</td><td>uid_t user</td><td>gid_t group</td><td>int flag</td><td></td></tr><tr><td>261</td><td>sys_futimesat</td><td>int dfd</td><td>const char *filename</td><td>struct timeval *utimes</td><td></td><td></td><td></td></tr><tr><td>262</td><td>sys_newfstatat</td><td>int dfd</td><td>const char *filename</td><td>struct stat *statbuf</td><td>int flag</td><td></td><td></td></tr><tr><td>263</td><td>sys_unlinkat</td><td>int dfd</td><td>const char *pathname</td><td>int flag</td><td></td><td></td><td></td></tr><tr><td>264</td><td>sys_renameat</td><td>int oldfd</td><td>const char *oldname</td><td>int newfd</td><td>const char *newname</td><td></td><td></td></tr><tr><td>265</td><td>sys_linkat</td><td>int oldfd</td><td>const char *oldname</td><td>int newfd</td><td>const char *newname</td><td>int flags</td><td></td></tr><tr><td>266</td><td>sys_symlinkat</td><td>const char *oldname</td><td>int newfd</td><td>const char *newname</td><td></td><td></td><td></td></tr><tr><td>267</td><td>sys_readlinkat</td><td>int dfd</td><td>const char *pathname</td><td>char *buf</td><td>int bufsiz</td><td></td><td></td></tr><tr><td>268</td><td>sys_fchmodat</td><td>int dfd</td><td>const char *filename</td><td>mode_t mode</td><td></td><td></td><td></td></tr><tr><td>269</td><td>sys_faccessat</td><td>int dfd</td><td>const char *filename</td><td>int mode</td><td></td><td></td><td></td></tr><tr><td>270</td><td>sys_pselect6</td><td>int n</td><td>fd_set *inp</td><td>fd_set *outp</td><td>fd_set *exp</td><td>struct timespec *tsp</td><td>void *sig</td></tr><tr><td>271</td><td>sys_ppoll</td><td>struct pollfd *ufds</td><td>unsigned int nfds</td><td>struct timespec *tsp</td><td>const sigset_t *sigmask</td><td>size_t sigsetsize</td><td></td></tr><tr><td>272</td><td>sys_unshare</td><td>unsigned long unshare_flags</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>273</td><td>sys_set_robust_list</td><td>struct robust_list_head *head</td><td>size_t len</td><td></td><td></td><td></td><td></td></tr><tr><td>274</td><td>sys_get_robust_list</td><td>int pid</td><td>struct robust_list_head **head_ptr</td><td>size_t *len_ptr</td><td></td><td></td><td></td></tr><tr><td>275</td><td>sys_splice</td><td>int fd_in</td><td>loff_t *off_in</td><td>int fd_out</td><td>loff_t *off_out</td><td>size_t len</td><td>unsigned int flags</td></tr><tr><td>276</td><td>sys_tee</td><td>int fdin</td><td>int fdout</td><td>size_t len</td><td>unsigned int flags</td><td></td><td></td></tr><tr><td>277</td><td>sys_sync_file_range</td><td>long fd</td><td>loff_t offset</td><td>loff_t bytes</td><td>long flags</td><td></td><td></td></tr><tr><td>278</td><td>sys_vmsplice</td><td>int fd</td><td>const struct iovec *iov</td><td>unsigned long nr_segs</td><td>unsigned int flags</td><td></td><td></td></tr><tr><td>279</td><td>sys_move_pages</td><td>pid_t pid</td><td>unsigned long nr_pages</td><td>const void **pages</td><td>const int *nodes</td><td>int *status</td><td>int flags</td></tr><tr><td>280</td><td>sys_utimensat</td><td>int dfd</td><td>const char *filename</td><td>struct timespec *utimes</td><td>int flags</td><td></td><td></td></tr><tr><td>281</td><td>sys_epoll_pwait</td><td>int epfd</td><td>struct epoll_event *events</td><td>int maxevents</td><td>int timeout</td><td>const sigset_t *sigmask</td><td>size_t sigsetsize</td></tr><tr><td>282</td><td>sys_signalfd</td><td>int ufd</td><td>sigset_t *user_mask</td><td>size_t sizemask</td><td></td><td></td><td></td></tr><tr><td>283</td><td>sys_timerfd_create</td><td>int clockid</td><td>int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>284</td><td>sys_eventfd</td><td>unsigned int count</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>285</td><td>sys_fallocate</td><td>long fd</td><td>long mode</td><td>loff_t offset</td><td>loff_t len</td><td></td><td></td></tr><tr><td>286</td><td>sys_timerfd_settime</td><td>int ufd</td><td>int flags</td><td>const struct itimerspec *utmr</td><td>struct itimerspec *otmr</td><td></td><td></td></tr><tr><td>287</td><td>sys_timerfd_gettime</td><td>int ufd</td><td>struct itimerspec *otmr</td><td></td><td></td><td></td><td></td></tr><tr><td>288</td><td>sys_accept4</td><td>int fd</td><td>struct sockaddr *upeer_sockaddr</td><td>int *upeer_addrlen</td><td>int flags</td><td></td><td></td></tr><tr><td>289</td><td>sys_signalfd4</td><td>int ufd</td><td>sigset_t *user_mask</td><td>size_t sizemask</td><td>int flags</td><td></td><td></td></tr><tr><td>290</td><td>sys_eventfd2</td><td>unsigned int count</td><td>int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>291</td><td>sys_epoll_create1</td><td>int flags</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>292</td><td>sys_dup3</td><td>unsigned int oldfd</td><td>unsigned int newfd</td><td>int flags</td><td></td><td></td><td></td></tr><tr><td>293</td><td>sys_pipe2</td><td>int *filedes</td><td>int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>294</td><td>sys_inotify_init1</td><td>int flags</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>295</td><td>sys_preadv</td><td>unsigned long fd</td><td>const struct iovec *vec</td><td>unsigned long vlen</td><td>unsigned long pos_l</td><td>unsigned long pos_h</td><td></td></tr><tr><td>296</td><td>sys_pwritev</td><td>unsigned long fd</td><td>const struct iovec *vec</td><td>unsigned long vlen</td><td>unsigned long pos_l</td><td>unsigned long pos_h</td><td></td></tr><tr><td>297</td><td>sys_rt_tgsigqueueinfo</td><td>pid_t tgid</td><td>pid_t pid</td><td>int sig</td><td>siginfo_t *uinfo</td><td></td><td></td></tr><tr><td>298</td><td>sys_perf_event_open</td><td>struct perf_event_attr *attr_uptr</td><td>pid_t pid</td><td>int cpu</td><td>int group_fd</td><td>unsigned long flags</td><td></td></tr><tr><td>299</td><td>sys_recvmmsg</td><td>int fd</td><td>struct msghdr *mmsg</td><td>unsigned int vlen</td><td>unsigned int flags</td><td>struct timespec *timeout</td><td></td></tr><tr><td>300</td><td>sys_fanotify_init</td><td>unsigned int flags</td><td>unsigned int event_f_flags</td><td></td><td></td><td></td><td></td></tr><tr><td>301</td><td>sys_fanotify_mark</td><td>long fanotify_fd</td><td>long flags</td><td>__u64 mask</td><td>long dfd</td><td>long pathname</td><td></td></tr><tr><td>302</td><td>sys_prlimit64</td><td>pid_t pid</td><td>unsigned int resource</td><td>const struct rlimit64 *new_rlim</td><td>struct rlimit64 *old_rlim</td><td></td><td></td></tr><tr><td>303</td><td>sys_name_to_handle_at</td><td>int dfd</td><td>const char *name</td><td>struct file_handle *handle</td><td>int *mnt_id</td><td>int flag</td><td></td></tr><tr><td>304</td><td>sys_open_by_handle_at</td><td>int dfd</td><td>const char *name</td><td>struct file_handle *handle</td><td>int *mnt_id</td><td>int flags</td><td></td></tr><tr><td>305</td><td>sys_clock_adjtime</td><td>clockid_t which_clock</td><td>struct timex *tx</td><td></td><td></td><td></td><td></td></tr><tr><td>306</td><td>sys_syncfs</td><td>int fd</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>307</td><td>sys_sendmmsg</td><td>int fd</td><td>struct mmsghdr *mmsg</td><td>unsigned int vlen</td><td>unsigned int flags</td><td></td><td></td></tr><tr><td>308</td><td>sys_setns</td><td>int fd</td><td>int nstype</td><td></td><td></td><td></td><td></td></tr><tr><td>309</td><td>sys_getcpu</td><td>unsigned *cpup</td><td>unsigned *nodep</td><td>struct getcpu_cache *unused</td><td></td><td></td><td></td></tr><tr><td>310</td><td>sys_process_vm_readv</td><td>pid_t pid</td><td>const struct iovec *lvec</td><td>unsigned long liovcnt</td><td>const struct iovec *rvec</td><td>unsigned long riovcnt</td><td>unsigned long flags</td></tr><tr><td>311</td><td>sys_process_vm_writev</td><td>pid_t pid</td><td>const struct iovec *lvec</td><td>unsigned long liovcnt</td><td>const struct iovcc *rvec</td><td>unsigned long riovcnt</td><td>unsigned long flags</td></tr><tr><td>312</td><td>sys_kcmp</td><td>pid_t pid1</td><td>pid_t pid2</td><td>int type</td><td>unsigned long idx1</td><td>unsigned long idx2</td><td></td></tr><tr><td>313</td><td>sys_finit_module</td><td>int fd</td><td>const char __user *uargs</td><td>int flags</td><td></td><td></td><td></td></tr><tr><td>314</td><td>sys_sched_setattr</td><td>pid_t pid</td><td>struct sched_attr __user *attr</td><td>unsigned int flags</td><td></td><td></td><td></td></tr><tr><td>315</td><td>sys_sched_getattr</td><td>pid_t pid</td><td>struct sched_attr __user *attr</td><td>unsigned int size</td><td>unsigned int flags</td><td></td><td></td></tr><tr><td>316</td><td>sys_renameat2</td><td>int olddfd</td><td>const char __user *oldname</td><td>int newdfd</td><td>const char __user *newname</td><td>unsigned int flags</td><td></td></tr><tr><td>317</td><td>sys_seccomp</td><td>unsigned int op</td><td>unsigned int flags</td><td>const char __user *uargs</td><td></td><td></td><td></td></tr><tr><td>318</td><td>sys_getrandom</td><td>char __user *buf</td><td>size_t count</td><td>unsigned int flags</td><td></td><td></td><td></td></tr><tr><td>319</td><td>sys_memfd_create</td><td>const char __user *uname_ptr</td><td>unsigned int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>320</td><td>sys_kexec_file_load</td><td>int kernel_fd</td><td>int initrd_fd</td><td>unsigned long cmdline_len</td><td>const char __user *cmdline_ptr</td><td>unsigned long flags</td><td></td></tr><tr><td>321</td><td>sys_bpf</td><td>int cmd</td><td>union bpf_attr *attr</td><td>unsigned int size</td><td></td><td></td><td></td></tr><tr><td>322</td><td>stub_execveat</td><td>int dfd</td><td>const char __user *filename</td><td>const char <strong>user *const</strong> user *argv</td><td>const char <strong>user *const</strong> user *envp</td><td>int flags</td><td></td></tr><tr><td>323</td><td>userfaultfd</td><td>int flags</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>324</td><td>membarrier</td><td>int cmd</td><td>int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>325</td><td>mlock2</td><td>unsigned long start</td><td>size_t len</td><td>int flags</td><td></td><td></td><td></td></tr><tr><td>326</td><td>copy_file_range</td><td>int fd_in</td><td>loff_t __user *off_in</td><td>int fd_out</td><td>loff_t __user * off_out</td><td>size_t len</td><td>unsigned int flags</td></tr><tr><td>327</td><td>preadv2</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>unsigned long pos_l</td><td>unsigned long pos_h</td><td>int flags</td></tr><tr><td>328</td><td>pwritev2</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>unsigned long pos_l</td><td>unsigned long pos_h</td><td>int flags</td></tr></tbody></table><h1 id="x86-system-call"><a href="#x86-system-call" class="headerlink" title="x86_system_call:"></a>x86_system_call:</h1><p>原表地址 : <a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html" target="_blank" rel="noopener">https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html</a></p><table><thead><tr><th>%eax</th><th>Name</th><th>Source</th><th>%ebx</th><th>%ecx</th><th>%edx</th><th>%esx</th><th>%edi</th></tr></thead><tbody><tr><td>1</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/exit.2.html" target="_blank" rel="noopener">sys_exit</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/exit.c" target="_blank" rel="noopener">kernel/exit.c</a></td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>2</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/fork.2.html" target="_blank" rel="noopener">sys_fork</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/process.c" target="_blank" rel="noopener">arch/i386/kernel/process.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pt_regs" target="_blank" rel="noopener">struct pt_regs</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>3</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/read.2.html" target="_blank" rel="noopener">sys_read</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/read_write.c" target="_blank" rel="noopener">fs/read_write.c</a></td><td>unsigned int</td><td>char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td><td>-</td></tr><tr><td>4</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/write.2.html" target="_blank" rel="noopener">sys_write</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/read_write.c" target="_blank" rel="noopener">fs/read_write.c</a></td><td>unsigned int</td><td>const char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td><td>-</td></tr><tr><td>5</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/open.2.html" target="_blank" rel="noopener">sys_open</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>const char *</td><td>int</td><td>int</td><td>-</td><td>-</td></tr><tr><td>6</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/close.2.html" target="_blank" rel="noopener">sys_close</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>unsigned int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>7</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/waitpid.2.html" target="_blank" rel="noopener">sys_waitpid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/exit.c" target="_blank" rel="noopener">kernel/exit.c</a></td><td>pid_t</td><td>unsigned int *</td><td>int</td><td>-</td><td>-</td></tr><tr><td>8</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/creat.2.html" target="_blank" rel="noopener">sys_creat</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>const char *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>9</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/link.2.html" target="_blank" rel="noopener">sys_link</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/namei.c" target="_blank" rel="noopener">fs/namei.c</a></td><td>const char *</td><td>const char *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>10</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/unlink.2.html" target="_blank" rel="noopener">sys_unlink</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/namei.c" target="_blank" rel="noopener">fs/namei.c</a></td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>11</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/execve.2.html" target="_blank" rel="noopener">sys_execve</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/process.c" target="_blank" rel="noopener">arch/i386/kernel/process.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pt_regs" target="_blank" rel="noopener">struct pt_regs</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>12</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/chdir.2.html" target="_blank" rel="noopener">sys_chdir</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>13</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/time.2.html" target="_blank" rel="noopener">sys_time</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/time.c" target="_blank" rel="noopener">kernel/time.c</a></td><td>int *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>14</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/mknod.2.html" target="_blank" rel="noopener">sys_mknod</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/namei.c" target="_blank" rel="noopener">fs/namei.c</a></td><td>const char *</td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#dev_t" target="_blank" rel="noopener">dev_t</a></td><td>-</td><td>-</td></tr><tr><td>15</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/chmod.2.html" target="_blank" rel="noopener">sys_chmod</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>const char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#mode_t" target="_blank" rel="noopener">mode_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>16</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/lchown.2.html" target="_blank" rel="noopener">sys_lchown</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>const char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t</a></td><td>-</td><td>-</td></tr><tr><td>18</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/stat.2.html" target="_blank" rel="noopener">sys_stat</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/stat.c" target="_blank" rel="noopener">fs/stat.c</a></td><td>char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#__old_kernel_stat" target="_blank" rel="noopener">struct __old_kernel_stat *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>19</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/lseek.2.html" target="_blank" rel="noopener">sys_lseek</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/read_write.c" target="_blank" rel="noopener">fs/read_write.c</a></td><td>unsigned int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#off_t" target="_blank" rel="noopener">off_t</a></td><td>unsigned int</td><td>-</td><td>-</td></tr><tr><td>20</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getpid.2.html" target="_blank" rel="noopener">sys_getpid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>21</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/mount.2.html" target="_blank" rel="noopener">sys_mount</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/super.c" target="_blank" rel="noopener">fs/super.c</a></td><td>char *</td><td>char *</td><td>char *</td><td>-</td><td>-</td></tr><tr><td>22</td><td>sys_oldumount</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/super.c" target="_blank" rel="noopener">fs/super.c</a></td><td>char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>23</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setuid.2.html" target="_blank" rel="noopener">sys_setuid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>24</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getuid.2.html" target="_blank" rel="noopener">sys_getuid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>25</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/stime.2.html" target="_blank" rel="noopener">sys_stime</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/time.c" target="_blank" rel="noopener">kernel/time.c</a></td><td>int *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>26</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/ptrace.2.html" target="_blank" rel="noopener">sys_ptrace</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/ptrace.c" target="_blank" rel="noopener">arch/i386/kernel/ptrace.c</a></td><td>long</td><td>long</td><td>long</td><td>long</td><td>-</td></tr><tr><td>27</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/alarm.2.html" target="_blank" rel="noopener">sys_alarm</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>unsigned int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>28</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/fstat.2.html" target="_blank" rel="noopener">sys_fstat</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/stat.c" target="_blank" rel="noopener">fs/stat.c</a></td><td>unsigned int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#__old_kernel_stat" target="_blank" rel="noopener">struct __old_kernel_stat *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>29</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/pause.2.html" target="_blank" rel="noopener">sys_pause</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/sys_i386.c" target="_blank" rel="noopener">arch/i386/kernel/sys_i386.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>30</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/utime.2.html" target="_blank" rel="noopener">sys_utime</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#utimbuf" target="_blank" rel="noopener">struct utimbuf *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>33</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/access.2.html" target="_blank" rel="noopener">sys_access</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>const char *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>34</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/nice.2.html" target="_blank" rel="noopener">sys_nice</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>36</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sync.2.html" target="_blank" rel="noopener">sys_sync</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/buffer.c" target="_blank" rel="noopener">fs/buffer.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>37</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/kill.2.html" target="_blank" rel="noopener">sys_kill</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td>int</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>38</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/rename.2.html" target="_blank" rel="noopener">sys_rename</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/namei.c" target="_blank" rel="noopener">fs/namei.c</a></td><td>const char *</td><td>const char *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>39</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/mkdir.2.html" target="_blank" rel="noopener">sys_mkdir</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/namei.c" target="_blank" rel="noopener">fs/namei.c</a></td><td>const char *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>40</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/rmdir.2.html" target="_blank" rel="noopener">sys_rmdir</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/namei.c" target="_blank" rel="noopener">fs/namei.c</a></td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>41</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/dup.2.html" target="_blank" rel="noopener">sys_dup</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/fcntl.c" target="_blank" rel="noopener">fs/fcntl.c</a></td><td>unsigned int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>42</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/pipe.2.html" target="_blank" rel="noopener">sys_pipe</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/sys_i386.c" target="_blank" rel="noopener">arch/i386/kernel/sys_i386.c</a></td><td>unsigned long *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>43</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/times.2.html" target="_blank" rel="noopener">sys_times</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#tms" target="_blank" rel="noopener">struct tms *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>45</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/brk.2.html" target="_blank" rel="noopener">sys_brk</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/mmap.c" target="_blank" rel="noopener">mm/mmap.c</a></td><td>unsigned long</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>46</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setgid.2.html" target="_blank" rel="noopener">sys_setgid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>47</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getgid.2.html" target="_blank" rel="noopener">sys_getgid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>48</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/signal.2.html" target="_blank" rel="noopener">sys_signal</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#__sighandler_t" target="_blank" rel="noopener">__sighandler_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>49</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/geteuid.2.html" target="_blank" rel="noopener">sys_geteuid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>50</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getegid.2.html" target="_blank" rel="noopener">sys_getegid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>51</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/acct.2.html" target="_blank" rel="noopener">sys_acct</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/acct.c" target="_blank" rel="noopener">kernel/acct.c</a></td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>52</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/umount.2.html" target="_blank" rel="noopener">sys_umount</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/super.c" target="_blank" rel="noopener">fs/super.c</a></td><td>char *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>54</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/ioctl.2.html" target="_blank" rel="noopener">sys_ioctl</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/ioctl.c" target="_blank" rel="noopener">fs/ioctl.c</a></td><td>unsigned int</td><td>unsigned int</td><td>unsigned long</td><td>-</td><td>-</td></tr><tr><td>55</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/fcntl.2.html" target="_blank" rel="noopener">sys_fcntl</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/fcntl.c" target="_blank" rel="noopener">fs/fcntl.c</a></td><td>unsigned int</td><td>unsigned int</td><td>unsigned long</td><td>-</td><td>-</td></tr><tr><td>57</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setpgid.2.html" target="_blank" rel="noopener">sys_setpgid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pid_t" target="_blank" rel="noopener">pid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pid_t" target="_blank" rel="noopener">pid_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>59</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/olduname.2.html" target="_blank" rel="noopener">sys_olduname</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/sys_i386.c" target="_blank" rel="noopener">arch/i386/kernel/sys_i386.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#oldold_utsname" target="_blank" rel="noopener">struct oldold_utsname *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>60</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/umask.2.html" target="_blank" rel="noopener">sys_umask</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>61</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/chroot.2.html" target="_blank" rel="noopener">sys_chroot</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>62</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/ustat.2.html" target="_blank" rel="noopener">sys_ustat</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/super.c" target="_blank" rel="noopener">fs/super.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#dev_t" target="_blank" rel="noopener">dev_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#ustat" target="_blank" rel="noopener">struct ustat *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>63</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/dup2.2.html" target="_blank" rel="noopener">sys_dup2</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/fcntl.c" target="_blank" rel="noopener">fs/fcntl.c</a></td><td>unsigned int</td><td>unsigned int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>64</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getppid.2.html" target="_blank" rel="noopener">sys_getppid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>65</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getpgrp.2.html" target="_blank" rel="noopener">sys_getpgrp</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>66</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setsid.2.html" target="_blank" rel="noopener">sys_setsid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>67</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sigaction.2.html" target="_blank" rel="noopener">sys_sigaction</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/signal.c" target="_blank" rel="noopener">arch/i386/kernel/signal.c</a></td><td>int</td><td>const <a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#old_sigaction" target="_blank" rel="noopener">struct old_sigaction *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#old_sigaction" target="_blank" rel="noopener">struct old_sigaction *</a></td><td>-</td><td>-</td></tr><tr><td>68</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sgetmask.2.html" target="_blank" rel="noopener">sys_sgetmask</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>69</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/ssetmask.2.html" target="_blank" rel="noopener">sys_ssetmask</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>70</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setreuid.2.html" target="_blank" rel="noopener">sys_setreuid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>71</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setregid.2.html" target="_blank" rel="noopener">sys_setregid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>72</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sigsuspend.2.html" target="_blank" rel="noopener">sys_sigsuspend</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/signal.c" target="_blank" rel="noopener">arch/i386/kernel/signal.c</a></td><td>int</td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#old_sigset_t" target="_blank" rel="noopener">old_sigset_t</a></td><td>-</td><td>-</td></tr><tr><td>73</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sigpending.2.html" target="_blank" rel="noopener">sys_sigpending</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#old_sigset_t" target="_blank" rel="noopener">old_sigset_t *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>74</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sethostname.2.html" target="_blank" rel="noopener">sys_sethostname</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>char *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>75</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setrlimit.2.html" target="_blank" rel="noopener">sys_setrlimit</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>unsigned int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#rlimit" target="_blank" rel="noopener">struct rlimit *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>76</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getrlimit.2.html" target="_blank" rel="noopener">sys_getrlimit</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>unsigned int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#rlimit" target="_blank" rel="noopener">struct rlimit *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>77</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getrusage.2.html" target="_blank" rel="noopener">sys_getrusage</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#rusage" target="_blank" rel="noopener">struct rusage *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>78</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/gettimeofday.2.html" target="_blank" rel="noopener">sys_gettimeofday</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/time.c" target="_blank" rel="noopener">kernel/time.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#timeval" target="_blank" rel="noopener">struct timeval *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#timezone" target="_blank" rel="noopener">struct timezone *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>79</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/settimeofday.2.html" target="_blank" rel="noopener">sys_settimeofday</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/time.c" target="_blank" rel="noopener">kernel/time.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#timeval" target="_blank" rel="noopener">struct timeval *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#timezone" target="_blank" rel="noopener">struct timezone *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>80</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getgroups.2.html" target="_blank" rel="noopener">sys_getgroups</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>81</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setgroups.2.html" target="_blank" rel="noopener">sys_setgroups</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>82</td><td>old_select</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/sys_i386.c" target="_blank" rel="noopener">arch/i386/kernel/sys_i386.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sel_arg_struct" target="_blank" rel="noopener">struct sel_arg_struct *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>83</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/symlink.2.html" target="_blank" rel="noopener">sys_symlink</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/namei.c" target="_blank" rel="noopener">fs/namei.c</a></td><td>const char *</td><td>const char *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>84</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/lstat.2.html" target="_blank" rel="noopener">sys_lstat</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/stat.c" target="_blank" rel="noopener">fs/stat.c</a></td><td>char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#__old_kernel_stat" target="_blank" rel="noopener">struct __old_kernel_stat *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>85</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/readlink.2.html" target="_blank" rel="noopener">sys_readlink</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/stat.c" target="_blank" rel="noopener">fs/stat.c</a></td><td>const char *</td><td>char *</td><td>int</td><td>-</td><td>-</td></tr><tr><td>86</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/uselib.2.html" target="_blank" rel="noopener">sys_uselib</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/exec.c" target="_blank" rel="noopener">fs/exec.c</a></td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>87</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/swapon.2.html" target="_blank" rel="noopener">sys_swapon</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/swapfile.c" target="_blank" rel="noopener">mm/swapfile.c</a></td><td>const char *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>88</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/reboot.2.html" target="_blank" rel="noopener">sys_reboot</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>int</td><td>int</td><td>int</td><td>void *</td><td>-</td></tr><tr><td>89</td><td>old_readdir</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/readdir.c" target="_blank" rel="noopener">fs/readdir.c</a></td><td>unsigned int</td><td>void *</td><td>unsigned int</td><td>-</td><td>-</td></tr><tr><td>90</td><td>old_mmap</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/sys_i386.c" target="_blank" rel="noopener">arch/i386/kernel/sys_i386.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#mmap_arg_struct" target="_blank" rel="noopener">struct mmap_arg_struct *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>91</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/munmap.2.html" target="_blank" rel="noopener">sys_munmap</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/mmap.c" target="_blank" rel="noopener">mm/mmap.c</a></td><td>unsigned long</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>92</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/truncate.2.html" target="_blank" rel="noopener">sys_truncate</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>const char *</td><td>unsigned long</td><td>-</td><td>-</td><td>-</td></tr><tr><td>93</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/ftruncate.2.html" target="_blank" rel="noopener">sys_ftruncate</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>unsigned int</td><td>unsigned long</td><td>-</td><td>-</td><td>-</td></tr><tr><td>94</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/fchmod.2.html" target="_blank" rel="noopener">sys_fchmod</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>unsigned int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#mode_t" target="_blank" rel="noopener">mode_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>95</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/fchown.2.html" target="_blank" rel="noopener">sys_fchown</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>unsigned int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t</a></td><td>-</td><td>-</td></tr><tr><td>96</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getpriority.2.html" target="_blank" rel="noopener">sys_getpriority</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>int</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>97</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setpriority.2.html" target="_blank" rel="noopener">sys_setpriority</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>int</td><td>int</td><td>int</td><td>-</td><td>-</td></tr><tr><td>99</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/statfs.2.html" target="_blank" rel="noopener">sys_statfs</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>const char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#statfs" target="_blank" rel="noopener">struct statfs *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>100</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/fstatfs.2.html" target="_blank" rel="noopener">sys_fstatfs</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>unsigned int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#statfs" target="_blank" rel="noopener">struct statfs *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>101</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/ioperm.2.html" target="_blank" rel="noopener">sys_ioperm</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/ioport.c" target="_blank" rel="noopener">arch/i386/kernel/ioport.c</a></td><td>unsigned long</td><td>unsigned long</td><td>int</td><td>-</td><td>-</td></tr><tr><td>102</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/socketcall.2.html" target="_blank" rel="noopener">sys_socketcall</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/net/socket.c" target="_blank" rel="noopener">net/socket.c</a></td><td>int</td><td>unsigned long *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>103</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/syslog.2.html" target="_blank" rel="noopener">sys_syslog</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/printk.c" target="_blank" rel="noopener">kernel/printk.c</a></td><td>int</td><td>char *</td><td>int</td><td>-</td><td>-</td></tr><tr><td>104</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setitimer.2.html" target="_blank" rel="noopener">sys_setitimer</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/itimer.c" target="_blank" rel="noopener">kernel/itimer.c</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#itimerval" target="_blank" rel="noopener">struct itimerval *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#itimerval" target="_blank" rel="noopener">struct itimerval *</a></td><td>-</td><td>-</td></tr><tr><td>105</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getitimer.2.html" target="_blank" rel="noopener">sys_getitimer</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/itimer.c" target="_blank" rel="noopener">kernel/itimer.c</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#itimerval" target="_blank" rel="noopener">struct itimerval *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>106</td><td>sys_newstat</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/stat.c" target="_blank" rel="noopener">fs/stat.c</a></td><td>char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#stat" target="_blank" rel="noopener">struct stat *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>107</td><td>sys_newlstat</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/stat.c" target="_blank" rel="noopener">fs/stat.c</a></td><td>char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#stat" target="_blank" rel="noopener">struct stat *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>108</td><td>sys_newfstat</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/stat.c" target="_blank" rel="noopener">fs/stat.c</a></td><td>unsigned int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#stat" target="_blank" rel="noopener">struct stat *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>109</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/uname.2.html" target="_blank" rel="noopener">sys_uname</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/sys_i386.c" target="_blank" rel="noopener">arch/i386/kernel/sys_i386.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#old_utsname" target="_blank" rel="noopener">struct old_utsname *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>110</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/iopl.2.html" target="_blank" rel="noopener">sys_iopl</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/ioport.c" target="_blank" rel="noopener">arch/i386/kernel/ioport.c</a></td><td>unsigned long</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>111</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/vhangup.2.html" target="_blank" rel="noopener">sys_vhangup</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>112</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/idle.2.html" target="_blank" rel="noopener">sys_idle</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/process.c" target="_blank" rel="noopener">arch/i386/kernel/process.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>113</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/vm86.2.html" target="_blank" rel="noopener">sys_vm86old</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/vm86.c" target="_blank" rel="noopener">arch/i386/kernel/vm86.c</a></td><td>unsigned long</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#vm86plus_struct" target="_blank" rel="noopener">struct vm86plus_struct *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>114</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/wait4.2.html" target="_blank" rel="noopener">sys_wait4</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/exit.c" target="_blank" rel="noopener">kernel/exit.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pid_t" target="_blank" rel="noopener">pid_t</a></td><td>unsigned long *</td><td>int options</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#rusage" target="_blank" rel="noopener">struct rusage *</a></td><td>-</td></tr><tr><td>115</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/swapoff.2.html" target="_blank" rel="noopener">sys_swapoff</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/swapfile.c" target="_blank" rel="noopener">mm/swapfile.c</a></td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>116</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sysinfo.2.html" target="_blank" rel="noopener">sys_sysinfo</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/info.c" target="_blank" rel="noopener">kernel/info.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sysinfo" target="_blank" rel="noopener">struct sysinfo *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>117</td><td>sys_ipc<a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#note117" target="_blank" rel="noopener">(*Note)</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/sys_i386.c" target="_blank" rel="noopener">arch/i386/kernel/sys_i386.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uint" target="_blank" rel="noopener">uint</a></td><td>int</td><td>int</td><td>int</td><td>void *</td></tr><tr><td>118</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/fsync.2.html" target="_blank" rel="noopener">sys_fsync</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/buffer.c" target="_blank" rel="noopener">fs/buffer.c</a></td><td>unsigned int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>119</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sigreturn.2.html" target="_blank" rel="noopener">sys_sigreturn</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/signal.c" target="_blank" rel="noopener">arch/i386/kernel/signal.c</a></td><td>unsigned long</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>120</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/clone.2.html" target="_blank" rel="noopener">sys_clone</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/process.c" target="_blank" rel="noopener">arch/i386/kernel/process.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pt_regs" target="_blank" rel="noopener">struct pt_regs</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>121</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setdomainname.2.html" target="_blank" rel="noopener">sys_setdomainname</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>char *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>122</td><td>sys_newuname</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#new_utsname" target="_blank" rel="noopener">struct new_utsname *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>123</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/modify_ldt.2.html" target="_blank" rel="noopener">sys_modify_ldt</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/ldt.c" target="_blank" rel="noopener">arch/i386/kernel/ldt.c</a></td><td>int</td><td>void *</td><td>unsigned long</td><td>-</td><td>-</td></tr><tr><td>124</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/adjtimex.2.html" target="_blank" rel="noopener">sys_adjtimex</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/time.c" target="_blank" rel="noopener">kernel/time.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#timex" target="_blank" rel="noopener">struct timex *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>125</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/mprotect.2.html" target="_blank" rel="noopener">sys_mprotect</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/mprotect.c" target="_blank" rel="noopener">mm/mprotect.c</a></td><td>unsigned long</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>unsigned long</td><td>-</td><td>-</td></tr><tr><td>126</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sigprocmask.2.html" target="_blank" rel="noopener">sys_sigprocmask</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#old_sigset_t" target="_blank" rel="noopener">old_sigset_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#old_sigset_t" target="_blank" rel="noopener">old_sigset_t *</a></td><td>-</td><td>-</td></tr><tr><td>127</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/create_module.2.html" target="_blank" rel="noopener">sys_create_module</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/module.c" target="_blank" rel="noopener">kernel/module.c</a></td><td>const char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>128</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/init_module.2.html" target="_blank" rel="noopener">sys_init_module</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/module.c" target="_blank" rel="noopener">kernel/module.c</a></td><td>const char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#module" target="_blank" rel="noopener">struct module *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>129</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/delete_module.2.html" target="_blank" rel="noopener">sys_delete_module</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/module.c" target="_blank" rel="noopener">kernel/module.c</a></td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>130</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/get_kernel_syms.2.html" target="_blank" rel="noopener">sys_get_kernel_syms</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/module.c" target="_blank" rel="noopener">kernel/module.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#kernel_sym" target="_blank" rel="noopener">struct kernel_sym *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>131</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/quotactl.2.html" target="_blank" rel="noopener">sys_quotactl</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/dquot.c" target="_blank" rel="noopener">fs/dquot.c</a></td><td>int</td><td>const char *</td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#caddr_t" target="_blank" rel="noopener">caddr_t</a></td><td>-</td></tr><tr><td>132</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getpgid.2.html" target="_blank" rel="noopener">sys_getpgid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pid_t" target="_blank" rel="noopener">pid_t</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>133</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/fchdir.2.html" target="_blank" rel="noopener">sys_fchdir</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>unsigned int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>134</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/bdflush.2.html" target="_blank" rel="noopener">sys_bdflush</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/buffer.c" target="_blank" rel="noopener">fs/buffer.c</a></td><td>int</td><td>long</td><td>-</td><td>-</td><td>-</td></tr><tr><td>135</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sysfs.2.html" target="_blank" rel="noopener">sys_sysfs</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/super.c" target="_blank" rel="noopener">fs/super.c</a></td><td>int</td><td>unsigned long</td><td>unsigned long</td><td>-</td><td>-</td></tr><tr><td>136</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/personality.2.html" target="_blank" rel="noopener">sys_personality</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/exec_domain.c" target="_blank" rel="noopener">kernel/exec_domain.c</a></td><td>unsigned long</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>138</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setfsuid.2.html" target="_blank" rel="noopener">sys_setfsuid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>139</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setfsgid.2.html" target="_blank" rel="noopener">sys_setfsgid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>140</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/llseek.2.html" target="_blank" rel="noopener">sys_llseek</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/read_write.c" target="_blank" rel="noopener">fs/read_write.c</a></td><td>unsigned int</td><td>unsigned long</td><td>unsigned long</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#loff_t" target="_blank" rel="noopener">loff_t *</a></td><td>unsigned int</td></tr><tr><td>141</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getdents.2.html" target="_blank" rel="noopener">sys_getdents</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/readdir.c" target="_blank" rel="noopener">fs/readdir.c</a></td><td>unsigned int</td><td>void *</td><td>unsigned int</td><td>-</td><td>-</td></tr><tr><td>142</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/select.2.html" target="_blank" rel="noopener">sys_select</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/select.c" target="_blank" rel="noopener">fs/select.c</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#fd_set" target="_blank" rel="noopener">fd_set *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#fd_set" target="_blank" rel="noopener">fd_set *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#fd_set" target="_blank" rel="noopener">fd_set *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#timeval" target="_blank" rel="noopener">struct timeval *</a></td></tr><tr><td>143</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/flock.2.html" target="_blank" rel="noopener">sys_flock</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/locks.c" target="_blank" rel="noopener">fs/locks.c</a></td><td>unsigned int</td><td>unsigned int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>144</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/msync.2.html" target="_blank" rel="noopener">sys_msync</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/filemap.c" target="_blank" rel="noopener">mm/filemap.c</a></td><td>unsigned long</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>int</td><td>-</td><td>-</td></tr><tr><td>145</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/readv.2.html" target="_blank" rel="noopener">sys_readv</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/read_write.c" target="_blank" rel="noopener">fs/read_write.c</a></td><td>unsigned long</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#iovec" target="_blank" rel="noopener">const struct iovec *</a></td><td>unsigned long</td><td>-</td><td>-</td></tr><tr><td>146</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/writev.2.html" target="_blank" rel="noopener">sys_writev</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/read_write.c" target="_blank" rel="noopener">fs/read_write.c</a></td><td>unsigned long</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#iovec" target="_blank" rel="noopener">const struct iovec *</a></td><td>unsigned long</td><td>-</td><td>-</td></tr><tr><td>147</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getsid.2.html" target="_blank" rel="noopener">sys_getsid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pid_t" target="_blank" rel="noopener">pid_t</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>148</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/fdatasync.2.html" target="_blank" rel="noopener">sys_fdatasync</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/buffer.c" target="_blank" rel="noopener">fs/buffer.c</a></td><td>unsigned int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>149</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sysctl.2.html" target="_blank" rel="noopener">sys_sysctl</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sysctl.c" target="_blank" rel="noopener">kernel/sysctl.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#__sysctl_args" target="_blank" rel="noopener">struct __sysctl_args *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>150</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/mlock.2.html" target="_blank" rel="noopener">sys_mlock</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/mlock.c" target="_blank" rel="noopener">mm/mlock.c</a></td><td>unsigned long</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>151</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/munlock.2.html" target="_blank" rel="noopener">sys_munlock</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/mlock.c" target="_blank" rel="noopener">mm/mlock.c</a></td><td>unsigned long</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>152</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/mlockall.2.html" target="_blank" rel="noopener">sys_mlockall</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/mlock.c" target="_blank" rel="noopener">mm/mlock.c</a></td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>153</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/munlockall.2.html" target="_blank" rel="noopener">sys_munlockall</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/mlock.c" target="_blank" rel="noopener">mm/mlock.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>154</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sched_setparam.2.html" target="_blank" rel="noopener">sys_sched_setparam</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pid_t" target="_blank" rel="noopener">pid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sched_param" target="_blank" rel="noopener">struct sched_param *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>155</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sched_getparam.2.html" target="_blank" rel="noopener">sys_sched_getparam</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pid_t" target="_blank" rel="noopener">pid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sched_param" target="_blank" rel="noopener">struct sched_param *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>156</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sched_setscheduler.2.html" target="_blank" rel="noopener">sys_sched_setscheduler</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pid_t" target="_blank" rel="noopener">pid_t</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sched_param" target="_blank" rel="noopener">struct sched_param *</a></td><td>-</td><td>-</td></tr><tr><td>157</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sched_getscheduler.2.html" target="_blank" rel="noopener">sys_sched_getscheduler</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pid_t" target="_blank" rel="noopener">pid_t</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>158</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sched_yield.2.html" target="_blank" rel="noopener">sys_sched_yield</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>159</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sched_get_priority_max.2.html" target="_blank" rel="noopener">sys_sched_get_priority_max</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>160</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sched_get_priority_min.2.html" target="_blank" rel="noopener">sys_sched_get_priority_min</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>161</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sched_rr_get_interval.2.html" target="_blank" rel="noopener">sys_sched_rr_get_interval</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pid_t" target="_blank" rel="noopener">pid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#timespec" target="_blank" rel="noopener">struct timespec *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>162</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/nanosleep.2.html" target="_blank" rel="noopener">sys_nanosleep</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#timespec" target="_blank" rel="noopener">struct timespec *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#timespec" target="_blank" rel="noopener">struct timespec *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>163</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/mremap.2.html" target="_blank" rel="noopener">sys_mremap</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/mremap.c" target="_blank" rel="noopener">mm/mremap.c</a></td><td>unsigned long</td><td>unsigned long</td><td>unsigned long</td><td>unsigned long</td><td>-</td></tr><tr><td>164</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setresuid.2.html" target="_blank" rel="noopener">sys_setresuid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t</a></td><td>-</td><td>-</td></tr><tr><td>165</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getresuid.2.html" target="_blank" rel="noopener">sys_getresuid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t *</a></td><td>-</td><td>-</td></tr><tr><td>166</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/vm86.2.html" target="_blank" rel="noopener">sys_vm86</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/vm86.c" target="_blank" rel="noopener">arch/i386/kernel/vm86.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#vm86_struct" target="_blank" rel="noopener">struct vm86_struct *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>167</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/query_module.2.html" target="_blank" rel="noopener">sys_query_module</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/module.c" target="_blank" rel="noopener">kernel/module.c</a></td><td>const char *</td><td>int</td><td>char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t *</a></td></tr><tr><td>168</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/poll.2.html" target="_blank" rel="noopener">sys_poll</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/select.c" target="_blank" rel="noopener">fs/select.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pollfd" target="_blank" rel="noopener">struct pollfd *</a></td><td>unsigned int</td><td>long</td><td>-</td><td>-</td></tr><tr><td>169</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/nfsservctl.2.html" target="_blank" rel="noopener">sys_nfsservctl</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/filesystems.c" target="_blank" rel="noopener">fs/filesystems.c</a></td><td>int</td><td>void *</td><td>void *</td><td>-</td><td>-</td></tr><tr><td>170</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setresgid.2.html" target="_blank" rel="noopener">sys_setresgid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t</a></td><td>-</td><td>-</td></tr><tr><td>171</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getresgid.2.html" target="_blank" rel="noopener">sys_getresgid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t *</a></td><td>-</td><td>-</td></tr><tr><td>172</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/prctl.2.html" target="_blank" rel="noopener">sys_prctl</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>int</td><td>unsigned long</td><td>unsigned long</td><td>unsigned long</td><td>unsigned long</td></tr><tr><td>173</td><td>sys_rt_sigreturn</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/signal.c" target="_blank" rel="noopener">arch/i386/kernel/signal.c</a></td><td>unsigned long</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>174</td><td>sys_rt_sigaction</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sigaction" target="_blank" rel="noopener">const struct sigaction *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sigaction" target="_blank" rel="noopener">struct sigaction *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td></tr><tr><td>175</td><td>sys_rt_sigprocmask</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sigset_t" target="_blank" rel="noopener">sigset_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sigset_t" target="_blank" rel="noopener">sigset_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td></tr><tr><td>176</td><td>sys_rt_sigpending</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sigset_t" target="_blank" rel="noopener">sigset_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>177</td><td>sys_rt_sigtimedwait</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sigset_t" target="_blank" rel="noopener">const sigset_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#siginfo_t" target="_blank" rel="noopener">siginfo_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#timespec" target="_blank" rel="noopener">const struct timespec *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td></tr><tr><td>178</td><td>sys_rt_sigqueueinfo</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td>int</td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#siginfo_t" target="_blank" rel="noopener">siginfo_t *</a></td><td>-</td><td>-</td></tr><tr><td>179</td><td>sys_rt_sigsuspend</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/signal.c" target="_blank" rel="noopener">arch/i386/kernel/signal.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sigset_t" target="_blank" rel="noopener">sigset_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>180</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/pread.2.html" target="_blank" rel="noopener">sys_pread</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/read_write.c" target="_blank" rel="noopener">fs/read_write.c</a></td><td>unsigned int</td><td>char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#loff_t" target="_blank" rel="noopener">loff_t</a></td><td>-</td></tr><tr><td>181</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/pread.2.html" target="_blank" rel="noopener">sys_pwrite</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/read_write.c" target="_blank" rel="noopener">fs/read_write.c</a></td><td>unsigned int</td><td>const char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#loff_t" target="_blank" rel="noopener">loff_t</a></td><td>-</td></tr><tr><td>182</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/chown.2.html" target="_blank" rel="noopener">sys_chown</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>const char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t</a></td><td>-</td><td>-</td></tr><tr><td>183</td><td>sys_getcwd</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/dcache.c" target="_blank" rel="noopener">fs/dcache.c</a></td><td>char *</td><td>unsigned long</td><td>-</td><td>-</td><td>-</td></tr><tr><td>184</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/capget.2.html" target="_blank" rel="noopener">sys_capget</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/capability.c" target="_blank" rel="noopener">kernel/capability.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#cap_user_header_t" target="_blank" rel="noopener">cap_user_header_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#cap_user_data_t" target="_blank" rel="noopener">cap_user_data_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>185</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/capget.2.html" target="_blank" rel="noopener">sys_capset</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/capability.c" target="_blank" rel="noopener">kernel/capability.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#cap_user_header_t" target="_blank" rel="noopener">cap_user_header_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#cap_user_data_t" target="_blank" rel="noopener">const cap_user_data_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>186</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sigaltstack.2.html" target="_blank" rel="noopener">sys_sigaltstack</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/signal.c" target="_blank" rel="noopener">arch/i386/kernel/signal.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#stack_t" target="_blank" rel="noopener">const stack_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#stack_t" target="_blank" rel="noopener">stack_t *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>187</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sendfile.2.html" target="_blank" rel="noopener">sys_sendfile</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/filemap.c" target="_blank" rel="noopener">mm/filemap.c</a></td><td>int</td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#off_t" target="_blank" rel="noopener">off_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td></tr><tr><td>190</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/vfork.2.html" target="_blank" rel="noopener">sys_vfork</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/process.c" target="_blank" rel="noopener">arch/i386/kernel/process.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pt_regs" target="_blank" rel="noopener">struct pt_regs</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;x64-system-call&quot;&gt;&lt;a href=&quot;#x64-system-call&quot; class=&quot;headerlink&quot; title=&quot;x64_system_call:&quot;&gt;&lt;/a&gt;x64_system_call:&lt;/h1&gt;&lt;p&gt;原表位于 : &lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="ctf-pwn" scheme="http://zero-mk.github.io/tags/ctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>格式化字符漏洞</title>
    <link href="http://zero-mk.github.io/2018/12/17/FMT/"/>
    <id>http://zero-mk.github.io/2018/12/17/FMT/</id>
    <published>2018-12-17T08:39:34.000Z</published>
    <updated>2019-01-14T09:46:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>长度：</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">长度(byte)</th><th style="text-align:center">使用</th></tr></thead><tbody><tr><td style="text-align:center">hh</td><td style="text-align:center">1</td><td style="text-align:center">char</td></tr><tr><td style="text-align:center">h</td><td style="text-align:center">2</td><td style="text-align:center">short int</td></tr><tr><td style="text-align:center">l</td><td style="text-align:center">4</td><td style="text-align:center">long int</td></tr><tr><td style="text-align:center">Ll</td><td style="text-align:center">8</td><td style="text-align:center">long long int</td></tr></tbody></table><p>转换符：</p><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:center">长度 (byte)</th><th style="text-align:center">使用</th></tr></thead><tbody><tr><td style="text-align:center">d</td><td style="text-align:center">4</td><td style="text-align:center">integer</td></tr><tr><td style="text-align:center">u</td><td style="text-align:center">4</td><td style="text-align:center">Unsigned integer</td></tr><tr><td style="text-align:center">x</td><td style="text-align:center">4</td><td style="text-align:center">hex</td></tr><tr><td style="text-align:center">s</td><td style="text-align:center">4</td><td style="text-align:center">String</td></tr><tr><td style="text-align:center">c</td><td style="text-align:center">1</td><td style="text-align:center">Character</td></tr></tbody></table><h3 id="32位："><a href="#32位：" class="headerlink" title="32位："></a>32位：</h3><p>读：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">'%&#123;&#125;$x'.format(index)           // 读4个字节</span><br><span class="line">'%&#123;&#125;$p'.format(index)           // 同上面</span><br><span class="line">'$&#123;&#125;$s'.format(index)</span><br></pre></td></tr></table></figure><p>写：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">'%&#123;&#125;$n'.format(index)           // 解引用，写入四个字节</span><br><span class="line">'%&#123;&#125;$hn'.format(index)          // 解引用，写入两个字节</span><br><span class="line">'%&#123;&#125;$hhn'.format(index)         // 解引用，写入一个字节</span><br><span class="line">'%&#123;&#125;$lln'.format(index)         // 解引用，写入八个字节</span><br></pre></td></tr></table></figure></p><h3 id="64位："><a href="#64位：" class="headerlink" title="64位："></a>64位：</h3><p>读：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">'%&#123;&#125;$x'.format(index, num)      // 读4个字节</span><br><span class="line">'%&#123;&#125;$lx'.format(index, num)     // 读8个字节</span><br><span class="line">'%&#123;&#125;$p'.format(index)           // 读8个字节</span><br><span class="line">'$&#123;&#125;$s'.format(index)</span><br></pre></td></tr></table></figure></p><p>写：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">'%&#123;&#125;$n'.format(index)           // 解引用，写入四个字节</span><br><span class="line">'%&#123;&#125;$hn'.format(index)          // 解引用，写入两个字节</span><br><span class="line">'%&#123;&#125;$hhn'.format(index)         // 解引用，写入一个字节</span><br><span class="line">'%&#123;&#125;$lln'.format(index)         // 解引用，写入八个字节</span><br><span class="line">%<span class="number">1</span>$lx: RSI</span><br><span class="line">%<span class="number">2</span>$lx: RDX</span><br><span class="line">%<span class="number">3</span>$lx: RCX</span><br><span class="line">%<span class="number">4</span>$lx: R8</span><br><span class="line">%<span class="number">5</span>$lx: R9</span><br><span class="line">%<span class="number">6</span>$lx: 栈上的第一个QWORD</span><br></pre></td></tr></table></figure></p><h3 id="附加："><a href="#附加：" class="headerlink" title="附加："></a>附加：</h3><p>fmtstr_payload是pwntools提供的函数，用于自动生成格式化字符串。</p><p>fmtstr_payload有两个参数<br>第一个参数是int，用于表示取参数的偏移个数</p><p>第二个参数是字典，字典的意义是往key的地址，写入value的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmtstr_payload(<span class="number">7</span>, &#123;printf_got: system_add&#125;)</span><br></pre></td></tr></table></figure><p>这个函数调用会往printf_got中写入system_add</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;长度：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;字符&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;长度(byte)&lt;/th&gt;
&lt;th style=&quot;text-align:cent
      
    
    </summary>
    
    
      <category term="ctf-pwn" scheme="http://zero-mk.github.io/tags/ctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>记录我学习pwn</title>
    <link href="http://zero-mk.github.io/2018/12/15/my-ctf-pwn/"/>
    <id>http://zero-mk.github.io/2018/12/15/my-ctf-pwn/</id>
    <published>2018-12-14T16:00:34.000Z</published>
    <updated>2018-12-31T18:13:30.375Z</updated>
    
    <content type="html"><![CDATA[<h3 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源:"></a>学习资源:</h3><p>CTF wiki : <a href="https://ctf-wiki.github.io/ctf-wiki/pwn/readme/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/readme/</a>  (教科书)</p><p>C语言-内存管理基础  : <a href="https://www.jianshu.com/p/b2380e47d005" target="_blank" rel="noopener">https://www.jianshu.com/p/b2380e47d005</a>  (不会这个,好像,不用玩pwn了)</p><p>PWN选手的自我修养 :  <a href="https://r00tk1ts.github.io/2017/09/11/PWN%E9%80%89%E6%89%8B%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/" target="_blank" rel="noopener">https://r00tk1ts.github.io/2017/09/11/PWN%E9%80%89%E6%89%8B%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</a></p><p>i春秋的上的Linux pwn入门教程系列 : <a href="https://bbs.ichunqiu.com/forum.php?mod=collection&amp;action=view&amp;ctid=157" target="_blank" rel="noopener">https://bbs.ichunqiu.com/forum.php?mod=collection&amp;action=view&amp;ctid=157</a><br>Bamboofox :  <a href="https://bamboofox.cs.nctu.edu.tw/" target="_blank" rel="noopener">https://bamboofox.cs.nctu.edu.tw/</a>  (说实话,我的pwn起点就是在这里)</p><p>Bamboofox Official Blog : <a href="https://bamboofox.github.io/" target="_blank" rel="noopener">https://bamboofox.github.io/</a>  (国际赛pwn题wp)</p><h3 id="题目和writeup"><a href="#题目和writeup" class="headerlink" title="题目和writeup:"></a>题目和writeup:</h3><p>pwn_repo : <a href="https://github.com/bash-c/pwn_repo" target="_blank" rel="noopener">https://github.com/bash-c/pwn_repo</a>  (很多pwn题,附加writeup,自己慢慢啃)</p><p>pwn_step_in : <a href="https://github.com/ckxckx/pwn_step_in" target="_blank" rel="noopener">https://github.com/ckxckx/pwn_step_in</a>  (分类,渐进)</p><p>国际赛题目 : <a href="https://github.com/ctfs" target="_blank" rel="noopener">https://github.com/ctfs</a> </p><h3 id="书"><a href="#书" class="headerlink" title="书:"></a>书:</h3><p>程序员的自我修养:链接、装载与库 : <a href="https://www.jb51.net/books/180084.html" target="_blank" rel="noopener">https://www.jb51.net/books/180084.html</a>  (名字很佛系,但是,是真干货,强烈建议买一本)</p><p>glibc内存管理ptmalloc源代码分析.pdf : <a href="https://paper.seebug.org/papers/Archive/refs/heap/glibc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86ptmalloc%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90.pdf" target="_blank" rel="noopener">https://paper.seebug.org/papers/Archive/refs/heap/glibc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86ptmalloc%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90.pdf</a></p><p>IBM的汇编开发指南 : <a href="https://www.ibm.com/developerworks/cn/linux/l-assembly/index.html?mhq=AT%26T%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97&amp;mhsrc=ibmsearch_d" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/l-assembly/index.html?mhq=AT%26T%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97&amp;mhsrc=ibmsearch_d</a></p><p>系统调用表 : 我博客搜索syscall或Linux_System_Call_Table</p><p>系统调用解释 : <a href="https://www.ibm.com/developerworks/cn/linux/kernel/syscall/part1/appendix.html#3" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/kernel/syscall/part1/appendix.html#3</a></p><h3 id="工具"><a href="#工具" class="headerlink" title="工具:"></a>工具:</h3><p>使用docker部署的解题环境 : <a href="https://github.com/skysider/pwndocker" target="_blank" rel="noopener">https://github.com/skysider/pwndocker</a>  (基于<a href="https://github.com/phusion/baseimage-docker" target="_blank" rel="noopener">https://github.com/phusion/baseimage-docker</a>)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;学习资源&quot;&gt;&lt;a href=&quot;#学习资源&quot; class=&quot;headerlink&quot; title=&quot;学习资源:&quot;&gt;&lt;/a&gt;学习资源:&lt;/h3&gt;&lt;p&gt;CTF wiki : &lt;a href=&quot;https://ctf-wiki.github.io/ctf-wiki/pwn/
      
    
    </summary>
    
    
      <category term="ctf-pwn" scheme="http://zero-mk.github.io/tags/ctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>termux</title>
    <link href="http://zero-mk.github.io/2018/10/01/termux/"/>
    <id>http://zero-mk.github.io/2018/10/01/termux/</id>
    <published>2018-10-01T01:41:55.000Z</published>
    <updated>2018-12-31T17:01:54.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x1-准备操作"><a href="#0x1-准备操作" class="headerlink" title="0x1.准备操作"></a>0x1.准备操作</h2><p>下载termux<a href="https://www.coolapk.com/apk/com.termux" target="_blank" rel="noopener">点击这里</a><br>安装，打开，等初始化完成(建议挂梯子)初始化完成了会进入一个终端</p><h2 id="0x2-更新软件包"><a href="#0x2-更新软件包" class="headerlink" title="0x2.更新软件包"></a>0x2.更新软件包</h2><p>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg update &amp;&amp; pkg upgrade</span><br></pre></td></tr></table></figure><p>回车，等完成</p><h2 id="0x3-安装vim和gcc"><a href="#0x3-安装vim和gcc" class="headerlink" title="0x3.安装vim和gcc"></a>0x3.安装vim和gcc</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install vim clang</span><br></pre></td></tr></table></figure><p>回车</p><h2 id="0x4-Done"><a href="#0x4-Done" class="headerlink" title="0x4.Done"></a>0x4.Done</h2><p>完成，这时你需要了解几个Linux命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> abc <span class="comment">#打开abc文件夹</span></span><br><span class="line">ls <span class="comment">#列出当前文件夹内的文件和文件夹</span></span><br><span class="line">mkdir abc <span class="comment">#创建一个名为abc的文件夹</span></span><br><span class="line">touch abc <span class="comment">#创建一个名为abc的文件</span></span><br><span class="line">vim t.c <span class="comment">#使用vim编辑t.c文件(如果t.c不存在会被创建)</span></span><br><span class="line">gcc t.c <span class="comment">#使用gcc编译t.c文件(编译后的文件为当前目录下的a.out)</span></span><br><span class="line">gcc t.c -o xxx <span class="comment">#使用gcc编译t.c文件  -o xxx 指定编译输出的文件为xxx</span></span><br></pre></td></tr></table></figure><p>关于vim的基本操作参见<a href="https://www.jianshu.com/p/5af00815b4e4" target="_blank" rel="noopener">点击这里</a></p><p>其实termux就是个小型的Linux,玩法很多,自己去看看 <a href="https://wiki.termux.com/wiki/Main_Page" target="_blank" rel="noopener">termux wiki</a></p><p>=====================================================</p><h2 id="如果看不懂上面的文字描述看一下下面这个终端录像，因为我是用vps，录的时候网有点卡，所以凑合着看吧"><a href="#如果看不懂上面的文字描述看一下下面这个终端录像，因为我是用vps，录的时候网有点卡，所以凑合着看吧" class="headerlink" title="如果看不懂上面的文字描述看一下下面这个终端录像，因为我是用vps，录的时候网有点卡，所以凑合着看吧"></a>如果看不懂上面的文字描述看一下下面这个终端录像，因为我是用vps，录的时候网有点卡，所以凑合着看吧</h2><p><a href="https://asciinema.org/a/W17izXEr2krrzTiY9x9xJTwMc" target="_blank" rel="noopener"><img src="https://asciinema.org/a/W17izXEr2krrzTiY9x9xJTwMc.png" alt="asciicast"></a></p><p>=====================================================</p><p>关于termux下运行Ubuntu,有个工具可以实现，项目地址:<a href="https://github.com/YadominJinta/atilo" target="_blank" rel="noopener">atilo</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pkg update &amp;&amp; pkg upgrade</span><br><span class="line"></span><br><span class="line">pkg install git curl</span><br><span class="line"></span><br><span class="line">curl https://raw.githubusercontent.com/YadominJinta/atilo/master/atilo -o ~/atilo</span><br><span class="line"></span><br><span class="line">chmod +x atilo</span><br><span class="line"></span><br><span class="line">./atilo install ubuntu</span><br></pre></td></tr></table></figure><p>把上面的按句复制粘贴到termux中执行如果一切顺利执行完后输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startubuntu</span><br></pre></td></tr></table></figure></p><p>就可以启动ubuntu了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x1-准备操作&quot;&gt;&lt;a href=&quot;#0x1-准备操作&quot; class=&quot;headerlink&quot; title=&quot;0x1.准备操作&quot;&gt;&lt;/a&gt;0x1.准备操作&lt;/h2&gt;&lt;p&gt;下载termux&lt;a href=&quot;https://www.coolapk.com/apk/c
      
    
    </summary>
    
    
      <category term="termux" scheme="http://zero-mk.github.io/tags/termux/"/>
    
  </entry>
  
  <entry>
    <title>shell编程基础</title>
    <link href="http://zero-mk.github.io/2018/09/29/shellcoding/"/>
    <id>http://zero-mk.github.io/2018/09/29/shellcoding/</id>
    <published>2018-09-29T13:39:34.000Z</published>
    <updated>2019-01-06T10:34:05.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-开头"><a href="#1-开头" class="headerlink" title="1 开头"></a>1 开头</h2><p>程序必须以下面的行开始（必须方在文件的第一行）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br></pre></td></tr></table></figure><p>符号#!用来告诉系统它后面的参数是用来执行该文件的程序。在这个例子中我们使用/bin/sh来执行程序。</p><p>当编写脚本完成时，如果要执行该脚本，还必须使其可执行。</p><p>要使编写脚本可执行：</p><p>编译 chmod +x filename 这样才能用./filename<br>来运行</p><h2 id="2-注释"><a href="#2-注释" class="headerlink" title="2 注释"></a>2 注释</h2><p>在进行shell编程时，以#开头的句子表示注释，直到这一行的结束。</p><h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3 变量"></a>3 变量</h2><p>在其他编程语言中您必须使用变量。在shell编程中，所有的变量都由字符串组成，并且您不需要对变量进行声明。要赋值给一个变量，您可以这样写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">"hello world"</span></span><br></pre></td></tr></table></figure><p>现在打印变量a的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"A is:"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br></pre></td></tr></table></figure><p>注意:变量在赋值的时候可以不带<code>$</code>,但是调用的时候要使用<code>$变量名</code></p><p>有时候变量名很容易与其他文字混淆，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num=2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"this is the <span class="variable">$numnd</span>"</span></span><br></pre></td></tr></table></figure><p>这并不会打印出”this is the 2nd”，而仅仅打印”this is the “，因为shell会去搜索变量numnd的值，但是这个变量时没有值的。可以使用花括号来告诉shell我们要打印的是num变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num=2</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"this is the <span class="variable">$&#123;num&#125;</span>nd"</span></span><br></pre></td></tr></table></figure><p>这将打印： this is the 2nd</p><h2 id="4-环境变量"><a href="#4-环境变量" class="headerlink" title="4 环境变量"></a>4 环境变量</h2><p>由 <strong><em>export </em></strong>关键字处理过的变量叫做环境变量。我们不对环境变量进行讨论，因为通常情况下仅仅在登录脚本中使用环境变量。</p><h2 id="5-Shell命令和流程控制"><a href="#5-Shell命令和流程控制" class="headerlink" title="5 Shell命令和流程控制"></a>5 Shell命令和流程控制</h2><p>在shell脚本中可以使用三类命令：</p><h3 id="1-Unix-命令"><a href="#1-Unix-命令" class="headerlink" title="1)Unix 命令:"></a>1)Unix 命令:</h3><p>虽然在shell脚本中可以使用任意的unix命令，但是还是由一些相对更常用的命令。这些命令通常是用来进行文件和文字操作的。</p><p>常用命令语法及功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"some text"</span> <span class="comment">#将文字内容打印在屏幕上</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls: 文件列表</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wc –l file <span class="comment">#计算文件行数</span></span><br><span class="line">wc -w file <span class="comment">#计算文件中的单词数</span></span><br><span class="line">wc -c file 计算文件中的字符数</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp sourcefile destfile #文件拷贝</span><br><span class="line">cp -r 是复制文件夹</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv oldname newname <span class="comment">#重命名文件或移动文件</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm file <span class="comment">#删除文件</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep ‘pattern’ file <span class="comment">#在文件内搜索字符串</span></span><br><span class="line">比如：grep ’searchstring’ file.txt <span class="comment">#在file.txt中查找searchstring</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cut -b colnum file <span class="comment">#指定欲显示的文件内容范围，并将它们输出到标准输出设备</span></span><br></pre></td></tr></table></figure><p>比如：输出每行第5个到第9个字符<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cut -b5-9 file.txt</span><br></pre></td></tr></table></figure></p><p>千万不要和cat命令混淆，这是两个完全不同的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file.txt: 输出文件内容到标准输出设备（屏幕）上</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file somefile: 得到文件类型</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> var: 提示用户输入，并将输入赋值给变量var</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort file.txt: 对file.txt文件中的行进行排序</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uniq: 删除文本文件中出现的行列比如： sort file.txt | uniq <span class="comment">#不会改变原文件的内容</span></span><br><span class="line">uniq -c :计数每行出现的次数</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr: 进行数学运算,例如2加3 expr 2 <span class="string">"+"</span> 3</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find: 搜索文件比如：根据文件名搜索find . -name filename -<span class="built_in">print</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tee: 将数据输出到标准输出设备(屏幕) 和文件比如：命令 | tee 输出到</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">basename file: 返回不包含路径的文件名比如： basename /bin/tux <span class="comment">#将返回 tux</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirname file: 返回文件所在路径比如：dirname /bin/tux <span class="comment">#将返回 /bin</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head file: 打印文本文件开头几行</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail file : 打印文本文件末尾几行</span><br></pre></td></tr></table></figure><p>sed: Sed是一个基本的查找替换程序。可以从标准输入（比如命令管道）读入文本，并将结果输出到标准输出（屏幕）。该命令采用正则表达式（见参考）进行搜索。不要和shell中的通配符相混淆。比如：将linuxfocus替换为 LinuxFocus ：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat text.file | sed ’s/linuxfocus/LinuxFocus/’ &gt;newtext.file</span><br></pre></td></tr></table></figure></p><p>awk: awk 用来从文本文件中提取字段。缺省地，字段分割符是空格，可以使用-F指定其他分割符。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">catfile.txt | awk -F, ‘&#123;<span class="built_in">print</span> <span class="variable">$1</span> <span class="string">","</span> <span class="variable">$3</span>&#125;’</span><br></pre></td></tr></table></figure></p><p>这里我们使用，作为字段分割符，同时打印第一个和第三个字段。如果该文件内容如下： Adam Bor, 34, IndiaKerryMiller, 22, USA命令输出结果为：Adam Bor, IndiaKerry Miller, USA</p><h3 id="2-概念-管道-重定向和-backtick"><a href="#2-概念-管道-重定向和-backtick" class="headerlink" title="2) 概念: 管道, 重定向和 backtick"></a>2) 概念: 管道, 重定向和 backtick</h3><p>这些不是系统命令，但是他们真的很重要。</p><p>管道 <strong><em>(|)</em></strong> 将<strong><em>一个命令的输出 </em></strong>作为<strong><em>另外一个命令的输入</em></strong>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">"hello"</span> file.txt | wc -l</span><br></pre></td></tr></table></figure></p><p>在file.txt中搜索包含有”hello”的行并计算其行数。<br>在这里grep命令的输出作为wc命令的输入。当然您可以使用多个命令。</p><p>重定向：将命令的结果输出到文件，而不是标准输出（屏幕）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 写入文件并覆盖旧文件</span><br><span class="line">&gt;&gt; 加到文件的尾部，保留旧文件内容。</span><br></pre></td></tr></table></figure><p>反短斜线</p><p>使用反短斜线可以将一个命令的输出作为另外一个命令的一个命令行参数。</p><p>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -mtime -1 -<span class="built_in">type</span> f -<span class="built_in">print</span></span><br></pre></td></tr></table></figure><p>用来查找过去24小时（-mtime –2则表示过去48小时）内修改过的文件。如果您想将所有查找到的文件打一个包，则可以使用以下linux 脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">!/bin/sh</span><br><span class="line"><span class="comment">#下面用的(`) 不是 (‘),请看好,(`)是在ESC下面的哪个键</span></span><br><span class="line">tar -zcvf lastmod.tar.gz `find . -mtime -1 -<span class="built_in">type</span> f -<span class="built_in">print</span>`</span><br></pre></td></tr></table></figure><h3 id="3-流程控制"><a href="#3-流程控制" class="headerlink" title="3) 流程控制"></a>3) 流程控制</h3><p>1.if</p><p>“if” 表达式 如果条件为真则执行then后面的部分,学过其它语言的一看就明白了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件; <span class="keyword">then</span></span><br><span class="line"><span class="comment">#if后面条件为真的时候要执行的</span></span><br><span class="line"><span class="keyword">elif</span> 条件; <span class="keyword">then</span></span><br><span class="line"><span class="comment">#elif后面条件为真的时候要执行的</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="comment">#if和elif后面条件都为假的时候要执行的 </span></span><br><span class="line"><span class="keyword">fi</span> <span class="comment">#标志if结束</span></span><br></pre></td></tr></table></figure></p><p>大多数情况下，可以使用测试命令来对条件进行测试。比如可以比较字符串、判断文件是否存在及是否可读等等…<br>通常用” [ ] “来表示条件测试。注意这里的<strong>空格很重要</strong>。要<strong>确保方括号的空格</strong>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[ -f <span class="string">"somefile"</span> ] ：判断是否是一个文件</span><br><span class="line">[ -x <span class="string">"/bin/ls"</span> ] ：判断/bin/ls是否存在并有可执行权限</span><br><span class="line">[ -n <span class="string">"<span class="variable">$var</span>"</span> ] ：判断<span class="variable">$var</span>变量是否有值</span><br><span class="line">[ <span class="string">"<span class="variable">$a</span>"</span> = <span class="string">"<span class="variable">$b</span>"</span> ] ：判断<span class="variable">$a</span>和<span class="variable">$b</span>是否相等</span><br></pre></td></tr></table></figure></p><p>执行man test可以查看所有测试表达式可以比较和判断的类型。<br>直接执行以下脚本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">!/bin/sh</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$SHELL</span>"</span> = <span class="string">"/bin/bash"</span> ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"您的登录shell是bash"</span></span><br><span class="line"><span class="keyword">elif</span> [ <span class="string">"<span class="variable">$SHELL</span>"</span> = <span class="string">"/bin/zsh"</span> ]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"您的登录shell是zsh"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"你的登录shell是 <span class="variable">$SHELL</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>变量<strong>$SHELL</strong>包含了登录shell的名称，我们和/bin/bash进行了比较。</p><p>快捷操作符<br>熟悉C语言的朋友可能会很喜欢下面的表达式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ -f <span class="string">"/etc/shadow"</span> ] &amp;&amp; <span class="built_in">echo</span> <span class="string">"This computer uses shadow passwors"</span></span><br></pre></td></tr></table></figure></p><p>这里的 <strong> &amp;&amp;</strong><br>就是一个快捷操作符，<strong>如果左边的表达式为真则执行右边的语句</strong>。</p><p>您也可以认为是逻辑运算中的与操作。上例中表示如果/etc/shadow文件存在则打印” This computer uses shadow passwors”。同样或操作<strong>(||)</strong>在shell编程中也是可用的。这里有个例子：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">!/bin/sh</span><br><span class="line">mailfolder=/var/spool/mail/james</span><br><span class="line">[ -r <span class="string">"<span class="variable">$mailfolder</span>"</span> ]‘ ‘&#123; <span class="built_in">echo</span> <span class="string">"Can not read <span class="variable">$mailfolder</span>"</span> ; <span class="built_in">exit</span> 1; &#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$mailfolder</span> has mail from:"</span></span><br><span class="line">grep <span class="string">"^From "</span> <span class="variable">$mailfolder</span></span><br></pre></td></tr></table></figure></p><p>该脚本首先判断mailfolder是否可读。如果可读则打印该文件中的”From” 一行。如果不可读则或操作生效，打印错误信息后脚本退出。这里有个问题，那就是我们必须有两个命令：<br>◆打印错误信息<br>◆退出程序</p><p>我们使用花括号以匿名函数的形式将两个命令放到一起作为一个命令使用。一般函数将在下文提及。<br>不用与和或操作符，我们也可以用if表达式作任何事情，但是使用与或操作符会更便利很多。<br>以上就是Linux脚本编写的基础知识。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-开头&quot;&gt;&lt;a href=&quot;#1-开头&quot; class=&quot;headerlink&quot; title=&quot;1 开头&quot;&gt;&lt;/a&gt;1 开头&lt;/h2&gt;&lt;p&gt;程序必须以下面的行开始（必须方在文件的第一行）：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="linux" scheme="http://zero-mk.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="http://zero-mk.github.io/2018/09/28/Linux/"/>
    <id>http://zero-mk.github.io/2018/09/28/Linux/</id>
    <published>2018-09-28T13:39:34.000Z</published>
    <updated>2018-12-31T17:02:18.706Z</updated>
    
    <content type="html"><![CDATA[<p>关于Linux，说实话我也只是个小白<br>混过许多群，我经常见到一些纯白想着直接用kali成大牛，但一点Linux的基础都没有，连ls,cd都不会你怎么玩?</p><p>我常看的有:</p><p>Linux中国:<a href="https://linux.cn/" target="_blank" rel="noopener">https://linux.cn/</a></p><p>先把 <a href="https://linux.cn/article-6160-1.html" target="_blank" rel="noopener">Linux 新手应该知道的 26 个命令-技术 </a>给记好，不然你连基本操作都不会玩个鬼的kali，问问题前自已先百度，还是解决不了的,问别人的时候说出你的问题和你的解决方法,这是问别人问题的方法:<a href="https://github.com/ruby-china/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md" target="_blank" rel="noopener">提问的智慧</a></p><p>学Linux我不建议是先把所有的命令记下来才开始用,边学边练才是正确的方法,至于该去哪里找环境</p><p>安卓手机:我博客有一篇关于termux的文章</p><p>电脑:百度搜:安装Ubuntu虚拟机</p><p>在线环境:</p><p>实验楼:<a href="https://www.shiyanlou.com/courses/?course_type=all&amp;tag=Linux" target="_blank" rel="noopener">https://www.shiyanlou.com/courses/?course_type=all&amp;tag=Linux</a></p><p>还有这个:<a href="https://bellard.org/jslinux/" target="_blank" rel="noopener">https://bellard.org/jslinux/</a></p><p>如果你连看基础命令都没有耐心，那么我教你一个万能命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /*</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于Linux，说实话我也只是个小白&lt;br&gt;混过许多群，我经常见到一些纯白想着直接用kali成大牛，但一点Linux的基础都没有，连ls,cd都不会你怎么玩?&lt;/p&gt;
&lt;p&gt;我常看的有:&lt;/p&gt;
&lt;p&gt;Linux中国:&lt;a href=&quot;https://linux.cn/&quot; 
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://zero-mk.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>TorMetal2018</title>
    <link href="http://zero-mk.github.io/2018/07/29/TorMetal2018/"/>
    <id>http://zero-mk.github.io/2018/07/29/TorMetal2018/</id>
    <published>2018-07-29T13:39:34.000Z</published>
    <updated>2018-07-30T12:28:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>在暗网翻出来的，机翻的有点那个啥看看就就，非本人原创<br> <strong>介绍</strong><br>本出版物适用于所有Tor用户，他们感到厌倦看到页面掉落而其他人只是垃圾。除了过时的网站。</p><p>我想我们所有进入这里的人都是因为我们厌倦了正常的互联网感染伪人物，他们说他们了解计算机。当他们什么都不知道时，用1000美元的手机支撑着它。当很少了解事情是如何运作的。而他们所做的就是诋毁人们，欺凌和巨魔之间的诋毁，毁灭一切的害虫。在网络成为我们的世界之前，一个充满知识和尊重的世界。当聊天室和论坛，分别知道和分享编程经验，命令和参数时，现在只谈性。在一切都不同之前，即使一个女人进入聊天，也受到尊重，现在被躲在电脑后面的白痴诋毁和冒犯。曾经是学习工具的计算机，</p><p>在我们考虑有连接的容量之前，在流量和等待时间。现在任何愚蠢的人都有20兆字节的人看到色情内容并在社交网络上发布帖子，显示事件何时成为他的生命，这一切都是为了证明自己比其他人更多。实际上它只是一堆中的一个。</p><p>现在我们只能留在Tor网络中，这个网络让我们想起互联网1.0远离每一个可能的老鼠孩子。</p><p>如果您同意您所阅读的内容。那是你的空间。</p><p>介绍<br>经过这么多，我已经设法让你安心思考我的项目。我喜欢的是Hacking，我仍然觉得我无法曝光，我仍然隐藏着，但在地下电脑中创建了一个配置文件。人们可以创造一个人想要的角色，因此可以隐藏在面具之下，假装一个人不是，或者真正是一个人，而不能以任何其他方式解决。有坏事和好事要做。非法人士不会诉诸我，只是为了知道他们的意思，但除了好人之外，还有灰色，我不知道如何处理。如果我注意自己的道德规范，我就会限制自己，我无法学习。如果我放手，我可以参与复杂的事情。那我该怎么办？这是一条独自旅行的道路，因为没有人知道我要做什么。我追求的不仅要学习新的技术问题，但也知道，经过这些黑客的头脑，他们这样做，他们是如何做到这一点。我总是对挑战已经建立的东西感到震惊。质疑去发现真实的动机，因为他真的是应有尽有。没有什么是完美的，但也有很好的理想，但他们却受到人们的运行，每个人都是腐败的，再加上它有更多的缺陷，漏洞，无论是mentrias，弱点，性，食物，酒精，药物等等 每个人都有一些可以利用的，为什么没有完美的系统，因为它们是由不完善的生命创造。黑客攻击不是我们在电视上看到的。目标是研究，以寻找一个薄弱点，如链，它被切割的区域。我想要在那里，利用这个漏洞并违反系统。但这需要知识，时间，耐心，毅力和许多奉献精神。一切都在脑海中，但我需要它平静，安详并且非常专注于我的目标。我想有一个统一的想法，而不是来来回答正确或错误的问题。</p><p>在未知的黑社会中，有一个解放的地形，好的，坏的，并没有那么糟糕。有会议场所，匿名讨论各种主题，特别是黑客和诈骗。谎言和真相。你必须比朋友更关心朋友。围绕这一切，有更多的神秘主义和问题。有一些有趣的社区，但有时他们是想成为黑客的孩子。让我越来越沮丧地让我感到沮丧。联系某人，然后意识到他只是对新奇感到好奇然后消失了。但即便如此，也有非常有趣和有能力的人，但他们不会让自己被触及。唯一的办法就是吸引他们的注意力。但为此，需要一些大事，甚至可能跨越非法行为。我再次感到沮丧。我在一个灰色地带，只有，一方面是没有真正知识的人，另一方面是令人钦佩的人物。除了有一个PGP公钥来联系他们。我的局限是精神上的。</p><p>一开始<br>要从计算机地下世界开始，你必须有一个身份。我想做什么和做什么的投射，以及代表我的一系列问题。然后在思考如何让自己知道。没有什么是容易的，更不用说匿名和隐私了。<br>正常的网络充满了无知和巨魔，在它是一个知识空间之前，一个工具。现在它充满了只会打扰的角色。我别无选择，只能越来越沉浸自己。搜索更多隐藏的网站或其他网络，提高我的技术知识，进入更具精英知识的更独特的地方，而不是像普通互联网那样粗俗。基本上逃避所有认为他们对计算机科学有所了解的人。</p><p>发生了一些事情，这个全球化问题使我们不得不越来越深入。但即便如此，淹没在底部并不容易。那里的人看到你从表面来，并对待你。它们不是清晰的巨魔，当然不是，但它们也不是愚蠢的。进入演示和快速打印游戏。它可以好坏，总是出错。我回到了正常的互联网，人们常常鄙视别人，为了好玩，或仅仅为了感受更多的事实。</p><p>遇到那些不了解典型攻击基础的人，让我走得更远，找到另一个让自己感觉更舒服的地方，让我很沮丧。能够采取另一个职位来学习。即便如此，我觉得有必要创造自己的空间。甚至形成我自己的社区。但这非常困难。首先，你必须了解我，为此，你必须让自己知道，为此，需要花费大量的时间，工作和奉献精神。建立明确的目标，确定要遵循的步骤。我认为这是一项艰巨的任务，但必须这样做。然后遇见黑暗的人，向他们学习，并可能一起执行#operations。但没有任何违法行为，也许只是黑客主义。在互联网深处，必须保持匿名，以保持正确的行为。保持沟通中的隐私。</p><p>黑暗的世界<br>黑客们非常奇怪，我找不到一对情侣。不过，这是一条孤独的道路。与黑暗世界中其他人的关系让我失望。最好的办法是提出挑战或知识清单，以挽救招募人员的过程。我的理想是创造一种力量，一种学习，一种群体理解事物的运作方式。它似乎是我们希望出现的理想世界。</p><p>新知识使我能够思考新的想法，开辟新的视野。道路是双重的，秘诀是来去匆匆，学习善与手。道路是孤独的，即使你需要其他人才能进步。在“客户”和“同事”之间。但谁需要他们？如果总是一条孤独的道路。对手是自己的，必须每天一次又一次地进行质疑和测试。你必须学习免费课程，付款，坚持不懈，不断学习和自学。</p><p>似乎你越前进，你就越孤单。老鼠的孩子现在已经消失了，但他们在哪里好？他们是，但隐藏，他们很少在论坛中展示自己，如果他们是，他们永远不会写。他们使用不同的昵称，以便没有人可以关联它们，更不用说识别它们了。有许多人想要联系他们并变得更加回避。真正的黑客并不出名，那些上电视的人不是黑客，他们使用电脑是愚蠢的。似乎我越接近某事，我走的越远。</p><p>论坛和其他服务正在下降，无论什么原因，你必须在线跟踪。人们也消失了。也许他们迁移到其他网络，i2p，Zeronet或Freenet等。有些人从Jabber / otr身上消失了。发生了奇怪的事。我认为他们失去了兴趣，因为他们来自正常的互联网，当他们来到这里他们看到一个旧的网络。法律问题也是。黑市和主机正在消失。但我想大多数都是Honeypots，FBI安装的网站，或者是真正的网站，用户是秘密代理商。所有的情节都能抓住他们。我也不想念寻找CP的病人。虽然有些地方也会被当局用来拆除他们的网络。这听起来很合理。然后，我们有一个小偷，骗子，堕落者，儿童老鼠，干手，诈骗者和黑客的沙拉。</p><p>TOR中的水平不存在，也没有让我们相信深层网络的着名冰山，也没有马里亚纳群岛，锡安修道院，La Liberte和量子钻头。所有这些都是youtubers的发明，它们可以在垃圾视频中生成访问。</p><p>这些项目<br>我一直认为你可以学到更多，用你的思想占据目标，即使它们很小。现在我有了一个站点，让我可以与更多人联系，从而展示我能做些什么。参与论坛已经让我厌烦，他们总是同样的问题然后那些论坛在那时消失了，那里发布的一切都丢失了。这就是为什么我决定有自己的空间来表达自己。只发布一些真实站点的转储和泄漏的地方，易受SQLi攻击的站点数据库。</p><p>我相信见解自由，因此不应该受到限制，尽管有些人过分了。我当然认为必须有事情的秩序，但这并不意味着受到限制。</p><p>这就是为什么在我的空间中我认为可以自由发布真实入侵的数据而不被评判。此外，我只发布几乎没有相关性的网站，这更多的是声望而非损害。我也明白，应该有一个地方用西班牙语编译所有链接。想法出现并且可以轻松完成的好事。但我们也不应忘记在清晰的网络中存在数字生活。不应该混合的并行项目。</p><p>沮丧<br>找到不知道任何事情的人是多么令人沮丧。我当然指的是Hacking，但不是我相信它们，我真的不知道像127.0.0.1那样基本的东西我总是记得在IRC大战时代的一个“超级”黑客，他说他可以格式化我的磁盘只用我的IP很难。当然，在那之后，127.0.0.1再也没有见过他。笑。我曾经喜欢它，现在当类似的情况再次发生时，我为自己感到难过。</p><p>我想找到真正的黑客，我想我知道它们是什么，但我现在没有好的求职信。这就是为什么我研究TOR网络如何工作的原因，我想到项目，新脚本，我想建立我的武器库，有时候还要和他们中的一些人交谈。我喜欢隐藏服务，我想引起你的注意，以及其他用户。</p><p>关于这个世界的有趣之处在于它是无限的，你可以随时学习，直到你累了。每走一步，我都意识到还有更多的进展。可能性永无止境，道路繁衍。</p><p>我的主要项目是显示我的一些技能，另一个是捕获TOR中的初始流量，甚至将其重定向到我想要的位置。我们的想法是继续垄断用户的注意力，以便吸引真正了解的用户。这就是为什么我还考虑建立一个具有用户名和密码登录的网站。其中只执行POST并返回到表单，因此它不会导致任何事情。我的想法是，它是一种蜜罐，所以他们试图破解它，因此捕获他们写的所有东西，当他们写，记录所有内容，以了解他们如何试图违反访问。另外，我必须继续研究i2p，zeronet和freenet。由于Tor用户正在那里迁移。这类项目的好处在于它们可以保持头脑，</p><p>继续…… 第1章<br>TorMetal 2018 - TorMental是Team Hacking的出版物</p><p>没有回报</p><p>每条道路都有自己的障碍，技术知识和好奇心需要了解更多。每一步都意味着进步，但每一步都会打开更多的大门继续学习。似乎我们永远无法涵盖所有​​内容，因此我们必须指出我们最热衷的最相关和最有趣的内容。现实生活不再像虚拟生活那么重要。世俗事物不再有意义，所有新知识都变得切实可行。次世界和居住在那里的所有人都是业主和主人。在这一点之后没有回报，它没有回报的目的。哪里可以回来？如果现在没有发现上述内容。每一步都更加激烈，在我眼前一切都令人眼花缭乱，一切都令我惊讶。怎么会有如此精彩的计算机，先进和精英思想？</p><p>我也发现用英语全部，我可以利用我们用我们语言想到的一切。除了生成我自己的脚本之外，还可以自动执行某些日常任务或其他“执行”操作的脚本。</p><p>它在推进时被发现，并且在每一步中总会发现更多。对技术的真正品味是无限的，自由的，就像音乐和其他艺术一样。如果我对某事感兴趣，那就完整了。我留下了所有平凡的问题，并致力于我喜欢的事情……黑客攻击。</p><p>￼</p><p>破坏者</p><p>东西让我吃惊，因为我抹掉的一个被Blackware队睡魔的一个desfaceado可见。我所做的就是提高通过旁路外壳到图像上载管理员控制面板（??）。我又来了，第一次拿到钥匙管理，通过转储的网站的用户SQLI漏洞数据库。然后进入网站管理面板尽量抬高C99.php，因为只有上传图片让我起来，我有上传文件停止发送套房套房打嗝后c99.php.jpg，改变c99.php的名字，让他们跑了休息。结果壳上面。<br>见我抹掉被盗这样的，我在发布一个好我的工作 - 知名Tor网络论坛（论坛由消失的方式）。我要做的就是让任何人都可以探索服务器和学习，而不是shell来一个孩子零个伦理和改变我的错误配置指数为他。在此外 ， 这种伪黑客团队，他检查了他的污损，与这样的睡魔我以前叽叽喳喳接触，当我告诉你我是谁？我从来不说了一遍。该#OpWorldAnimal球队，只是没有持久的操作很容易受到XSS页，网址encodeada还藏着一个TinyURL的。什么样的人可以称之为污损？你认为谁欺骗？<br>在环境中，我们有非常困惑的人。我的目的是进入小组并从内部拆除它。但我意识到这不值得。他们是想要或试图成为黑客行为主义者的孩子。</p><p>￼</p><p>服务器服务</p><p>破坏服务器是很少给予的重要奖励。但是当它发生时，感觉就像我用双手触摸天空。建立自己的词典，甚至为此目的准备一个特殊的词典。因为他们正在调整特定目的地的脚本。除了考虑IP问题之外，日夜准备参数化Hydra以缓慢地工作，而不会引起怀疑。当攻击成功时，时间停止，一切都在我的眼前令人眼花缭乱，即使它是低权限用户，也没关系，这是向前迈出的一步，从有问题的服务器获取更多数据。<br>研究所有可能的攻击向量，将每个攻击向量视为最终奖的大门。它没有发生时会令人失望，但获得的经验可以用于未来的项目中。一切都在发生，即使它失败是一个进步，一个黑客世界的进步。还不错的是，它可以在同一个目的而使用得到的东西。如果用户表由SQLI得到你可以在它的Web界面，甚至SSH或ftp服务进行测试，如果他们已经发表。服务和vesiones的旗帜的主题是非常重要的，因为从那里我们可以发现已知漏洞。当这种情况发生时，情绪会更高。这里没有书可以告诉你如何做到这一点。这是一场一对一的战斗。我对服务器，所有技术及其组合都是有效的。你必须在任何地方进行攻击，使用默认密钥安装服务或插件，与用户相同的密码，或者易受字典强力攻击的弱密码，其中所有用户都是已发布密钥的数据库，由MD5中的管理员及以上加密，有时是未加密的。服务和版本问题非常重要，我们必须再次提及。我们甚至可以在为此目的创建的虚拟机实验室中“重新创建”真实场景。这就是为什么我说，我的极限只是精神上的。由于托管主站点中SQLi漏洞的时间，我得到了完整的用户和密码列表。可能性成倍扩大，进入无限的空间，我不能就这么defacear，而是要利用空间上传所有类型的文件，以及修改现有的人产生访问其他或播种某种恶意软件，牛肉，感染访问者已经在使用的网站。限制是精神的…这就是折磨我的东西。</p><p>￼</p><p>反对SysAdmin</p><p>即使不是全部都是工具或自定义脚本，为此目的创建的字典。但进入系统管理员的脑海。她在成立时会发生什么事。当然，他已经有自己的方式，他的风格做事。如果我们能理解并违反它，我们就会成为天才，因为我们都会犯错误，但他肯定也会犯错误。一些默认配置或东西。当然，如果它是一组管理员，那可能会更困难，但你还必须看看他们是否收入不错。这本着名的书说，入侵是一门艺术。欺骗的艺术还在于让组织中的某个人运行一些恶意程序来扩展特权，这些特权并不比用户/管理员更好。计算机安全是一个链条，它是由最薄弱的环节切断的而且几乎总是普通用户什么都不知道，并且受到情绪的引导，使他们的点击次数超过原因。系统管理员，无论他们如何准备，仍然容易犯错误。那时我必须要注意，一些服务或服务器刚刚安装，默认情况下有密钥，可以是网关。别出心裁进场，并超越它一个脚本小子，我要知道所有的工具，并利用它们来实现渗透入系统，如果是，我们必须保持对未来的连接通道，并实现犯目标。寻找攻击向量很有意思，但逐个尝试是很繁琐的。如果我获得访问权限，我必须通过安装后门来保护它。您还可以转动并迁移到其他服务，以避免引起怀疑。或者从那里，尝试攻击另一台服务器。但一切都是狗和猫的游戏，因为永久性会产生更多的日志，因此产生怀疑。反向连接（/meterpreter/reverse_tcp），如果找到了，它会说我连接的地方。这就是为什么我们必须从另一个受到破坏的服务器上做到这一点，我们之前已经违反了这个并且值得信赖。<br>回到后门，只不过是通过创造一个“后门”来确保入口。这似乎很复杂，但事实并非如此。例如，对于网站中的管理员用户，我可以编辑panel.php，以便在密码中我可以做一个’或’miclave。当管理员更改密码时，我将继续输入相同的… miclave。</p><p>￼</p><p>漏网</p><p>该污损是一个社会或政治，但互联网上的要求，只会改变网页的索引，但影响将与受影响的网站的重要性有关。我记得我第一次抹掉之一，它是由于SQLI，有点隐藏的错误，但错误了连接到数据库，这样我就可以拿到钥匙的经理，一个已经在MD5字典（hashkiller。 co.uk），所以我不介意其他键的强度，如果其中一个管理员不小心，你的密码很简单。找到管理面板（robots.txt的）后，我找不到上传上传或bypassear我的外壳，让我想到的唯一的事情，是降低主画面显示，修改，然后再次上传。因为当试图通过shell（c99.php.jpg），系统验证它不是图像，并且不允许我上传它。另一个抹掉记得，当我注入的代码来访问网站管理员，SQLI形式（POST），获取密码哈希管理员，所有的人都在MD5的字典。我设法进入并通过shell，当我浏览服务器时，我意识到它是一个Windows。我能够进入管理员桌面。通过在外壳的索引页是空白的，并没有一个备份来纠正该问题的错误（总是在不断变化的东西之前一定要做一个备份），于是第二天他们恢复了页面，并删除了我的外壳，但并没有改变访问代码，所以我重新输入并上传了一个未被任何已知防病毒软件检测到的shell，我还将其作为更新放在网站的维护文件夹中。php所以对于管理员的眼睛将是难以察觉的。关于可以上传的shell然后从另一个地方复制并删除最初的shell的好处。所以我可以留下来调查更多的Windows服务器，所以我可以恢复到C :.在这里我有几个选项，获取文件山姆尝试通过暴力获取密钥，在桌面上留下一个txt通知入侵，所以我可以留在家里用我的消息打开笔记本当它loguee或者将.exe伪装成adobe或java更新，以便管理员看到它并点击它。在那里，我可以嵌入我想要执行的代码，该实例的总数我是管理员。但与管理员的斗争变得乏味，虽然现在无法检测到防病毒和管理员的shell，这个shell在可以做的事情上很差。我可以做的是，上传c99然后擦除它，总是我再次上传它与可怜的shell不可检测。panel.php中的后门程序已经安装，但是当他们不了解正在发生的事情时，他们会通过一些备份来恢复所有内容，那时我的所有工作都会消失。贝壳和后门。我失去了机会，也失去了土地。系统越难，我就越呆在外面。他们应该做的是让攻击者做他自己的事情，并跟随他的脚步，以捕获他并用一些不可抗拒的文件陷阱他（黑客也很脆弱）。但肯定是由无知的上级的压力restuaran一切和删除日志，追踪一切。对于这种情况，<br>谈论痕迹，痕迹，我的连接是扭曲的，以前我连接到一个可靠的VPN，我随着时间的推移而改变，甚至我的Wi-Fi连接不是我的。所以它应该相对安静。<br>我记得的另一个案例是邻国的公共服务网站，其中有一个有趣的细节。首先让/ admin列表没有正确分配权限，上面没有索引，所以你看到所有文件update.php load.php modify.php等等。可怕的错误。启动它们的所有文件都被重定向到login.php，这很好，验证我们没有输入到应该的位置。其中只有两个允许修改页面和图像的文本。但由于他们在编程方面很出色，因此延迟了负载。换句话说，当加载文件时，它显示了内容，后来发现它不是管理员，它将我重定向到panel.php，没关系。但验证应该在开始时进行，而不是在最后进行。然后我想出了停止加载文件，修改我需要的内容然后释放进入服务器的文件的想法。也就是说，当您验证我们没有管理员凭据时，将事先修改数据。Burp Suite可以实现这一点。为了证明这一点，我在索引文本中更改了重音以验证所有这些都是可能的。关于更新图像，.php是非常严格的，所以选择下载网站的图像，在那里添加一个小白点，然后将其上传到同一个地方。我无法上传shell，它没有让我通过它，但至少我控制了文本和图像。当与我的国家发生冲突时，该项目正在等待处理。也就是说，当您验证我们没有管理员凭据时，将事先修改数据。Burp Suite可以实现这一点。为了证明这一点，我在索引文本中更改了重音以验证所有这些都是可能的。关于更新图像，.php是非常严格的，所以选择下载网站的图像，在那里添加一个小白点，然后将其上传到同一个地方。我无法上传shell，它没有让我通过它，但至少我控制了文本和图像。当与我的国家发生冲突时，该项目正在等待处理。也就是说，当您验证我们没有管理员凭据时，将事先修改数据。Burp Suite可以实现这一点。为了证明这一点，我在索引文本中更改了重音以验证所有这些都是可能的。关于更新图像，.php是非常严格的，所以选择下载网站的图像，在那里添加一个小白点，然后将其上传到同一个地方。我无法上传shell，它没有让我通过它，但至少我控制了文本和图像。当与我的国家发生冲突时，该项目正在等待处理。php是非常严格的，所以选择下载网站的图像，在那里添加一个小白点，然后将其上传到同一个地方。我无法上传shell，它没有让我通过它，但至少我控制了文本和图像。当与我的国家发生冲突时，该项目正在等待处理。php是非常严格的，所以选择下载网站的图像，在那里添加一个小白点，然后将其上传到同一个地方。我无法上传shell，它没有让我通过它，但至少我控制了文本和图像。当与我的国家发生冲突时，该项目正在等待处理。</p><p>￼</p><p>莫拉莱哈</p><p>容易受到伤害的系统是任何叔叔制造的系统。很难妥协更新的WordPress。但是没有人编写的页面是最好的，因为它收费几个小时，客户几乎看不到它的工作原理，它发布了付款，以便它便宜，程序员无视，因此仍然是一个功能但缺乏网站。<br>这里有什么有趣的。它了解事物的运作方式。如何跳过控件。一个优秀的Web程序员会对所有文本条目进行字符控制。在前端。使用html / javascript。使用Burp Suite可以悄悄地跳过这个。由于我加载页面，我输入页面允许输入的内容，我点击发送，Burp Suite停止加载，我修改字段到我的心血来潮，我发布了货物。容易。因此，程序员也应该在后端进行验证，例如使用PHP并检查输入的数据是否正常并可以将它们带到数据库。过滤当然’“ - \ /类似的东西。<br>那么验证前端和后端数据之间的区别是什么？前端在客户端的浏览器中执行，前端在服务器中完成，这将产生往返流量，因此在两侧都可以方便地进行。如果程序员是聪明的，他将在双方验证安全性和效率。如果它更聪明，它将在数据库中创建用户和程序。例如，如果Web列出产品，则不必使用数据库引擎的admin用户，可以将其创建为只读用户。如果攻击者在所有这些验证后到达那里，他就无法注入INSERT INTO，因此数据库不会受到损害。经历这三层是非常复杂的。这里的秘诀是逐个尝试所有文本框，谁说Hacking是程序<a href="http://www.web.com我按Enter并准备好??" target="_blank" rel="noopener">www.web.com我按Enter并准备好??</a>?</p><p>￼</p><p>继续…… 第2章</p><p>TorMetal 2018 - TorMental是Team Hacking的出版物</p><p>狩猎黑客<br>它总是引起我的注意，因为一些黑客破坏了完整的服务器（质量损坏）。特别是Defacer，来自阿根廷的El Libero。他在马尔维纳斯群岛的官方页面上播放了该国的国歌。这种黑客行动使我想要跟随它，甚至跟踪它。首先，我开始寻找新闻，我发现很少，但在通过流行的<a href="http://www.zone-h.org寻找他的污点后，我" target="_blank" rel="noopener">www.zone-h.org寻找他的污点后，我</a>   想找到一些模式或错误带我去他。分析污损x污损。从我所看到的，他是Team Hacker Argentino非常活跃的成员。如果你犯了错误，我可以在youtube上找到视频。例如，当使用着名的外壳C99.php时，它在右上方显示设备的本地IP，因此在尝试定位IP时，我看到它连接的位置以及它在日期之间的连接时间。此外，一名同伴出现在该组的一些污点的签名中，显然背叛了他，并在他的一个粘贴盒中发布了数据。他确认了他所想的，也是为了录像，他还是个十几岁的孩子。我煞费苦心地观看了视频x视频，看到了我所有的资料。暂停并返回以反复查看部分视频。我能够知道他对收藏夹和他用于桌面上图标的程序感兴趣。它也有一个页面，但它不再存在于nic.ar中。他的聪明才智也是粗心的，他的自我与他对抗。 当时他被梳理并抹掉在该国报纸抓获。男孩很辉煌，但他选择了错误的方式。是什么吸引了我的注意的是，完成服务器desfaceo。从我所看到的，这是一个强力攻击，密钥管理FTP。在这种情况下，作为所有网站的密钥，他使用了一个脚本，用他的所有网站替换了所有网站的原始索引。不时的所有页面都配置错误。在那里，我理解为什么在新闻中看到它们从一个时刻到另一个时刻被攻击是常见的，数千页，当然，无论它们是什么，网络的完整服务器都是断开的。道德，自我最终会与我对抗，成就证明了我为此所做的一切好黑客并不出名但总是隐藏起来。换句话说，那些出现在电视上的人……都失败了。</p><p>从当地玩<br>并非所有黑客都在互联网上。例如，它也适用于本地网络。典型的wifis网络，他们有一个相对容易的密码。如果我不知道Wi-Fi的密钥，它可以通过字典强制删除到WPA / WPA2，kali带来着名的rockyou.txt。进入后，扫描显示默认情况下所有设备和典型路由器的经典192.168.0.1/24或192.168.1.1/24。管理员管理员或管理员1234，很少改变它，但如果我仍然没有得到它，当我连接并要求用户名和密码时，它也告诉我品牌和型号。只需在谷歌搜索默认密码，就是这样。访问和控制时，它们通常具有非常基本的配置，因此我们可以正确指定参数，通过DHCP分配IP，扩大范围，DNS，因为我们可以完全控制网络，所以可以更好，更快地帮助网络工作。我们可以看到所有连接的设备，扫描，如果有与SMB或安全VNC团队，默认键连接，即使DVR（服务器监控摄像头）也有保险的默认密钥产品或只是这个地方的名字。如果有共享文件夹，在大多数情况下只能播放音乐，没什么重要的，那就太受欢迎了。所以，你可以把一个邪恶的黑色金属的主题，但当然，我们必须努力多次复制，并把现有的文件是艰苦的，但有趣的名字。我也可以把一个规则，家长控制，我只访问和使用的整个带宽或见好就收某些IP地址我不想要导航（预约DHCP其MAC地址）。</p><p>在具有相同SSID但密码不同的管理不善的地方很常见。如我所说，伸出援助之手并没有任何帮助。由于提供Internet的计算机通过网络挂在另一台上，我可以逐个重新配置。如果我不知道管理员的密码，因为他们改变了它，我可以用他们带来的小按钮实际重置设备，只要他们没有看到我并且没有太多人的移动。然后我默认进入并配置它，以便没有人怀疑使用相同的Wifi名称和密码。它并不总是必须为善。我可以将特定计算机的IP指定为DMZ，以便从公共IP外部攻击的所有内容将其重定向到该计算机，或者我只需在我的计算机上安装Web服务器或使用i2p，我不必在防火墙后面，我也可以使用虚拟主机重定向端口，从而从网络上的任何计算机上发布我想要的端口，我可以从路由器外部或DVR或某些端口的游戏，torrent或等等，如果我想，那么我可以攻击他们或从外面访问。学习和玩乐还有很多工作要做。我可以对网络IP进行持续的拒绝服务（DoS），以便计算机的所有者感到沮丧，或者让主路由器强制重置它，当然因为所有的传出流量都会减慢因特网的速度。互联网经历了那里。洪流或其他等等，如果我想，那么我可以攻击他们或从外面访问。学习和玩乐还有很多工作要做。我可以对网络IP进行持续的拒绝服务（DoS），以便计算机的所有者感到沮丧，或者让主路由器强制重置它，当然因为所有的传出流量都会减慢因特网的速度。互联网经历了那里。洪流或其他等等，如果我想，那么我可以攻击他们或从外面访问。学习和玩乐还有很多工作要做。我可以让服务（DoS）攻击不断到IP网络的计算机的所有者被打乱或主路由器强制重置一遍，当然互联网是变慢了，因为出站流量互联网经历了那里。</p><p>Android有一个非常有趣的漏洞。 如果有现有的Wifi，例如Drugstore Wifi和我的受害者连接。然后，我可以创建一个完全相同的。当你离开商店时，离开这个地方并跟着它。您的手机将连接到我的AP，是一种天然的功能连接到已保存的搜索Wifis。虽然我不能给或互联网，我可以运行Wireshark的，看看使用喇叭。在希望他们的应用程序，同时连接到我，你会不会使用移动电话公司提供的数据的意义上说，我还没有抓到，直到它离开。最简单的方法打，这是一个麦克唐纳，创建一个AP麦克唐纳免费无键，等待人们来连接，这样可以很方便地有一个良好的天线USB AP（在背包里没人会注意到） ，因为在那里我创建了我的恶意Wifi，并且笔记本电脑的板载我连接到该地方的真实互联网。通过这种方式，我的“客户”会导航而不会注意到任何奇怪的东西。</p><p>离开小径</p><p>我们所做的一切都会在操作系统，路由器，ISP和我连接的每台服务器中留下痕迹。始终在服务器上，您必须搜索两个文件。access.log和error.log在第一次所有访问中都已解决，因此它具有该名称。另一个文件注册了所有访问错误。例如，dirbuster，sqlmap和hydra等实用程序在进行测试时会产生许多错误，并且随着我们的IP连续重复，该文件会大大增加。出于这个原因，攻击是手动进行的，或者如果使用工具进行攻击，则可以方便地对其进行参数化，以使其尽可能慢地进行。行政事实应该不断检查日志，所以我的工作不应该引起任何怀疑。这就是为什么有些管理员将这两个文件保存在一个单独的服务器上，这使得擦除我们的轨道变得更加困难。这就是为什么我们必须屏蔽我们的IP，在一些VPN，Tor或其他什么，以及更多的一个在另一个之后。连接到VPN，然后通过Tor。但是许多智能管理员会阻止所有Tor的IP，因为Internet上发布了输出节点列表。它让我别无选择，只能随机串行或并行使用VPN或它们的链。每个层都变得更慢，但增加了更多的安全性，甚至到了使用它们而不重复它们的程度。如果您选择公共VPN或支付，这种付款似乎更好，但他们有注册，有些是通过btc付款，这是一个两难的选择。有很快的日本VPN，但在计算机问题上使用俄罗斯或邻国或弱国法律。这就是为什么在新闻中我们总是看到他们据说从俄罗斯攻击美国。除此之外，我相信在当局之前，公司会张开双腿来提供信息。只有VPN允许黑客攻击其条款和条件。位掩码。<br>通常在入侵之后我将其发布在一个不起眼的论坛中，以便每个人都可以输入并因此在日志中生成更多条目并生成更多跟踪以减轻可能的调查。留下其他人的痕迹还有什么好处。</p><p>其他黑客<br>我总是对黑客故事感兴趣。它们令人兴奋和创新。用新鲜的想法挑战既定的。我可以从一切中学到一些东西。例如Adrian Lamo，他闯入了最大的安全网络。但他的自我背叛了他。他被称为流浪汉黑客。换句话说，它从网吧，酒吧甚至废弃的建筑物中进行了入侵。这是一个很好的例子，使用互联网不是为了我的活动。他未能成为纽约时报的专家顾问。并且还通过背叛私人曼宁与维基解密的开端。黑客的脆弱性是他自己的自负。<br>DarkDante控制了电话，与收音机相关，因此它被称为保时捷的唯一参赛者，也有助于捕获大量的pederastrians。<br>Gary McKinon在美国宇航局和其他政府机构中获得了非陆地军官档案清单。所有人都赞成追随他对不明飞行物的热情。<br>凯文米特尼克是最着名的，他让我们教。“用户是任何安全系统中最薄弱的环节。” 它是网络钓鱼的基础，如果我们开始分析当前的入侵，系统不再被黑客入侵，而是人们的信任。公司投资于基础设施的安全性，而不是为员工提供培训。<br>如果我喜欢当前的黑客时代，他们会有另一种心态，而不是罪犯的心态。除了一些例外，这个主题的电影是好莱坞的典型垃圾。第一代黑客创建，第二代被摧毁和伪造。目前的人有更多的意识。现在地下的场景结束了。</p><p>目前的情景<br>新老黑客现在拥有计算机安全顾问。从法律问题和道德愿景中可以看出一切。有些法律将攻击称为犯罪。整个黑客场景发生了变化。它来自于一个有趣的学习进入过度的地方和大型系统隐藏的顾问，讲师在合同之前进行攻击。<br>黑客本质的味道已经结束了。现在，它有助于互联网2.0中的巨魔，LoT（物联网）的出现，并加强了黑客主义的场景，如匿名。我们甚至可以说自动攻击（美国）最终成为俄罗斯人。<br>希望我们都能理解网络安全意味着什么，人，公司，网络管理员和黑客。</p><p>它将继续…… 第3章<br>TorMetal 2018 - TorMental是Team Hacking的出版物</p><p>从内到外</p><p>入侵并不总是来自外部，也不是来自其他系统。可以安静地对我们安装的系统进行操作。要么评估它的安全性，要么只是练习，学习和学习。有趣的是，你可以从内部审查所有内容，而无需“黑客攻击”任何内容。我是管理员，我可以在内部和即时修改所有内容。进行渗透测试或“Pentest”。我可以直接访问数据库，私人消息，用户表，即使密码在MD5中，我也可以解密它们。使用john或hashcat或hashkiller.co.uk，你就完成了。了解特定用户的活动。有了解密密钥，我可以在他们的facebook，outlook.com和gmail上试试，因为我也有邮件，看看会发生什么。即使这也没必要，因为我可以修改CMS（WordPress）并跳过编码问题并将密码保存为纯文本。它每次都变得越来越难，但它只是跳过加密功能。这就是为什么它非常重要永远不要重复一个键，因为我们不知道我们在哪里注册。有些管理员可以“看到”它。私人消息，用户很少删除它们。因此，建议始终将PGP用于所有类型的通信。我可以监控用户，不满意的人，想要攻击我的系统。我可以添加Last IP表并跟踪它连接的位置。因此，例如分析重复的用户。甚至在连接或思考或我想要的时候设置警报。或者只是修改你的帖子。谁拥有对系统的控制权就可以控制一切。<br>如果我已经控制了其他论坛，我已经被“黑客攻击”，我可以在一个和另一个之间交叉数据。那就是转储（转储）受感染的数据库并进行非常有趣的查询。例如，要查看用户在彼此中的内容，查找相同的密钥，甚至重复IP。SQL就像奇迹一样。在另一个论坛中仍然是SHA-1中的键我可以看到我在我的关键字并在其他系统中尝试它… …宾果游戏。用户总是使用密码几乎是为了同一件事。如果我想更进一步，我可以看到活动很少的用户，登录并向管理员发送消息，然后我删除外发消息。如果您回答我删除收件箱中的邮件，您就完成了。如果原始用户连接，他不应该意识到这一点。<br>如果我想更进一步，我可以在受害用户的另一个论坛上发布一个带有恶意链接的帖子，试图捕获管理员或其他用户的会话cookie。点击链接时要小心。如果发生了某些事情，他们会删除或惩罚该用户。眼睛不会在我身上。如果它是一个旧的论坛，我可以尝试上传一个shell或让管理员欺骗它来执行它。它很少奏效。<br>我记得一个可耻的案例，他们攻击了一个色情网页，有些用户在@ etc.mil或美国官员注册。Mecerido有泄漏（过滤）。</p><p>我也可以冒险进入我工作的公司。因为我可以访问网络和一些系统。我获得了大量的支持，这将是一个小问题的研究，而其他人在Facebook上展示他们的生活是多么美好，并且可以用来证明这一点。</p><p>普通人对计算事物的简单而无知的观点使我们能够从一个系统转移到另一个系统。但在里面。<br>不要感到惊讶，如果我能做到这一点，我就是一个人，国家安全局怎么办？</p><p>￼</p><p>社会工程</p><p>黑客攻击不仅仅是让系统做一些特殊的事情而不是编程。很好的定义 :)系统很难被违反，但不是处理它的人。 这是一个艰难的做法，但同时也很容易。我可以打电话给公司询问某个地区，提出索赔要求并要求提供更多信息，他们会告诉我，你必须有这个数字，证明，等等。同一个受害者正在指导我违反它。我可以请你寄给我一份文件或发给我一份。我可以分析他们的元数据，发送带有javascripts的HTML格式的电子邮件来查找内容。发送链接或受感染的文件，而我们在通话时没有人会过多关注安全性。但这对于防病毒来说更难。总是有管理员，懒惰，准备不足和收入不高，所以他们会依赖于那些工作。这是超级犯罪。模拟员工并致电系统区域以请求重置密码。内部系统总是比外部系统具有更少的保护。建筑维护区域，很少了解计算机，如果我有实习生，我可以让我通过其中一个系统，以前发现。输入员工的网络邮件。人力资源领域充满了问题，我所画的事实是一个非常大的进步。我打电话给某人特别送货，并用一些姓氏字母让我困惑，我的受害者肯定会纠正我，并会在没有意识到的情况下给我更多信息。人力资源领域充满了问题，我所画的事实是一个非常大的进步。我打电话给某人特别送货，并用一些姓氏字母让我困惑，我的受害者肯定会纠正我，并会在没有意识到的情况下给我更多信息。人力资源领域充满了问题，我所画的事实是一个非常大的进步。我打电话给某人特别送货，并用一些姓氏字母让我困惑，我的受害者肯定会纠正我，并会在没有意识到的情况下给我更多信息。<br>谁说Hacking是用电脑完成的？系统很难被破解，但不是处理它的人。易受攻击的是那里。因为最终用户点击了他不应该去的地方，他的信任被欺骗了。</p><p>￼</p><p>感觉力量</p><p>当我进入一个系统时，我感觉到了上帝，哈哈。虽然实际上它是一个对“小弟弟”有自命不凡的语言，但这种感觉是不可阻挡的。当我看到系统管理密钥正常工作时，我的胸部肿胀，心脏停止。<br>在让我失望之后，有些目标没有任何用处。这就像一个魔术，在你知道它是如何工作之后，你会失去乐趣。但是有一所大学改变了我的呼吸。每小时和每小时导航每个文本框，分析所有表格（POST）和GET测试所有基本注射’或’1’=’哈哈’1’=’1’-1 - ‘“\等我找到了一个部分新的，“弱点”，当测试注入时，SQL失败告诉我mysql的典型错误。我准备好了，我知道在哪里注入。测试-1 + union + select + 1.2–所有这些都是手工繁琐的和焦虑现在杀了我，所以我给它参数后，我使用我最喜欢的工具，sqlmap，–random-agent –tor –threads = 2 –time-sec = 10 - delay = 10因此它的工作非常缓慢，因此不会引起怀疑。你的WAF仍然可以实现，所以我需要用–tamper charencode，base64encode，multiplespaces，space2comment只用两个来欺骗你。使用详细模式，您可以看到该工具如何工作并知道它开始失败的位置，这意味着另一方面WAF正在排斥我的攻击，因此我必须停止，更正参数并重新启动命令。这会产生焦虑和压力，因为即使VPN可以看到流量，所以我也必须考虑到这一点，或者只是通过tor释放它，但即使WAF阻止我，我也必须重新启动tor并重新启动一切试。更换螺纹，夯锤或注射和注射之间的时间。这一切都让这段时间过得非常快，但这种情绪让我不能停下来。咖啡帮助我冷静下来，尝试尝试，直到他妈的sqlmap通过WAF，它可以在没有意识到的情况下进行注射，直到结果发现漏洞。这种情绪会带来快乐的飞跃，是的！它很脆弱。好，但很平静，我只有进入的通道门。在再次调整工具的参数之后，我请你带给我所有的数据库–dbs，和uff，它们很多，当然我看到他们有几个项目，一个图书馆，其他门户网站，它是一所大学。将过多数据库放在同一数据库引擎下的致命错误。对于搜索中的文本框，我最终会访问我工作的特定页面之外的所有可用信息。我选择了一个数据库，然后带上你的工作簿 - 表。还是有太多了。已经凌晨3点了，我的收获很少。当管理员在他的床上睡觉时，有人潜入他的系统。 我也看到PhpBB数据库，WordPress，都是混合的。这样做的人并不十分清楚他在做什么。那么现在我把phpbb_users和wp_users的经典表首先带到他们的列–columns，我选择我想要的那些，最后是dumpeo –dump。最有趣的是所有数据库的邮件用户传递。学生或老师的桌子对我不感兴趣，我会变大。不要伤害，但要尽可能多的伤害。如果我想找一个特定的人，我只是喜欢和去。这是黎明，我还在这里和那里盘旋。直到找到一个管理员委员会。我喝了最后一杯咖啡，sindo是时候吃早餐了，虽然我连续吃了很多次早餐。这个表我可以完全转储，因为它总是很小，只有其他一些行。准备好所有这些时间总结为最后输入我按下。如果一切顺利……并且…在我面前闪耀一行。<br>管理员<br>用户密码<br>admin <strong><em>**</em></strong> </p><p>sqlmap有一个内部字典试图解密密钥。不过，我复制它并同时将john和hashcat放在一起工作。已经是早上7点，时间流逝，我不能再忍受了。焦虑让我痛苦，我在网上词典中寻找它。有人必须完成并给我我想要的东西。最后，使用的密码不值得一个好的管理员的位置。这是一种耻辱，但我的主要目标是实现的。现在我可以去大学了。<br>总是在一切，前后都有。首先是要知道我是否能够实现它。后者可能是我成功了，或者最可靠的是它没有发生，我充满了不满和沮丧。我的成功率很低，但是当它给出时……这是一种非常奇怪的快乐，因为普通人没有人能理解它。</p><p>￼</p><p>革命现在开始了</p><p>在一边和另一边旋转了这么多。在我看来，我学到了许多有趣而准确的东西，以逃避政府和大公司的间谍活动。我甚至敢说，完全是匿名的。但这是一把双刃剑，因为有人说不可能是匿名的，我说是的。演示可能导致人们误解并将其用于选择性活动。从这个意义上说，我可以鼓励人们违法。但这不是我的目标，虽然我觉得我必须这样做。让每个人在互联网上自由地处理自己就像一把锤子，可以用于可重复性或者为了伤害。像刀子一样，本身并不坏，它没有伤害，但一切都将取决于使用它的人和它的意图。<br>我觉得我有使命，有使命的帮助。展示政府和大公司所表现出的不同现实。<br>我的目标是让我的想法浮现，出现并帮助创造一种新的集体意识。看待事物的另一种方式。挑战既定的，简单地质疑它而不破坏任何东西。革命没有在街头表现出来，革命是知识分子，现在开始。</p><p>￼</p><p>它将继续…… 第4章</p><p>TorMetal 2018 - TorMental是Team Hacking的出版物</p><p>黑客团队的历史<br>故事以他的名字开头，作为一个群体。但最重要的是，这个名称被认为是容易找到的东西，并且在许多可能出现的结果中被混淆。有时为了隐藏某些东西，你必须简单地展示自己。这个名字的灵感来自意大利安全公司Hacking Team，该公司被计算机安全研究员Phineas Fisher攻击。我很喜欢它，因为它是逐渐参与的，一点一点地推进，所有这一切都来自于在DW（深度网络）中购买的0day。阅读他如何做的步骤是非常令人兴奋和有趣的。只有对我来说，我想把这个名字给予Hacking团队，并将骑士变成knigth，这对于Hacking团队而言。一个愚蠢的问题，因为这听起来像英文错误。或者没有直接的。这个想法是使用一个常用词，绅士用英语，并做一些事情，使它成为我的。像H4ck3r8这样的事情已经发生在我身上。因为那个缺口，因为我的导师，我的第一个跟随的是某个knightX谁拥有一个geocities网站。美好的时光。为了纪念他。<br>虽然我已经使用了几个昵称，但至少为此我们将留下一些绰号。<br>好吧，在我在DW的时候，我厌倦了在论坛上发帖，以至于他们以后就会消失，而且入侵，数据库等都丢失了。我将永远记得发表他的“本周污损”的干相小海湾，他们都是灵魂。但最终，论坛死了，我的所有帖子也都消失了。所以我决定创造自己的空间，独立于一切。发布并能够控制我发布的所有内容。我总是很容易访问数据库，所以我只从低名网站发布，我不想遇到麻烦，只是展示我的技能，并能够在环境中遇到更多更高级别的人。有趣的是，我访问了一些我从未想过可以进入的地方。它对可能发生的事情感到害怕，这就是为什么它就在那里，我不会在那些情况下重复它。很多次偶然。例如，访问数据库时未更新的旧站点我发现存在更多数据库，所有数据库都在同一引擎（数据库服务器）下。然后，通过页面中的漏洞，它最终会破坏该完整服务器的所有数据库。所以可能会有更多的公司，学院等 除了拥有一个用户，您还可以平等地访问所有内容。<br>回到团队的主题，他们似乎感兴趣，但他们离开，其他人来等等。他们贡献了一些东西，他们采取了一些东西，然后他们完全消失了。我的梦想是你可以建立一个联盟，一个讨论各种问题，信息技术，安全，政治和时事的团队。有趣的事情是一起完成的，而不是分开的。总是整体不仅仅是各部分的总和。有助于网络的自由，而不是其中的滥用。我认为，如果所有人共享黑客攻击的网站或系统，您可以跨越所有信息并达到一些重要的目标。有点邪恶，但这有助于人们更好地生活。大公司对地球不感兴趣，更不用说它的居民和资源了。想法永远是好的，只有人们执行它们并且它们是腐败的。所有人都是在没有邪恶的情况下出生的，但在社会中发生了一些自私的事 我们是社会的敌人。</p><p>新社区<br>见到我的新邻居的最好方法是破解他们的wifis，因为付出了丰富的东西并侵入我的私人财产？看看他们连接了哪些设备，大部分是移动设备，分析他们的流量只是为了看垃圾，事情变得不重要。失去时间 现在有很好的覆盖范围的wifis中继器，例如室外，但是其他设备将所有这些WAN连接连接到一个。因为如果我可以使用vaias，我只使用破解的wifi。我也可以选择离我最近的位置。这更有助于匿名。除非网络瘫痪，请关注另一个网络并继续。我也可以按照我的方式旋转它们。一切都是如此简单，比如在角落商店里喝咖啡，询问你的密码，然后以放大的方式从我的地方使用它。即便如此，凭借这些技术，他们已经陷入困境，如果我们参与非法活动，我们将以严重的方式结束，这只是一个时间问题。你在互联网上所做的一切都可以用来对付你。使用非专有的wifi不是问题，因为它是统一费率，但是分析您的流量或尝试进入您的计算机，如果它是入侵，还有更多从计算机获取数据。</p><p>匿名<br>我花时间追逐匿名的人。他们有页面，但大多数都已关闭或过时。谈论他们所说的不再存在。只有关于这个主题的无信息文章。很多虚假信息。直到有一天我给他们，他们真的在一个非常简单的地方。<a href="http://www.anonops.com和几个人一起说英语，我来到一个管理员，他问我几个问题，我通过了所有测试，但不是最后一个。什么是匿名？我的所有答案都没有给出密钥。而这个角色告诉我，这是一个想法。但是，就像所有的想法一样，它是由那些尊严很容易被打破的人管理的，我们都有代价。我的对话者说，" target="_blank" rel="noopener">www.anonops.com和几个人一起说英语，我来到一个管理员，他问我几个问题，我通过了所有测试，但不是最后一个。什么是匿名？我的所有答案都没有给出密钥。而这个角色告诉我，这是一个想法。但是，就像所有的想法一样，它是由那些尊严很容易被打破的人管理的，我们都有代价。我的对话者说，</a> 任何人都可以匿名，只要他们遵循他们的理想。但实际情况是，许多操作都是代表这个小组完成的。但这个想法实现了吗？我认为一切都是垃圾。很多东西都是垃圾。谁是匿名的领导者？没有人回答我，同时也是每个人。#op在一个小组中决定，每个人都平等参与。但是，在youtube上发布的大多数视频都是由老鼠制作的。使用Loquendo非常容易，在背景中使用面具打手势的典型角色。没有人看到他的嘴，因此很容易。所以任何人都可以进行#operation并将其归于Anonymous。这个想法很好，因为它超越了所有地理问题，语言，种族，宗教等。它们无处不在。这很棒，因为有很多人在同名的情况下打击不公正。这听起来不错，但也很吓人。因为有人可能会使用他的名字做错或者说是好的，甚至可能破坏页面并说它是匿名的。这是好事还是坏事？有人有什么好处？善恶？与新闻一样，他们抓获了10名匿名成员。他们真的是黑客？他们来自匿名？他们遵循了一些理想？或者他们是否将其判定为Anonymous，以便突袭听起来会更成功？因此，作为一个简单的计算机罪犯，会徽和流行的声音更严重。历史是由那些赢了，警察赢了的人写的。所以这意味着还有另一个故事，但是，我们无法知道。但小报出版社，博主，youtubers等的所有失真。谁阻止同一当局进行攻击并将其授予Anonymous，所以这个话题在整个互联网上都是病毒式的。匿名的想法虽然好但很危险。作为匿名，一切都是允许的。</p><p>托尔<br>令人印象深刻的是可以完成的事情。例如，使用Tor，您可以指定仅使用特定输出节点。优选RU，CH等 据说美国国家安全局已经采取了许多出口节点，可能来自美国领土，机器人先生从该神话开始。使用特定输出可提供一些额外的安全性。我也可以运行Tor的几个实例，所以不要使用Tor，我可以一次使用Tor几次。这很好，因为使用网络的http / https / socks代理是没有意义的，因为它们受到干扰而且不适用于攻击，因为它们会在短时间内免费阻止我。但我可以使用我自己的“自己的”自定义代理，使用Tor来实现它。我可以根据需要多次复制tor文件夹并正确分配权限我可以进行配置，以便每个实例为俄罗斯留下一个，为中国留下另一个等等。当然我也要重新分配端口，9050,9051,9052等。在此之后，我配置polipo，一个很好的代理，保持我的所有导航，理想的加速DW的页面，privoxy添加一些安全问题，我甚至ping，traceroute和DNS查询使一切都四处走动。我把这个系统的代理作为127.0.0.1:8118的代理，然后我转向privoxy，在privoxy跳到polipo之后，在后者转到Tor的实例。虽然我无法真正看到，但我可以将代理链与TOR实例一起使用，并看到当您进入页面时，一切都在不同的地方。也就是说，html将其下载为Tor的实例，对于另一个人而言，这是一个令人难以置信的页面，其中的条目被打破，以便每个partcita通过一个不同的出口节点。哇。魔术？有了etherape它是一个实时网络分析仪的图形模式可以看出。</p><p>我要走了<br>自从我感到困惑以来已经很久了。当我在做什么和做什么时达到极限，因为我总是做同样的事情。我想我有可能帮助改变一切。但我也感到愚蠢。我想发表我所拥有的一切，但我担心一切都会反对我。我已经有足够的“地方”了。我还想带领一个庞大的人员和服务器团队。但人们要么是自私的，要么是无知的，要么害怕可能发生在他们身上的事情。但将多才多艺的跨学科力量组合在一起会很棒。让事情真的变得严肃起来。</p><p>一切都是孤独的道路，现在是时候曝光了，但我想我会对自己的寂寞感到更加沮丧。我厌倦了和自己说话。这不再起作用，它对我没有帮助。不过，我还会继续……</p><p>TorMetal 2018 - TorMental是Team Hacking的出版物</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在暗网翻出来的，机翻的有点那个啥看看就就，非本人原创&lt;br&gt; &lt;strong&gt;介绍&lt;/strong&gt;&lt;br&gt;本出版物适用于所有Tor用户，他们感到厌倦看到页面掉落而其他人只是垃圾。除了过时的网站。&lt;/p&gt;
&lt;p&gt;我想我们所有进入这里的人都是因为我们厌倦了正常的互联网感染伪人
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于网络匿名</title>
    <link href="http://zero-mk.github.io/2018/07/28/%E7%BD%91%E7%BB%9C%E5%8C%BF%E5%90%8D/"/>
    <id>http://zero-mk.github.io/2018/07/28/网络匿名/</id>
    <published>2018-07-28T13:39:34.000Z</published>
    <updated>2018-07-30T12:28:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数字抵制政府和企业的间谍活动"><a href="#数字抵制政府和企业的间谍活动" class="headerlink" title="数字抵制政府和企业的间谍活动"></a>数字抵制政府和企业的间谍活动</h1><p>在暗网翻出来的，机翻的有点那个啥看看就就，非本人原创</p><p>我们的目标：本指南假装教授安全的冲浪。它不会假装鼓励犯罪。这是一个概念上的指导。个人安全手册。知道一点，它永远不会伤害。</p><p>我们认为，言论自由必须是一项真正的权利。匿名和隐私是一种保证。不幸的是，有人利用这一点来做恶。这个想法是用来对付政府和大公司。这是我们的目标。黑客行为。争取我们在网络中的权利。</p><p>它们不会给我们上网，它是一种抑制和观察的工具。看见一切的眼睛，1984年的“老大哥”。这是一个新的互动数字“圣经”，它自动出现在我们面前。“religosidad”现在发挥政府的作用。间谍活动是在没有被人看到的情况下进行的。他们还将人们的私生活变成了公共事物。比如Facebook。了解人们的品味和欲望。比如谷歌。 不仅如此，他们发送给我们并用广告轰炸我们，建立没有感官的刻板印象的目标。</p><p>计算机安全不仅仅是安装TOR浏览器。这是一个对技术态度，理解它如何运作的问题，因为它们可能会随着时间的推移而发生变化，但如果我们看到信息与个人安全没有改变，我们将一如既往地保持脆弱性。</p><p>本指南旨在证明您可以在网络上拥有匿名配置文件。我们将从硬件转向软件再到我们的习惯。</p><h3 id="硬件-软件级别："><a href="#硬件-软件级别：" class="headerlink" title="硬件/软件级别："></a>硬件/软件级别：</h3><p>首先，您应该为您的匿名任务获得一台笔记本电脑。你必须得到它的二手。如果它是新的或使用无关紧要，您的购买交易无需注册。尝试成为最常见，没有奢侈或浮华的计算机，可以让你识别。什么都不应该与你联系。从来没有，在任何情况下都不应该混合你的现实生活。你在这做什么应该留在这里。照顾好您的匿名个人资料。那么你不应该检查你的Facebook，或你的Gmail等。在这个团队中。</p><p>将密码放在开头，然后放入设置。打开笔记本电脑时，您应该要求输入密码。磁盘必须由您格式化，安装您认为方便的操作系统，但即使这样，也要加密磁盘，pendrives以及您使用的所有内容。操作系统总是要求输入密码，甚至在屏幕保护程序后要求输入密码。不言而喻，它必须是一个强大的密码。团队名称必须尽可能标准。团队总是不得不带着你或者在一个隐蔽的地方，远离你。这取决于你做了什么。</p><p>改变团队的MAC，如果你正在读这个，你必须知道它是什么。盖上相机和麦克风。仍然避免安装驱动程序。据斯诺登说，美国国家安全局可以进入，直到仍然关闭。除非您的VPN / Tor方案为您提供安全保护，否则不应使用此设备连接到Internet连接。此外，您不应该在此计算机上检查您喜欢的页面。同样，如果您希望匿名配置文件与您的真实生活档案保持匿名，则不应混淆您的匿名配置文件。从来没有。</p><p>您最后必须使用Tor浏览器完成导航，但如果您需要使用通用浏览器，通过VPN，或代理socks5或Tor，您必须在隐身模式下使用它。虽然此模式会留下您使用互联网上的常用导航生成的相同跟踪，但隐身模式不会生成本地跟踪，Cookie，历史记录等。</p><p>无论您使用何种操作系统，它都应该是英文版，其时间设置与您的不同。安装了更新的防病毒软件，如果可能的话安装防火墙和防恶魔软件。随着操作系统，它必须更新。安装必不可少的软件，并尽可能减少配置，删除所有不使用的软件，当然这也必须更新。<br>在浏览器中禁用“记住历史记录”。最好使用FireFox或其他开源，即使这样，也始终以隐身模式导航。退出浏览器时，切勿使用密码提醒并删除整个历史记录。如果您使用linux，请禁用bash历史记录，如果您使用Windows，则有许多软件可用于禁用它带来的间谍选项。在浏览器中安装附加组件，在任何地方安装https，而不是javascript，广告拦截器和随机代理。</p><p>此外，您不必拥有可识别您身份的用户名和密码。它不必涉及个人品味，标题，身体特征，更不用说你的名字。顺便说一句，您使用的密码必须是唯一的，并且对于您输入的所有系统都不可重复。此外，它不应该有任何逻辑。例如，Facebook密钥不能fuck.facebook Gmail fuck.gmail等。如果你有逻辑，有人可以猜测甚至猜你的其他键。将替代搜索引擎用于Google。</p><p>使用虚拟机，可以帮助我们，无论是测试来历不明的程序Opara只是上网冲浪有使后VM被删除或恢复回来，留下的各种证据。据CHEMA阿隆索，有恶意软件，可以“跳”虚拟机的主机系统。</p><h3 id="Internet连接级别"><a href="#Internet连接级别" class="headerlink" title="Internet连接级别"></a>Internet连接级别</h3><p>切勿使用自己的Internet连接。使用破裂的wifis（这是非法的）或网吧，图书馆，公共场所。  例如，即使您可以使用USB AP连接到Wifis，它也是理想的选择，因为如果您检测到网络中存在的入侵，您可以快速丢弃该设备。使用VPN，当然还有TOR。有几个连接方案并交替使用它们。仍然尝试每隔一段时间使用新的VPN。 禁用我们的路由器到Internet的日志记录。从其他wifis路由器到我们连接的地方，如果我们能做到的话。<br>ISP可以记录我们的流量，使用https，它不再是保证。仅这一点就可以实现隐私，所以你不知道发生了什么，但是如果你知道我们连接到谷歌那么。VPN的使用将避免ISP，但VPN的人知道我们连接并且有流量，但他们无法破译它。<br>VPN，取决于它是否付费，取决于它所在的国家/地区。它可能记录也可能不记录我们的行为。真的很难知道它。阅读您的隐私政策。谨防美国VPN。<br>连接到网络的所有设备都有一个IP，我们使用的服务越多，无论是VPN，Tor，我们都会添加层，这会使我们更难以联系到我们。作为回报，牺牲速度但获得安全。</p><h3 id="导航级别"><a href="#导航级别" class="headerlink" title="导航级别"></a>导航级别</h3><p>使用Proxies Web并不是一项艰巨的任务，无论代理记录我们的操作多少。例如，它用于测试另一个用户，该用户与我们正在使用的用户不同，并且不会保留在使用相同IP输入到两个不同帐户的系统中。<br>有些系统通过IP进行限制以进行查询。一个简单的Web代理可以跳过这个障碍。 像Tails这样的现场CD可以很好地解决所有问题。但请记住，绝对没有本地记录，但你在网络上做什么。 另外请记住，使用javascript，flash等，您可以找到您的IP，无论您采用的所有匿名超级措施如何。我们自己是最脆弱的一点。</p><h3 id="安全策略级别"><a href="#安全策略级别" class="headerlink" title="安全策略级别"></a>安全策略级别</h3><p>这是最困难的级别。改变习惯，或有两个习惯。一个正常的互联网和另一平行于暗网维权的作用。为了谁捉住了，已经这样做了，他们通过写如何，甚至你的浏览行为，相同的连接方案和重复页面之间的导航最，先进入一本刊物，那么邮件，然后和好。小心点 一切都可以找到你。<br>阅读VPN，代理等的隐私政策。隐私政策。我认为，如果我们读coinciencia，从来没有什么更多的，我们会在网上注册。怎么可能是谷歌，Facebook等 自由吗？<br>不要谈论更多，并照顾所有充分说明的事情。所有被说和“写”的东西都可以用来对付我们。 总是想象有人在看着我们。让我们按照那样做。拥有所需的安全级别是我们的责任。<br>有匿名和一些临时邮件服务。根据我们开发的活动，它可以是一个很好的资源。 请记住，计算机专家基于痕迹，日志和记录的任何内容来指责我们。其余的是逻辑问题而不是技术问题。你不应该发表评论，说明某人可以认识到你的个性，你的意见，打字错误，西班牙语的当地方言等。小心你的写作或写作方式。所有这些问题都可以将您与现实生活情况联系起来。尽可能少地参与。即使种植虚假信息，也会生成与您无关的踪迹。永远不要告诉别人你做了什么。这可能会对你不利。</p><h3 id="最后两个问题"><a href="#最后两个问题" class="headerlink" title="最后两个问题"></a>最后两个问题</h3><p>1.如果我们的电脑或手机落入当局的手中，会发生什么？<br>那不一定会发生。但是如果我们抢劫或丢失一些设备会发生什么。我们在那里拥有什么私人物品，我们不想落入坏人之手？<br>3.如果我们接近并且我们认为我们已经改变了互联网上的某些页面，会发生什么。我们准备好了吗？<br>我们的运营应始终基于之前的问题。</p><p>除了技术观点之外，秘诀就是要有多种习惯，好像我们有多重性格一样。协会的概念非常重要。我们不应该出于任何原因将这两个人物联系起来，既不是真实的，也不是虚拟的，反之亦然。这是每个人都失败并被抓住的地方。封闭的嘴巴最终成为匿名的最佳工具。自我是你的主要敌人。</p><p>对于一个自由思想的网络。知识分子革命现在开始了。</p><h3 id="开放获取游击队的宣言摘录"><a href="#开放获取游击队的宣言摘录" class="headerlink" title="开放获取游击队的宣言摘录"></a>开放获取游击队的宣言摘录</h3><p>我们需要获取信息，无论它存储在何处，制作我们的副本并与世界分享。我们需要将没有复制权的内容添加到此文件中。我们需要购买秘密数据库并将其放在网上。我们需要下载科学期刊并将其上传到文件共享网络。我们需要打一场游击队进行开放存取。</p><p>如果我们足够，在世界各地，我们不仅会发出反对知识私有化的强烈信息 - 我们将使它成为过去。你打算加入我们吗？</p><p>Aaron Swartz<br>2008年7月，Eremo，意大利</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数字抵制政府和企业的间谍活动&quot;&gt;&lt;a href=&quot;#数字抵制政府和企业的间谍活动&quot; class=&quot;headerlink&quot; title=&quot;数字抵制政府和企业的间谍活动&quot;&gt;&lt;/a&gt;数字抵制政府和企业的间谍活动&lt;/h1&gt;&lt;p&gt;在暗网翻出来的，机翻的有点那个啥看看就就，非
      
    
    </summary>
    
    
  </entry>
  
</feed>
